//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v25.18.1.0
//   At: 2025-06-18T10:28:07.7748140+02:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<IEntityFactory, GeneratedEntityFactory>();
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<NotifyEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TagEntities>();
        serviceCollection.AddTransient<TextEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<WakeWordEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AssistSatelliteServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DahuaServices>();
        serviceCollection.AddTransient<DenonavrServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<DreameVacuumServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleGenerativeAiConversationServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HeosServices>();
        serviceCollection.AddTransient<HomeConnectServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<MusicAssistantServices>();
        serviceCollection.AddTransient<NetatmoServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OpenaiConversationServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PythonScriptServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SonoffServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UnifiServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<ValveServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

/// <summary>
/// Allows HassModel to instantiate the correct generated Entity types
/// </summary>
public class GeneratedEntityFactory : IEntityFactory
{
    public Entity CreateEntity(IHaContext haContext, string entityId)
    {
        var dot = entityId.IndexOf('.', StringComparison.Ordinal);
        var domain = dot < 0 ? entityId.AsSpan() : entityId[..dot];
        return domain switch
        {
            "alarm_control_panel" => new AlarmControlPanelEntity(haContext, entityId),
            "automation" => new AutomationEntity(haContext, entityId),
            "binary_sensor" => new BinarySensorEntity(haContext, entityId),
            "button" => new ButtonEntity(haContext, entityId),
            "camera" => new CameraEntity(haContext, entityId),
            "climate" => new ClimateEntity(haContext, entityId),
            "conversation" => new ConversationEntity(haContext, entityId),
            "device_tracker" => new DeviceTrackerEntity(haContext, entityId),
            "event" => new EventEntity(haContext, entityId),
            "input_boolean" => new InputBooleanEntity(haContext, entityId),
            "input_number" => new InputNumberEntity(haContext, entityId),
            "light" => new LightEntity(haContext, entityId),
            "media_player" => new MediaPlayerEntity(haContext, entityId),
            "notify" => new NotifyEntity(haContext, entityId),
            "number" => new NumberEntity(haContext, entityId),
            "person" => new PersonEntity(haContext, entityId),
            "remote" => new RemoteEntity(haContext, entityId),
            "scene" => new SceneEntity(haContext, entityId),
            "script" => new ScriptEntity(haContext, entityId),
            "select" => new SelectEntity(haContext, entityId),
            "sensor" when IsNumeric() => new NumericSensorEntity(haContext, entityId),
            "sensor" => new SensorEntity(haContext, entityId),
            "stt" => new SttEntity(haContext, entityId),
            "sun" => new SunEntity(haContext, entityId),
            "switch" => new SwitchEntity(haContext, entityId),
            "tag" => new TagEntity(haContext, entityId),
            "text" => new TextEntity(haContext, entityId),
            "tts" => new TtsEntity(haContext, entityId),
            "update" => new UpdateEntity(haContext, entityId),
            "vacuum" => new VacuumEntity(haContext, entityId),
            "wake_word" => new WakeWordEntity(haContext, entityId),
            "weather" => new WeatherEntity(haContext, entityId),
            "zone" => new ZoneEntity(haContext, entityId),
            _ => new Entity(haContext, entityId)};
        bool IsNumeric() => haContext.GetState(entityId)?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EventEntities Event { get; }

    InputBooleanEntities InputBoolean { get; }

    InputNumberEntities InputNumber { get; }

    NotifyEntities Notify { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SttEntities Stt { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TagEntities Tag { get; }

    TextEntities Text { get; }

    TtsEntities Tts { get; }

    UpdateEntities Update { get; }

    VacuumEntities Vacuum { get; }

    WakeWordEntities WakeWord { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EventEntities Event => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public NotifyEntities Notify => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TagEntities Tag => new(_haContext);
    public TextEntities Text => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public WakeWordEntities WakeWord => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>LED strip Office  Light</summary>
    public LightEntity LedStripOfficeLight => new(_haContext, "light.led_strip_office_light");
    ///<summary>Office desk lamp</summary>
    public LightEntity OfficeDeskLamp => new(_haContext, "light.office_desk_lamp");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>Denon AVR-S660H</summary>
    public MediaPlayerEntity DenonAvrS660h => new(_haContext, "media_player.denon_avr_s660h");
    ///<summary>Denon AVR-S660H</summary>
    public MediaPlayerEntity DenonAvrS660h2 => new(_haContext, "media_player.denon_avr_s660h_2");
    ///<summary>Denon AVR-S660H</summary>
    public MediaPlayerEntity DenonAvrS660h3 => new(_haContext, "media_player.denon_avr_s660h_3");
    ///<summary>Denon AVR-S660H (AirPlay)</summary>
    public MediaPlayerEntity DenonAvrS660hAirplay => new(_haContext, "media_player.denon_avr_s660h_airplay");
    ///<summary>Salon</summary>
    public MediaPlayerEntity Googletv3256 => new(_haContext, "media_player.googletv3256");
    public MediaPlayerEntity Googletv32562 => new(_haContext, "media_player.googletv3256_2");
    public MediaPlayerEntity MacbookProRmkqj16g4hAirplay => new(_haContext, "media_player.macbook_pro_rmkqj16g4h_airplay");
    public MediaPlayerEntity MiBox => new(_haContext, "media_player.mi_box");
    public MediaPlayerEntity MiBox2 => new(_haContext, "media_player.mi_box_2");
    public MediaPlayerEntity MiBoxAirplay => new(_haContext, "media_player.mi_box_airplay");
    public MediaPlayerEntity Salon => new(_haContext, "media_player.salon");
    public MediaPlayerEntity SalonAirplay => new(_haContext, "media_player.salon_airplay");
    public MediaPlayerEntity SmartTvPro => new(_haContext, "media_player.smart_tv_pro");
    ///<summary>TV Living Room</summary>
    public MediaPlayerEntity TvLivingRoom => new(_haContext, "media_player.tv_living_room");
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all alarm_control_panel entities currently registered (at runtime) in Home Assistant as AlarmControlPanelEntity</summary>
    public IEnumerable<AlarmControlPanelEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("alarm_control_panel.")).Select(e => new AlarmControlPanelEntity(e));
    ///<summary>Alarm night</summary>
    public AlarmControlPanelEntity Nocna => new(_haContext, "alarm_control_panel.nocna");
    ///<summary>Alarm general</summary>
    public AlarmControlPanelEntity Ogolna => new(_haContext, "alarm_control_panel.ogolna");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Automate night power</summary>
    public AutomationEntity AutomateNightPower => new(_haContext, "automation.automate_night_power");
    ///<summary>Automatic HA restart on Netatmo unavailability</summary>
    public AutomationEntity AutomaticHaRestartOnNetatmoUnavailability => new(_haContext, "automation.automatic_ha_restart_on_netatmo_unavailability");
    ///<summary>Automatic light in office </summary>
    public AutomationEntity AutomaticLightInOffice => new(_haContext, "automation.automatic_light_in_office");
    ///<summary>Automatic working at home status based on desk presence</summary>
    public AutomationEntity AutomaticWorkingAtHomeStatusBasedOnDeskPresence => new(_haContext, "automation.automatic_working_at_home_status_based_on_desk_presence");
    ///<summary>Battery check</summary>
    public AutomationEntity BatteryCheck => new(_haContext, "automation.battery_check");
    ///<summary>Check gate/garage after sunset</summary>
    public AutomationEntity CheckGateGarageAfterSunset => new(_haContext, "automation.check_gate_garage_after_sunset");
    ///<summary>Emergency power supply notification </summary>
    public AutomationEntity EmergencyPowerSupplyNotification => new(_haContext, "automation.emergency_power_supply_notification");
    ///<summary>Gates opened alert </summary>
    public AutomationEntity GatesOpenedAlert => new(_haContext, "automation.gates_opened_alert");
    ///<summary>Christmas Lights Porch</summary>
    public AutomationEntity NewAutomation => new(_haContext, "automation.new_automation");
    ///<summary>Send notification about open gates after sunset</summary>
    public AutomationEntity SendNotificationAboutOpenGatesAfterSunset => new(_haContext, "automation.send_notification_about_open_gates_after_sunset");
    ///<summary>Start working day at home</summary>
    public AutomationEntity StartWorkingDayAtHome => new(_haContext, "automation.start_working_day_at_home");
    ///<summary>Start working day notification </summary>
    public AutomationEntity StartWorkingDayNotification => new(_haContext, "automation.start_working_day_notification");
    ///<summary>Synchronize desk light with working mode</summary>
    public AutomationEntity SynchronizeDeskLightWithWorkingMode => new(_haContext, "automation.synchronize_desk_light_with_working_mode");
    ///<summary>Synchronize Garage Outside Lights</summary>
    public AutomationEntity SynchronizeGarageOutsideLights => new(_haContext, "automation.synchronize_garage_outside_lights");
    ///<summary>Tag tag_ac_living_room is scanned</summary>
    public AutomationEntity TagTagAcLivingRoomIsScanned => new(_haContext, "automation.tag_tag_ac_living_room_is_scanned");
    ///<summary>Tag tag_garage_doors is scanned</summary>
    public AutomationEntity TagTagGarageDoorsIsScanned => new(_haContext, "automation.tag_tag_garage_doors_is_scanned");
    ///<summary>Tag tag_garage_switch is scanned</summary>
    public AutomationEntity TagTagGarageSwitchIsScanned => new(_haContext, "automation.tag_tag_garage_switch_is_scanned");
    ///<summary>Tag tag_home_office is scanned</summary>
    public AutomationEntity TagTagHomeOfficeIsScanned => new(_haContext, "automation.tag_tag_home_office_is_scanned");
    ///<summary>Tag tag_night_alert is scanned</summary>
    public AutomationEntity TagTagNightAlertIsScanned => new(_haContext, "automation.tag_tag_night_alert_is_scanned");
    ///<summary>Watch battery warning</summary>
    public AutomationEntity WatchBatteryWarning => new(_haContext, "automation.watch_battery_warning");
    ///<summary>Working at home automatic off</summary>
    public AutomationEntity WorkingAtHomeAutomaticOff => new(_haContext, "automation.working_at_home_automatic_off");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>Safety</summary>
    public BinarySensorEntity Alarm => new(_haContext, "binary_sensor.alarm");
    ///<summary>Office</summary>
    public BinarySensorEntity Biuro => new(_haContext, "binary_sensor.biuro");
    ///<summary>Office window</summary>
    public BinarySensorEntity BiuroKontaktron => new(_haContext, "binary_sensor.biuro_kontaktron");
    ///<summary>Standby</summary>
    public BinarySensorEntity Czuwanie => new(_haContext, "binary_sensor.czuwanie");
    ///<summary>dahua_door Motion Alarm</summary>
    public BinarySensorEntity DahuaDoorMotionAlarm => new(_haContext, "binary_sensor.dahua_door_motion_alarm");
    ///<summary>dahua_garage Motion Alarm</summary>
    public BinarySensorEntity DahuaGarageMotionAlarm => new(_haContext, "binary_sensor.dahua_garage_motion_alarm");
    ///<summary>dahua_garden Motion Alarm</summary>
    public BinarySensorEntity DahuaGardenMotionAlarm => new(_haContext, "binary_sensor.dahua_garden_motion_alarm");
    ///<summary>dahua_gate Motion Alarm</summary>
    public BinarySensorEntity DahuaGateMotionAlarm => new(_haContext, "binary_sensor.dahua_gate_motion_alarm");
    ///<summary>dahua_shed Motion Alarm</summary>
    public BinarySensorEntity DahuaShedMotionAlarm => new(_haContext, "binary_sensor.dahua_shed_motion_alarm");
    ///<summary>dahua_side Motion Alarm</summary>
    public BinarySensorEntity DahuaSideMotionAlarm => new(_haContext, "binary_sensor.dahua_side_motion_alarm");
    ///<summary>dahua_terrace Motion Alarm</summary>
    public BinarySensorEntity DahuaTerraceMotionAlarm => new(_haContext, "binary_sensor.dahua_terrace_motion_alarm");
    ///<summary>Doors</summary>
    public BinarySensorEntity Drzewi => new(_haContext, "binary_sensor.drzewi");
    ///<summary>Smoke garage</summary>
    public BinarySensorEntity DymGaraz => new(_haContext, "binary_sensor.dym_garaz");
    ///<summary>Smoke boiler room</summary>
    public BinarySensorEntity DymKotlownia => new(_haContext, "binary_sensor.dym_kotlownia");
    ///<summary>Smoke kitchen</summary>
    public BinarySensorEntity DymKuchnia => new(_haContext, "binary_sensor.dym_kuchnia");
    ///<summary>Smoke half attic</summary>
    public BinarySensorEntity DymPoddasze => new(_haContext, "binary_sensor.dym_poddasze");
    ///<summary>Smoke attic</summary>
    public BinarySensorEntity DymStrych => new(_haContext, "binary_sensor.dym_strych");
    ///<summary>Garage movement</summary>
    public BinarySensorEntity Garaz => new(_haContext, "binary_sensor.garaz");
    ///<summary>Gate</summary>
    public BinarySensorEntity KontaktronBrama => new(_haContext, "binary_sensor.kontaktron_brama");
    ///<summary>Wicket</summary>
    public BinarySensorEntity KontaktronFurtka => new(_haContext, "binary_sensor.kontaktron_furtka");
    ///<summary>Garage door</summary>
    public BinarySensorEntity KontaktronGaraz => new(_haContext, "binary_sensor.kontaktron_garaz");
    ///<summary>Corridor</summary>
    public BinarySensorEntity KorytarzDol => new(_haContext, "binary_sensor.korytarz_dol");
    ///<summary>Corridor top</summary>
    public BinarySensorEntity KorytarzGora => new(_haContext, "binary_sensor.korytarz_gora");
    ///<summary>Boiler room</summary>
    public BinarySensorEntity Kotlownia => new(_haContext, "binary_sensor.kotlownia");
    ///<summary>Kitchen</summary>
    public BinarySensorEntity Kuchnia => new(_haContext, "binary_sensor.kuchnia");
    ///<summary>eMotion Max 2 (e04b410156c6) Any Presence</summary>
    public BinarySensorEntity LnlinkhaE04b410156c6000000000000d6ac0000 => new(_haContext, "binary_sensor.lnlinkha_e04b410156c6000000000000d6ac0000");
    ///<summary>eMotion Max 2 (e04b410156c6) Zone 3 Presence</summary>
    public BinarySensorEntity LnlinkhaE04b410156c6000000000000d6ac00004 => new(_haContext, "binary_sensor.lnlinkha_e04b410156c6000000000000d6ac0000_4");
    ///<summary>eMotion Max 2 (e04b410156c6) Zone 4 Presence</summary>
    public BinarySensorEntity LnlinkhaE04b410156c6000000000000d6ac00005 => new(_haContext, "binary_sensor.lnlinkha_e04b410156c6000000000000d6ac0000_5");
    ///<summary>Olivia room</summary>
    public BinarySensorEntity PokojOliwii => new(_haContext, "binary_sensor.pokoj_oliwii");
    ///<summary>Desk Dorota</summary>
    public BinarySensorEntity PresenceDeskDorota => new(_haContext, "binary_sensor.presence_desk_dorota");
    ///<summary>Desk Kuba</summary>
    public BinarySensorEntity PresenceDeskKuba => new(_haContext, "binary_sensor.presence_desk_kuba");
    ///<summary>Living room</summary>
    public BinarySensorEntity Salon => new(_haContext, "binary_sensor.salon");
    ///<summary>Gym</summary>
    public BinarySensorEntity Silownia => new(_haContext, "binary_sensor.silownia");
    ///<summary>Telefon Kuba Doze mode</summary>
    public BinarySensorEntity SmG990bDozeMode => new(_haContext, "binary_sensor.sm_g990b_doze_mode");
    ///<summary>Telefon Kuba Headphones</summary>
    public BinarySensorEntity SmG990bHeadphones => new(_haContext, "binary_sensor.sm_g990b_headphones");
    ///<summary>Telefon Kuba Interactive</summary>
    public BinarySensorEntity SmG990bInteractive => new(_haContext, "binary_sensor.sm_g990b_interactive");
    ///<summary>Telefon Kuba Is charging</summary>
    public BinarySensorEntity SmG990bIsCharging => new(_haContext, "binary_sensor.sm_g990b_is_charging");
    ///<summary>Telefon Kuba Mobile data</summary>
    public BinarySensorEntity SmG990bMobileData => new(_haContext, "binary_sensor.sm_g990b_mobile_data");
    ///<summary>Telefon Kuba Music active</summary>
    public BinarySensorEntity SmG990bMusicActive => new(_haContext, "binary_sensor.sm_g990b_music_active");
    ///<summary>Telefon Kuba Power save</summary>
    public BinarySensorEntity SmG990bPowerSave => new(_haContext, "binary_sensor.sm_g990b_power_save");
    ///<summary>Gate state</summary>
    public BinarySensorEntity StanBramy => new(_haContext, "binary_sensor.stan_bramy");
    ///<summary>Gate state x</summary>
    public BinarySensorEntity StanBramyX => new(_haContext, "binary_sensor.stan_bramy_x");
    ///<summary>Garage state</summary>
    public BinarySensorEntity StanGarazu => new(_haContext, "binary_sensor.stan_garazu");
    ///<summary>Garage state x</summary>
    public BinarySensorEntity StanGarazuX => new(_haContext, "binary_sensor.stan_garazu_x");
    ///<summary>Bedroom</summary>
    public BinarySensorEntity Sypialnia => new(_haContext, "binary_sensor.sypialnia");
    ///<summary>TicWatch Pro 5 Doze mode</summary>
    public BinarySensorEntity TicwatchPro5DozeMode => new(_haContext, "binary_sensor.ticwatch_pro_5_doze_mode");
    ///<summary>TicWatch Pro 5 Headphones</summary>
    public BinarySensorEntity TicwatchPro5Headphones => new(_haContext, "binary_sensor.ticwatch_pro_5_headphones");
    ///<summary>TicWatch Pro 5 Interactive</summary>
    public BinarySensorEntity TicwatchPro5Interactive => new(_haContext, "binary_sensor.ticwatch_pro_5_interactive");
    ///<summary>TicWatch Pro 5 Music active</summary>
    public BinarySensorEntity TicwatchPro5MusicActive => new(_haContext, "binary_sensor.ticwatch_pro_5_music_active");
    ///<summary>TicWatch Pro 5 On body sensor</summary>
    public BinarySensorEntity TicwatchPro5OnBodySensor => new(_haContext, "binary_sensor.ticwatch_pro_5_on_body_sensor");
    ///<summary>TicWatch Pro 5 Power save</summary>
    public BinarySensorEntity TicwatchPro5PowerSave => new(_haContext, "binary_sensor.ticwatch_pro_5_power_save");
    ///<summary>Alarm power</summary>
    public BinarySensorEntity Zasilanie => new(_haContext, "binary_sensor.zasilanie");
    ///<summary>Zmywarka do naczyń Connectivity</summary>
    public BinarySensorEntity ZmywarkaDoNaczynConnectivity => new(_haContext, "binary_sensor.zmywarka_do_naczyn_connectivity");
    ///<summary>Zmywarka do naczyń Door</summary>
    public BinarySensorEntity ZmywarkaDoNaczynDoor => new(_haContext, "binary_sensor.zmywarka_do_naczyn_door");
    ///<summary>Zmywarka do naczyń Remote control</summary>
    public BinarySensorEntity ZmywarkaDoNaczynRemoteControl => new(_haContext, "binary_sensor.zmywarka_do_naczyn_remote_control");
    ///<summary>Zmywarka do naczyń Remote start</summary>
    public BinarySensorEntity ZmywarkaDoNaczynRemoteStart => new(_haContext, "binary_sensor.zmywarka_do_naczyn_remote_start");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Restart</summary>
    public ButtonEntity ApGoraRestart => new(_haContext, "button.ap_gora_restart");
    ///<summary>Restart</summary>
    public ButtonEntity ApKuchniaRestart => new(_haContext, "button.ap_kuchnia_restart");
    ///<summary>Czesio Reset Filter</summary>
    public ButtonEntity CzesioResetFilter => new(_haContext, "button.czesio_reset_filter");
    ///<summary>Czesio Reset Main Brush</summary>
    public ButtonEntity CzesioResetMainBrush => new(_haContext, "button.czesio_reset_main_brush");
    ///<summary>Czesio Reset Mop Pad</summary>
    public ButtonEntity CzesioResetMopPad => new(_haContext, "button.czesio_reset_mop_pad");
    ///<summary>Czesio Reset Sensor</summary>
    public ButtonEntity CzesioResetSensor => new(_haContext, "button.czesio_reset_sensor");
    ///<summary>Czesio Reset Side Brush</summary>
    public ButtonEntity CzesioResetSideBrush => new(_haContext, "button.czesio_reset_side_brush");
    ///<summary>Czesio Start Auto Empty</summary>
    public ButtonEntity CzesioStartAutoEmpty => new(_haContext, "button.czesio_start_auto_empty");
    ///<summary>Port 3 Power Cycle</summary>
    public ButtonEntity DreamRouterHomePort3PowerCycle => new(_haContext, "button.dream_router_home_port_3_power_cycle");
    ///<summary>Port 4 Power Cycle</summary>
    public ButtonEntity DreamRouterHomePort4PowerCycle => new(_haContext, "button.dream_router_home_port_4_power_cycle");
    ///<summary>Restart</summary>
    public ButtonEntity DreamRouterHomeRestart => new(_haContext, "button.dream_router_home_restart");
    ///<summary>Czesio  Brush Cleaner Reset Brush Life</summary>
    public ButtonEntity DreameDe1063030855P2114aResetBrushLifeA101 => new(_haContext, "button.dreame_de_1063030855_p2114a_reset_brush_life_a_10_1");
    ///<summary>Czesio  Main Brush Reset Brush Life</summary>
    public ButtonEntity DreameDe1063030855P2114aResetBrushLifeA91 => new(_haContext, "button.dreame_de_1063030855_p2114a_reset_brush_life_a_9_1");
    ///<summary>Czesio  Filter Reset Filter Life</summary>
    public ButtonEntity DreameDe1063030855P2114aResetFilterLifeA111 => new(_haContext, "button.dreame_de_1063030855_p2114a_reset_filter_life_a_11_1");
    ///<summary>Czesio * mop reset-mop-life</summary>
    public ButtonEntity DreameDe1063030855P2114aResetMopLifeA181 => new(_haContext, "button.dreame_de_1063030855_p2114a_reset_mop_life_a_18_1");
    ///<summary>Czesio  Battery Dock</summary>
    public ButtonEntity DreameDe1063030855P2114aStartChargeA31 => new(_haContext, "button.dreame_de_1063030855_p2114a_start_charge_a_3_1");
    ///<summary>Office desk lamp Identify</summary>
    public ButtonEntity GledoptoGlLb001pIdentify => new(_haContext, "button.gledopto_gl_lb_001p_identify");
    ///<summary>LED strip Office  Identify</summary>
    public ButtonEntity LedStripOfficeIdentify => new(_haContext, "button.led_strip_office_identify");
    ///<summary>plug_01 Identify</summary>
    public ButtonEntity Plug01Identify => new(_haContext, "button.plug_01_identify");
    ///<summary>Plug Monitoring Box Identify</summary>
    public ButtonEntity PlugMonitoringBoxIdentify => new(_haContext, "button.plug_monitoring_box_identify");
    ///<summary>Plug Toilet  Identify</summary>
    public ButtonEntity PlugToiletIdentify => new(_haContext, "button.plug_toilet_identify");
    ///<summary>Plug Water Pump Identify</summary>
    public ButtonEntity PlugWaterPumpIdentify => new(_haContext, "button.plug_water_pump_identify");
    ///<summary>Wiesio  Battery Start Charge</summary>
    public ButtonEntity RoborockDe261382059S5StartChargeA31 => new(_haContext, "button.roborock_de_261382059_s5_start_charge_a_3_1");
    ///<summary>Port 1 Power Cycle</summary>
    public ButtonEntity SwitchGabinetPort1PowerCycle => new(_haContext, "button.switch_gabinet_port_1_power_cycle");
    ///<summary>Port 2 Power Cycle</summary>
    public ButtonEntity SwitchGabinetPort2PowerCycle => new(_haContext, "button.switch_gabinet_port_2_power_cycle");
    ///<summary>Port 3 Power Cycle</summary>
    public ButtonEntity SwitchGabinetPort3PowerCycle => new(_haContext, "button.switch_gabinet_port_3_power_cycle");
    ///<summary>Port 4 Power Cycle</summary>
    public ButtonEntity SwitchGabinetPort4PowerCycle => new(_haContext, "button.switch_gabinet_port_4_power_cycle");
    ///<summary>Restart</summary>
    public ButtonEntity SwitchGabinetRestart => new(_haContext, "button.switch_gabinet_restart");
    ///<summary>Port 1 Power Cycle</summary>
    public ButtonEntity SwitchStrychPort1PowerCycle => new(_haContext, "button.switch_strych_port_1_power_cycle");
    ///<summary>Port 2 Power Cycle</summary>
    public ButtonEntity SwitchStrychPort2PowerCycle => new(_haContext, "button.switch_strych_port_2_power_cycle");
    ///<summary>Port 3 Power Cycle</summary>
    public ButtonEntity SwitchStrychPort3PowerCycle => new(_haContext, "button.switch_strych_port_3_power_cycle");
    ///<summary>Port 4 Power Cycle</summary>
    public ButtonEntity SwitchStrychPort4PowerCycle => new(_haContext, "button.switch_strych_port_4_power_cycle");
    ///<summary>Restart</summary>
    public ButtonEntity SwitchStrychRestart => new(_haContext, "button.switch_strych_restart");
    ///<summary>Port 1 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort1PowerCycle => new(_haContext, "button.switch_stryszek_port_1_power_cycle");
    ///<summary>Port 2 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort2PowerCycle => new(_haContext, "button.switch_stryszek_port_2_power_cycle");
    ///<summary>Port 3 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort3PowerCycle => new(_haContext, "button.switch_stryszek_port_3_power_cycle");
    ///<summary>Port 4 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort4PowerCycle => new(_haContext, "button.switch_stryszek_port_4_power_cycle");
    ///<summary>Port 5 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort5PowerCycle => new(_haContext, "button.switch_stryszek_port_5_power_cycle");
    ///<summary>Port 6 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort6PowerCycle => new(_haContext, "button.switch_stryszek_port_6_power_cycle");
    ///<summary>Port 7 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort7PowerCycle => new(_haContext, "button.switch_stryszek_port_7_power_cycle");
    ///<summary>Port 8 Power Cycle</summary>
    public ButtonEntity SwitchStryszekPort8PowerCycle => new(_haContext, "button.switch_stryszek_port_8_power_cycle");
    ///<summary>Restart</summary>
    public ButtonEntity SwitchStryszekRestart => new(_haContext, "button.switch_stryszek_restart");
    ///<summary>Switch office main Identify</summary>
    public ButtonEntity Tz3000Ti0npywkTs0001Identify => new(_haContext, "button.tz3000_ti0npywk_ts0001_identify");
    ///<summary>Switch office desk Identify</summary>
    public ButtonEntity Tz3000Ti0npywkTs0001Identify2 => new(_haContext, "button.tz3000_ti0npywk_ts0001_identify_2");
    ///<summary>Zmywarka do naczyń Stop program</summary>
    public ButtonEntity ZmywarkaDoNaczynStopProgram => new(_haContext, "button.zmywarka_do_naczyn_stop_program");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>Czesio Current Map</summary>
    public CameraEntity CzesioMap => new(_haContext, "camera.czesio_map");
    ///<summary>dahua_door Main</summary>
    public CameraEntity DahuaDoorMain => new(_haContext, "camera.dahua_door_main");
    ///<summary>dahua_garage Main</summary>
    public CameraEntity DahuaGarageMain => new(_haContext, "camera.dahua_garage_main");
    ///<summary>dahua_garden Main</summary>
    public CameraEntity DahuaGardenMain => new(_haContext, "camera.dahua_garden_main");
    ///<summary>dahua_gate Main</summary>
    public CameraEntity DahuaGateMain => new(_haContext, "camera.dahua_gate_main");
    ///<summary>dahua_shed Main</summary>
    public CameraEntity DahuaShedMain => new(_haContext, "camera.dahua_shed_main");
    ///<summary>dahua_side Main</summary>
    public CameraEntity DahuaSideMain => new(_haContext, "camera.dahua_side_main");
    ///<summary>dahua_terrace Main</summary>
    public CameraEntity DahuaTerraceMain => new(_haContext, "camera.dahua_terrace_main");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    ///<summary>Klima Salon</summary>
    public ClimateEntity _502cc6c1e5ad => new(_haContext, "climate.502cc6c1e5ad");
    ///<summary>Klima Sypialnia</summary>
    public ClimateEntity C69b20b8 => new(_haContext, "climate.c69b20b8");
    ///<summary>Klima Gabinet</summary>
    public ClimateEntity C69c4629 => new(_haContext, "climate.c69c4629");
    ///<summary>Klima Siłownia</summary>
    public ClimateEntity C69c478a => new(_haContext, "climate.c69c478a");
    ///<summary>Termostat Gabinet</summary>
    public ClimateEntity Gabinet => new(_haContext, "climate.gabinet");
    public ClimateEntity Hol => new(_haContext, "climate.hol");
    ///<summary>Termostat Klatka Schodowa</summary>
    public ClimateEntity KlatkaSchodowa => new(_haContext, "climate.klatka_schodowa");
    public ClimateEntity KlimaPokojOliwii => new(_haContext, "climate.klima_pokoj_oliwii");
    ///<summary>Termostat Kuchnia</summary>
    public ClimateEntity Kuchnia => new(_haContext, "climate.kuchnia");
    ///<summary>Termostat Łazienka Dół</summary>
    public ClimateEntity LazienkaDol => new(_haContext, "climate.lazienka_dol");
    ///<summary>Termostaty Łazienka Góra</summary>
    public ClimateEntity LazienkaGora => new(_haContext, "climate.lazienka_gora");
    ///<summary>Termostat Pokój Oliwii</summary>
    public ClimateEntity PokojOliwii => new(_haContext, "climate.pokoj_oliwii");
    ///<summary>Termostaty Salon</summary>
    public ClimateEntity Salon => new(_haContext, "climate.salon");
    ///<summary>Termostat Siłownia</summary>
    public ClimateEntity Silownia => new(_haContext, "climate.silownia");
    ///<summary>Termostat Sypialnia</summary>
    public ClimateEntity Sypialnia => new(_haContext, "climate.sypialnia");
    ///<summary>Termostaty Hol Główny</summary>
    public ClimateEntity TermostatyHolGlowny => new(_haContext, "climate.termostaty_hol_glowny");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>ChatGPT</summary>
    public ConversationEntity Chatgpt => new(_haContext, "conversation.chatgpt");
    ///<summary>Google Generative AI</summary>
    public ConversationEntity GoogleGenerativeAi => new(_haContext, "conversation.google_generative_ai");
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>AP Góra</summary>
    public DeviceTrackerEntity ApGora => new(_haContext, "device_tracker.ap_gora");
    ///<summary>AP Kuchnia</summary>
    public DeviceTrackerEntity ApKuchnia => new(_haContext, "device_tracker.ap_kuchnia");
    ///<summary>Brother printer</summary>
    public DeviceTrackerEntity BrotherPrinter => new(_haContext, "device_tracker.brother_printer");
    ///<summary>Czesio</summary>
    public DeviceTrackerEntity Czesio => new(_haContext, "device_tracker.czesio");
    ///<summary>Dream Router Home</summary>
    public DeviceTrackerEntity DreamRouterHome => new(_haContext, "device_tracker.dream_router_home");
    ///<summary>Klima Gabinet</summary>
    public DeviceTrackerEntity KlimaGabinet => new(_haContext, "device_tracker.klima_gabinet");
    ///<summary>Klima Pokój Oliwii</summary>
    public DeviceTrackerEntity KlimaPokojOliwii => new(_haContext, "device_tracker.klima_pokoj_oliwii");
    ///<summary>Klima Salon</summary>
    public DeviceTrackerEntity KlimaSalon => new(_haContext, "device_tracker.klima_salon");
    ///<summary>Klima Siłownia</summary>
    public DeviceTrackerEntity KlimaSilownia => new(_haContext, "device_tracker.klima_silownia");
    ///<summary>Klima Sypialnia</summary>
    public DeviceTrackerEntity KlimaSypialnia => new(_haContext, "device_tracker.klima_sypialnia");
    ///<summary>Samsung Dorota</summary>
    public DeviceTrackerEntity SamsungDorota => new(_haContext, "device_tracker.samsung_dorota");
    ///<summary>Samsung Tablet</summary>
    public DeviceTrackerEntity SamsungTablet => new(_haContext, "device_tracker.samsung_tablet");
    ///<summary>Telefon Kuba</summary>
    public DeviceTrackerEntity SmG990b => new(_haContext, "device_tracker.sm_g990b");
    ///<summary>Sonoff Switch Garaż</summary>
    public DeviceTrackerEntity SonoffSwitchGaraz => new(_haContext, "device_tracker.sonoff_switch_garaz");
    ///<summary>Switch Gabinet</summary>
    public DeviceTrackerEntity SwitchGabinet => new(_haContext, "device_tracker.switch_gabinet");
    ///<summary>Switch Strych</summary>
    public DeviceTrackerEntity SwitchStrych => new(_haContext, "device_tracker.switch_strych");
    ///<summary>Switch Stryszek</summary>
    public DeviceTrackerEntity SwitchStryszek => new(_haContext, "device_tracker.switch_stryszek");
    ///<summary>TicWatch Pro 5</summary>
    public DeviceTrackerEntity TicwatchPro5 => new(_haContext, "device_tracker.ticwatch_pro_5");
    public DeviceTrackerEntity UnifiDefault382656De7406 => new(_haContext, "device_tracker.unifi_default_38_26_56_de_74_06");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all event entities currently registered (at runtime) in Home Assistant as EventEntity</summary>
    public IEnumerable<EventEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("event.")).Select(e => new EventEntity(e));
    ///<summary>Backup Automatic backup</summary>
    public EventEntity BackupAutomaticBackup => new(_haContext, "event.backup_automatic_backup");
    ///<summary>Czesio  Battery Low Battery</summary>
    public EventEntity DreameDe1063030855P2114aLowBatteryE31 => new(_haContext, "event.dreame_de_1063030855_p2114a_low_battery_e_3_1");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>GatesOpenAfterSunset</summary>
    public InputBooleanEntity Gatesopenaftersunset => new(_haContext, "input_boolean.gatesopenaftersunset");
    ///<summary>Input working day notification </summary>
    public InputBooleanEntity InputWorkingDayNotification => new(_haContext, "input_boolean.input_working_day_notification");
    ///<summary>netdaemon_home_automation_net_daemon_apps_work_from_home_work_from_home_led_calendar_schedule</summary>
    public InputBooleanEntity NetdaemonHomeAutomationNetDaemonAppsWorkFromHomeWorkFromHomeLedCalendarSchedule => new(_haContext, "input_boolean.netdaemon_home_automation_net_daemon_apps_work_from_home_work_from_home_led_calendar_schedule");
    ///<summary>Working at home</summary>
    public InputBooleanEntity WorkingAtHome => new(_haContext, "input_boolean.working_at_home");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_number entities currently registered (at runtime) in Home Assistant as InputNumberEntity</summary>
    public IEnumerable<InputNumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_number.")).Select(e => new InputNumberEntity(e));
    public InputNumberEntity InitialEnergyBank => new(_haContext, "input_number.initial_energy_bank");
}

public partial class NotifyEntities
{
    private readonly IHaContext _haContext;
    public NotifyEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all notify entities currently registered (at runtime) in Home Assistant as NotifyEntity</summary>
    public IEnumerable<NotifyEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("notify.")).Select(e => new NotifyEntity(e));
    ///<summary>Czesio * map update-map</summary>
    public NotifyEntity DreameDe1063030855P2114aUpdateMapA62 => new(_haContext, "notify.dreame_de_1063030855_p2114a_update_map_a_6_2");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>Office desk lamp Start-up color temperature</summary>
    public NumberEntity GledoptoGlLb001pStartUpColorTemperature => new(_haContext, "number.gledopto_gl_lb_001p_start_up_color_temperature");
    ///<summary>Office desk lamp Start-up current level</summary>
    public NumberEntity GledoptoGlLb001pStartUpCurrentLevel => new(_haContext, "number.gledopto_gl_lb_001p_start_up_current_level");
    ///<summary>eMotion Max 2 (e04b410156c6) Brightness change threshold (lux)</summary>
    public NumberEntity LnlinkhaE04b410156c6000000000000d6ac0000ConfigL => new(_haContext, "number.lnlinkha_e04b410156c6000000000000d6ac0000_config_l");
    ///<summary>eMotion Max 2 (e04b410156c6) Brightness update frequency (sec)</summary>
    public NumberEntity LnlinkhaE04b410156c6000000000000d6ac0000ConfigOptI => new(_haContext, "number.lnlinkha_e04b410156c6000000000000d6ac0000_config_opt_i");
    ///<summary>eMotion Max 2 (e04b410156c6) Radar target update frequency (sec)</summary>
    public NumberEntity LnlinkhaE04b410156c6000000000000d6ac0000ConfigRadarI => new(_haContext, "number.lnlinkha_e04b410156c6000000000000d6ac0000_config_radar_i");
    ///<summary>Zmywarka do naczyń Start in relative</summary>
    public NumberEntity ZmywarkaDoNaczynStartInRelative => new(_haContext, "number.zmywarka_do_naczyn_start_in_relative");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Jakub</summary>
    public PersonEntity Domek => new(_haContext, "person.domek");
    ///<summary>Dorota</summary>
    public PersonEntity Dorota => new(_haContext, "person.dorota");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all remote entities currently registered (at runtime) in Home Assistant as RemoteEntity</summary>
    public IEnumerable<RemoteEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("remote.")).Select(e => new RemoteEntity(e));
    public RemoteEntity MiBox => new(_haContext, "remote.mi_box");
    public RemoteEntity SmartTvPro => new(_haContext, "remote.smart_tv_pro");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>End work at home</summary>
    public SceneEntity EndWorkAtHome => new(_haContext, "scene.end_work_at_home");
    ///<summary>Work at home</summary>
    public SceneEntity WorkAtHome => new(_haContext, "scene.work_at_home");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all script entities currently registered (at runtime) in Home Assistant as ScriptEntity</summary>
    public IEnumerable<ScriptEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("script.")).Select(e => new ScriptEntity(e));
    ///<summary>Uzbrój wszystkie strefy</summary>
    public ScriptEntity ArmAll => new(_haContext, "script.arm_all");
    ///<summary>Uzbrój nocną</summary>
    public ScriptEntity ArmNight => new(_haContext, "script.arm_night");
    ///<summary>Close all doors</summary>
    public ScriptEntity CloseAllDoors => new(_haContext, "script.close_all_doors");
    ///<summary>Rozbrój wszystkie strefy</summary>
    public ScriptEntity DisarmAll => new(_haContext, "script.disarm_all");
    ///<summary>Rozbrój nocną</summary>
    public ScriptEntity DisarmNight => new(_haContext, "script.disarm_night");
    ///<summary>Open all doors</summary>
    public ScriptEntity OpenAllDoors => new(_haContext, "script.open_all_doors");
    ///<summary>Toggle both zones</summary>
    public ScriptEntity ToggleAll => new(_haContext, "script.toggle_all");
    ///<summary>Toggle Garage Doors</summary>
    public ScriptEntity ToggleGarageDoors => new(_haContext, "script.toggle_garage_doors");
    ///<summary>Toggle Gate</summary>
    public ScriptEntity ToggleGate => new(_haContext, "script.toggle_gate");
    ///<summary>Toggle night zone</summary>
    public ScriptEntity ToggleNight => new(_haContext, "script.toggle_night");
    ///<summary>Uzbrój wszystkie strefy</summary>
    public ScriptEntity UzbrojWszystkieStrefy => new(_haContext, "script.uzbroj_wszystkie_strefy");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Domek</summary>
    public SelectEntity Domek => new(_haContext, "select.domek");
    ///<summary>Czesio  Robot Cleaner Modes</summary>
    public SelectEntity DreameDe1063030855P2114aModeP23 => new(_haContext, "select.dreame_de_1063030855_p2114a_mode_p_2_3");
    ///<summary>Office desk lamp Start-up behavior</summary>
    public SelectEntity GledoptoGlLb001pStartUpBehavior => new(_haContext, "select.gledopto_gl_lb_001p_start_up_behavior");
    ///<summary>plug_01 Backlight mode</summary>
    public SelectEntity Plug01BacklightMode => new(_haContext, "select.plug_01_backlight_mode");
    ///<summary>plug_01 Power on state</summary>
    public SelectEntity Plug01PowerOnState => new(_haContext, "select.plug_01_power_on_state");
    ///<summary>Plug Monitoring Box Backlight mode</summary>
    public SelectEntity PlugMonitoringBoxBacklightMode => new(_haContext, "select.plug_monitoring_box_backlight_mode");
    ///<summary>Plug Monitoring Box Power on state</summary>
    public SelectEntity PlugMonitoringBoxPowerOnState => new(_haContext, "select.plug_monitoring_box_power_on_state");
    ///<summary>Plug Toilet  Backlight mode</summary>
    public SelectEntity PlugToiletBacklightMode => new(_haContext, "select.plug_toilet_backlight_mode");
    ///<summary>Plug Toilet  Power on state</summary>
    public SelectEntity PlugToiletPowerOnState => new(_haContext, "select.plug_toilet_power_on_state");
    ///<summary>Plug Water Pump Backlight mode</summary>
    public SelectEntity PlugWaterPumpBacklightMode => new(_haContext, "select.plug_water_pump_backlight_mode");
    ///<summary>Plug Water Pump Power on state</summary>
    public SelectEntity PlugWaterPumpPowerOnState => new(_haContext, "select.plug_water_pump_power_on_state");
    ///<summary>Wiesio  Robot Cleaner Mode</summary>
    public SelectEntity RoborockDe261382059S5ModeP22 => new(_haContext, "select.roborock_de_261382059_s5_mode_p_2_2");
    ///<summary>Zmywarka do naczyń Active program</summary>
    public SelectEntity ZmywarkaDoNaczynActiveProgram => new(_haContext, "select.zmywarka_do_naczyn_active_program");
    ///<summary>Zmywarka do naczyń Selected program</summary>
    public SelectEntity ZmywarkaDoNaczynSelectedProgram => new(_haContext, "select.zmywarka_do_naczyn_selected_program");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>State</summary>
    public SensorEntity ApGoraState => new(_haContext, "sensor.ap_gora_state");
    ///<summary>Uplink MAC</summary>
    public SensorEntity ApGoraUplinkMac => new(_haContext, "sensor.ap_gora_uplink_mac");
    ///<summary>Uptime</summary>
    public SensorEntity ApGoraUptime => new(_haContext, "sensor.ap_gora_uptime");
    ///<summary>State</summary>
    public SensorEntity ApKuchniaState => new(_haContext, "sensor.ap_kuchnia_state");
    ///<summary>Uplink MAC</summary>
    public SensorEntity ApKuchniaUplinkMac => new(_haContext, "sensor.ap_kuchnia_uplink_mac");
    ///<summary>Uptime</summary>
    public SensorEntity ApKuchniaUptime => new(_haContext, "sensor.ap_kuchnia_uptime");
    ///<summary>Backup Backup Manager state</summary>
    public SensorEntity BackupBackupManagerState => new(_haContext, "sensor.backup_backup_manager_state");
    ///<summary>Backup Last attempted automatic backup</summary>
    public SensorEntity BackupLastAttemptedAutomaticBackup => new(_haContext, "sensor.backup_last_attempted_automatic_backup");
    ///<summary>Backup Last successful automatic backup</summary>
    public SensorEntity BackupLastSuccessfulAutomaticBackup => new(_haContext, "sensor.backup_last_successful_automatic_backup");
    ///<summary>Backup Next scheduled automatic backup</summary>
    public SensorEntity BackupNextScheduledAutomaticBackup => new(_haContext, "sensor.backup_next_scheduled_automatic_backup");
    ///<summary>Brother HL-L2370DN series</summary>
    public SensorEntity BrotherHlL2370dnSeries => new(_haContext, "sensor.brother_hl_l2370dn_series");
    ///<summary>Czesio Charging Status</summary>
    public SensorEntity CzesioChargingStatus => new(_haContext, "sensor.czesio_charging_status");
    ///<summary>Czesio Current Room</summary>
    public SensorEntity CzesioCurrentRoom => new(_haContext, "sensor.czesio_current_room");
    ///<summary>Czesio Error</summary>
    public SensorEntity CzesioError => new(_haContext, "sensor.czesio_error");
    ///<summary>Czesio State</summary>
    public SensorEntity CzesioState => new(_haContext, "sensor.czesio_state");
    ///<summary>Czesio Status</summary>
    public SensorEntity CzesioStatus => new(_haContext, "sensor.czesio_status");
    ///<summary>State</summary>
    public SensorEntity DreamRouterHomeState => new(_haContext, "sensor.dream_router_home_state");
    ///<summary>Uptime</summary>
    public SensorEntity DreamRouterHomeUptime => new(_haContext, "sensor.dream_router_home_uptime");
    ///<summary>Czesio  Battery Charging State</summary>
    public SensorEntity DreameDe1063030855P2114aChargingStateP32 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_charging_state_p_3_2");
    ///<summary>Czesio  Robot Cleaner Error</summary>
    public SensorEntity DreameDe1063030855P2114aFaultP22 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_fault_p_2_2");
    ///<summary>Czesio * map map-data</summary>
    public SensorEntity DreameDe1063030855P2114aMapDataP61 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_map_data_p_6_1");
    ///<summary>Czesio * map mult-map-info</summary>
    public SensorEntity DreameDe1063030855P2114aMultMapInfoP68 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_mult_map_info_p_6_8");
    ///<summary>Czesio * map object-name</summary>
    public SensorEntity DreameDe1063030855P2114aObjectNameP63 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_object_name_p_6_3");
    ///<summary>Czesio * map result-code</summary>
    public SensorEntity DreameDe1063030855P2114aResultCodeP66 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_result_code_p_6_6");
    ///<summary>Czesio * map robot-time</summary>
    public SensorEntity DreameDe1063030855P2114aRobotTimeP65 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_robot_time_p_6_5");
    ///<summary>HL-L2370DN Status</summary>
    public SensorEntity HlL2370dnStatus => new(_haContext, "sensor.hl_l2370dn_status");
    ///<summary>Home Air quality day 0</summary>
    public SensorEntity HomeAirQualityDay0 => new(_haContext, "sensor.home_air_quality_day_0");
    ///<summary>Home Air quality day 1</summary>
    public SensorEntity HomeAirQualityDay1 => new(_haContext, "sensor.home_air_quality_day_1");
    ///<summary>Home Air quality day 2</summary>
    public SensorEntity HomeAirQualityDay2 => new(_haContext, "sensor.home_air_quality_day_2");
    ///<summary>Home Air quality day 3</summary>
    public SensorEntity HomeAirQualityDay3 => new(_haContext, "sensor.home_air_quality_day_3");
    ///<summary>Home Air quality day 4</summary>
    public SensorEntity HomeAirQualityDay4 => new(_haContext, "sensor.home_air_quality_day_4");
    ///<summary>Home Condition day 0</summary>
    public SensorEntity HomeConditionDay0 => new(_haContext, "sensor.home_condition_day_0");
    ///<summary>Home Condition day 1</summary>
    public SensorEntity HomeConditionDay1 => new(_haContext, "sensor.home_condition_day_1");
    ///<summary>Home Condition day 2</summary>
    public SensorEntity HomeConditionDay2 => new(_haContext, "sensor.home_condition_day_2");
    ///<summary>Home Condition day 3</summary>
    public SensorEntity HomeConditionDay3 => new(_haContext, "sensor.home_condition_day_3");
    ///<summary>Home Condition day 4</summary>
    public SensorEntity HomeConditionDay4 => new(_haContext, "sensor.home_condition_day_4");
    ///<summary>Home Condition night 0</summary>
    public SensorEntity HomeConditionNight0 => new(_haContext, "sensor.home_condition_night_0");
    ///<summary>Home Condition night 1</summary>
    public SensorEntity HomeConditionNight1 => new(_haContext, "sensor.home_condition_night_1");
    ///<summary>Home Condition night 2</summary>
    public SensorEntity HomeConditionNight2 => new(_haContext, "sensor.home_condition_night_2");
    ///<summary>Home Condition night 3</summary>
    public SensorEntity HomeConditionNight3 => new(_haContext, "sensor.home_condition_night_3");
    ///<summary>Home Condition night 4</summary>
    public SensorEntity HomeConditionNight4 => new(_haContext, "sensor.home_condition_night_4");
    ///<summary>Home Pressure tendency</summary>
    public SensorEntity HomePressureTendency => new(_haContext, "sensor.home_pressure_tendency");
    ///<summary>Jakub Syty 6,12kWp Error code</summary>
    public SensorEntity JakubSyty612kwpErrorCode => new(_haContext, "sensor.jakub_syty_612kwp_error_code");
    ///<summary>Jakub Syty 6,12kWp Error message</summary>
    public SensorEntity JakubSyty612kwpErrorMessage => new(_haContext, "sensor.jakub_syty_612kwp_error_message");
    ///<summary>Jakub Syty 6,12kWp Inverter state</summary>
    public SensorEntity JakubSyty612kwpInverterState => new(_haContext, "sensor.jakub_syty_612kwp_inverter_state");
    ///<summary>Jakub Syty 6,12kWp Status code</summary>
    public SensorEntity JakubSyty612kwpStatusCode => new(_haContext, "sensor.jakub_syty_612kwp_status_code");
    ///<summary>Jakub Syty 6,12kWp Status message</summary>
    public SensorEntity JakubSyty612kwpStatusMessage => new(_haContext, "sensor.jakub_syty_612kwp_status_message");
    ///<summary>eMotion Max 2 (e04b410156c6) Persons in Detection Range</summary>
    public SensorEntity LnlinkhaE04b410156c6000000000000d6ac0000 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000");
    ///<summary>eMotion Max 2 (e04b410156c6) Persons in Fenced Zones</summary>
    public SensorEntity LnlinkhaE04b410156c6000000000000d6ac00002 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_2");
    ///<summary>eMotion Max 2 (e04b410156c6) Zone 1 Target Counts</summary>
    public SensorEntity LnlinkhaE04b410156c6000000000000d6ac00003 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_3");
    ///<summary>eMotion Max 2 (e04b410156c6) Zone 2 Target Counts</summary>
    public SensorEntity LnlinkhaE04b410156c6000000000000d6ac00004 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_4");
    ///<summary>eMotion Max 2 (e04b410156c6) Zone 3 Target Counts</summary>
    public SensorEntity LnlinkhaE04b410156c6000000000000d6ac00005 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_5");
    ///<summary>eMotion Max 2 (e04b410156c6) Zone 4 Target Counts</summary>
    public SensorEntity LnlinkhaE04b410156c6000000000000d6ac00006 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_6");
    ///<summary>Solar production forecast Highest power peak time - today</summary>
    public SensorEntity PowerHighestPeakTimeToday => new(_haContext, "sensor.power_highest_peak_time_today");
    ///<summary>Solar production forecast Highest power peak time - tomorrow</summary>
    public SensorEntity PowerHighestPeakTimeTomorrow => new(_haContext, "sensor.power_highest_peak_time_tomorrow");
    ///<summary>Wiesio  Battery Charging State</summary>
    public SensorEntity RoborockDe261382059S5ChargingStateP32 => new(_haContext, "sensor.roborock_de_261382059_s5_charging_state_p_3_2");
    public SensorEntity SGuest => new(_haContext, "sensor.s_guest");
    public SensorEntity SIot => new(_haContext, "sensor.s_iot");
    public SensorEntity SMain => new(_haContext, "sensor.s_main");
    public SensorEntity STv => new(_haContext, "sensor.s_tv");
    ///<summary>Samsung Dorota Battery state</summary>
    public SensorEntity SamsungDorotaBatteryState => new(_haContext, "sensor.samsung_dorota_battery_state");
    ///<summary>Samsung Dorota Charger type</summary>
    public SensorEntity SamsungDorotaChargerType => new(_haContext, "sensor.samsung_dorota_charger_type");
    ///<summary>Samsung Tablet Battery state</summary>
    public SensorEntity SamsungTabletBatteryState => new(_haContext, "sensor.samsung_tablet_battery_state");
    ///<summary>Samsung Tablet Charger type</summary>
    public SensorEntity SamsungTabletChargerType => new(_haContext, "sensor.samsung_tablet_charger_type");
    ///<summary>Telefon Kuba Battery health</summary>
    public SensorEntity SmG990bBatteryHealth => new(_haContext, "sensor.sm_g990b_battery_health");
    ///<summary>Telefon Kuba Battery state</summary>
    public SensorEntity SmG990bBatteryState => new(_haContext, "sensor.sm_g990b_battery_state");
    ///<summary>Telefon Kuba Charger type</summary>
    public SensorEntity SmG990bChargerType => new(_haContext, "sensor.sm_g990b_charger_type");
    ///<summary>Telefon Kuba Do Not Disturb sensor</summary>
    public SensorEntity SmG990bDoNotDisturbSensor => new(_haContext, "sensor.sm_g990b_do_not_disturb_sensor");
    ///<summary>Telefon Kuba Last reboot</summary>
    public SensorEntity SmG990bLastReboot => new(_haContext, "sensor.sm_g990b_last_reboot");
    ///<summary>Telefon Kuba Media session</summary>
    public SensorEntity SmG990bMediaSession => new(_haContext, "sensor.sm_g990b_media_session");
    ///<summary>Telefon Kuba Next alarm</summary>
    public SensorEntity SmG990bNextAlarm => new(_haContext, "sensor.sm_g990b_next_alarm");
    ///<summary>Telefon Kuba Volume level music</summary>
    public SensorEntity SmG990bVolumeLevelMusic => new(_haContext, "sensor.sm_g990b_volume_level_music");
    ///<summary>Telefon Kuba Volume level notification</summary>
    public SensorEntity SmG990bVolumeLevelNotification => new(_haContext, "sensor.sm_g990b_volume_level_notification");
    ///<summary>Telefon Kuba Volume level ringer</summary>
    public SensorEntity SmG990bVolumeLevelRinger => new(_haContext, "sensor.sm_g990b_volume_level_ringer");
    ///<summary>Smart Meter TS 65A-3 Power factor</summary>
    public SensorEntity SmartMeterTs65a3PowerFactor => new(_haContext, "sensor.smart_meter_ts_65a_3_power_factor");
    ///<summary>SolarNet Meter mode</summary>
    public SensorEntity SolarnetMeterMode2 => new(_haContext, "sensor.solarnet_meter_mode_2");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>State</summary>
    public SensorEntity SwitchGabinetState => new(_haContext, "sensor.switch_gabinet_state");
    ///<summary>Uplink MAC</summary>
    public SensorEntity SwitchGabinetUplinkMac => new(_haContext, "sensor.switch_gabinet_uplink_mac");
    ///<summary>Uptime</summary>
    public SensorEntity SwitchGabinetUptime => new(_haContext, "sensor.switch_gabinet_uptime");
    ///<summary>State</summary>
    public SensorEntity SwitchStrychState => new(_haContext, "sensor.switch_strych_state");
    ///<summary>Uplink MAC</summary>
    public SensorEntity SwitchStrychUplinkMac => new(_haContext, "sensor.switch_strych_uplink_mac");
    ///<summary>Uptime</summary>
    public SensorEntity SwitchStrychUptime => new(_haContext, "sensor.switch_strych_uptime");
    ///<summary>State</summary>
    public SensorEntity SwitchStryszekState => new(_haContext, "sensor.switch_stryszek_state");
    ///<summary>Uplink MAC</summary>
    public SensorEntity SwitchStryszekUplinkMac => new(_haContext, "sensor.switch_stryszek_uplink_mac");
    ///<summary>Uptime</summary>
    public SensorEntity SwitchStryszekUptime => new(_haContext, "sensor.switch_stryszek_uptime");
    ///<summary>TicWatch Pro 5 Activity state</summary>
    public SensorEntity TicwatchPro5ActivityState => new(_haContext, "sensor.ticwatch_pro_5_activity_state");
    ///<summary>TicWatch Pro 5 Battery state</summary>
    public SensorEntity TicwatchPro5BatteryState => new(_haContext, "sensor.ticwatch_pro_5_battery_state");
    ///<summary>TicWatch Pro 5 Charger type</summary>
    public SensorEntity TicwatchPro5ChargerType => new(_haContext, "sensor.ticwatch_pro_5_charger_type");
    ///<summary>TicWatch Pro 5 Do Not Disturb sensor</summary>
    public SensorEntity TicwatchPro5DoNotDisturbSensor => new(_haContext, "sensor.ticwatch_pro_5_do_not_disturb_sensor");
    ///<summary>TicWatch Pro 5 Last reboot</summary>
    public SensorEntity TicwatchPro5LastReboot => new(_haContext, "sensor.ticwatch_pro_5_last_reboot");
    ///<summary>TicWatch Pro 5 Next alarm</summary>
    public SensorEntity TicwatchPro5NextAlarm => new(_haContext, "sensor.ticwatch_pro_5_next_alarm");
    ///<summary>TicWatch Pro 5 Volume level music</summary>
    public SensorEntity TicwatchPro5VolumeLevelMusic => new(_haContext, "sensor.ticwatch_pro_5_volume_level_music");
    ///<summary>TicWatch Pro 5 Volume level notification</summary>
    public SensorEntity TicwatchPro5VolumeLevelNotification => new(_haContext, "sensor.ticwatch_pro_5_volume_level_notification");
    ///<summary>Zmywarka do naczyń Door</summary>
    public SensorEntity ZmywarkaDoNaczynDoor => new(_haContext, "sensor.zmywarka_do_naczyn_door");
    ///<summary>Zmywarka do naczyń Operation state</summary>
    public SensorEntity ZmywarkaDoNaczynOperationState => new(_haContext, "sensor.zmywarka_do_naczyn_operation_state");
    ///<summary>Zmywarka do naczyń Program aborted</summary>
    public SensorEntity ZmywarkaDoNaczynProgramAborted => new(_haContext, "sensor.zmywarka_do_naczyn_program_aborted");
    ///<summary>Zmywarka do naczyń Program finish time</summary>
    public SensorEntity ZmywarkaDoNaczynProgramFinishTime => new(_haContext, "sensor.zmywarka_do_naczyn_program_finish_time");
    ///<summary>Zmywarka do naczyń Program finished</summary>
    public SensorEntity ZmywarkaDoNaczynProgramFinished => new(_haContext, "sensor.zmywarka_do_naczyn_program_finished");
    ///<summary>Zmywarka do naczyń Rinse aid nearly empty</summary>
    public SensorEntity ZmywarkaDoNaczynRinseAidNearlyEmpty => new(_haContext, "sensor.zmywarka_do_naczyn_rinse_aid_nearly_empty");
    ///<summary>Zmywarka do naczyń Salt nearly empty</summary>
    public SensorEntity ZmywarkaDoNaczynSaltNearlyEmpty => new(_haContext, "sensor.zmywarka_do_naczyn_salt_nearly_empty");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity ApGoraCpuUtilization => new(_haContext, "sensor.ap_gora_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity ApGoraMemoryUtilization => new(_haContext, "sensor.ap_gora_memory_utilization");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity ApKuchniaCpuUtilization => new(_haContext, "sensor.ap_kuchnia_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity ApKuchniaMemoryUtilization => new(_haContext, "sensor.ap_kuchnia_memory_utilization");
    ///<summary>Battery charge sum</summary>
    public NumericSensorEntity BatteryChargeSum => new(_haContext, "sensor.battery_charge_sum");
    ///<summary>Battery discharge sum</summary>
    public NumericSensorEntity BatteryDischargeSum => new(_haContext, "sensor.battery_discharge_sum");
    ///<summary>Brother HL-L2370DN series BK</summary>
    public NumericSensorEntity BrotherHlL2370dnSeriesBk => new(_haContext, "sensor.brother_hl_l2370dn_series_bk");
    ///<summary>BYD Battery-Box Premium HV DC current</summary>
    public NumericSensorEntity BydBatteryBoxPremiumHvDcCurrent => new(_haContext, "sensor.byd_battery_box_premium_hv_dc_current");
    ///<summary>BYD Battery-Box Premium HV DC voltage</summary>
    public NumericSensorEntity BydBatteryBoxPremiumHvDcVoltage => new(_haContext, "sensor.byd_battery_box_premium_hv_dc_voltage");
    ///<summary>BYD Battery-Box Premium HV Designed capacity</summary>
    public NumericSensorEntity BydBatteryBoxPremiumHvDesignedCapacity => new(_haContext, "sensor.byd_battery_box_premium_hv_designed_capacity");
    ///<summary>BYD Battery-Box Premium HV Maximum capacity</summary>
    public NumericSensorEntity BydBatteryBoxPremiumHvMaximumCapacity => new(_haContext, "sensor.byd_battery_box_premium_hv_maximum_capacity");
    ///<summary>BYD Battery-Box Premium HV State of charge</summary>
    public NumericSensorEntity BydBatteryBoxPremiumHvStateOfCharge => new(_haContext, "sensor.byd_battery_box_premium_hv_state_of_charge");
    ///<summary>BYD Battery-Box Premium HV Temperature</summary>
    public NumericSensorEntity BydBatteryBoxPremiumHvTemperature => new(_haContext, "sensor.byd_battery_box_premium_hv_temperature");
    ///<summary>Current Power Production</summary>
    public NumericSensorEntity CurrentPowerProduction => new(_haContext, "sensor.current_power_production");
    ///<summary>Current Power Usage</summary>
    public NumericSensorEntity CurrentPowerUsage => new(_haContext, "sensor.current_power_usage");
    ///<summary>Czesio Battery Level</summary>
    public NumericSensorEntity CzesioBatteryLevel => new(_haContext, "sensor.czesio_battery_level");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity DreamRouterHomeCpuUtilization => new(_haContext, "sensor.dream_router_home_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity DreamRouterHomeMemoryUtilization => new(_haContext, "sensor.dream_router_home_memory_utilization");
    ///<summary>Czesio  Brush Cleaner Brush Left Time</summary>
    public NumericSensorEntity DreameDe1063030855P2114aBrushLeftTimeP101 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_brush_left_time_p_10_1");
    ///<summary>Czesio  Main Brush Brush Left Time</summary>
    public NumericSensorEntity DreameDe1063030855P2114aBrushLeftTimeP91 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_brush_left_time_p_9_1");
    ///<summary>Czesio  Brush Cleaner Brush Life Level</summary>
    public NumericSensorEntity DreameDe1063030855P2114aBrushLifeLevelP102 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_brush_life_level_p_10_2");
    ///<summary>Czesio  Main Brush Brush Life Level</summary>
    public NumericSensorEntity DreameDe1063030855P2114aBrushLifeLevelP92 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_brush_life_level_p_9_2");
    ///<summary>Czesio  Filter Filter Left Time</summary>
    public NumericSensorEntity DreameDe1063030855P2114aFilterLeftTimeP112 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_filter_left_time_p_11_2");
    ///<summary>Czesio  Filter Filter Life Level</summary>
    public NumericSensorEntity DreameDe1063030855P2114aFilterLifeLevelP111 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_filter_life_level_p_11_1");
    ///<summary>Czesio * mop mop-left-time</summary>
    public NumericSensorEntity DreameDe1063030855P2114aMopLeftTimeP182 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_mop_left_time_p_18_2");
    ///<summary>Czesio * mop mop-life-level</summary>
    public NumericSensorEntity DreameDe1063030855P2114aMopLifeLevelP181 => new(_haContext, "sensor.dreame_de_1063030855_p2114a_mop_life_level_p_18_1");
    ///<summary>Solar production forecast Estimated energy production - this hour</summary>
    public NumericSensorEntity EnergyCurrentHour => new(_haContext, "sensor.energy_current_hour");
    ///<summary>Solar production forecast Estimated energy production - next hour</summary>
    public NumericSensorEntity EnergyNextHour => new(_haContext, "sensor.energy_next_hour");
    ///<summary>Solar production forecast Estimated energy production - today</summary>
    public NumericSensorEntity EnergyProductionToday => new(_haContext, "sensor.energy_production_today");
    ///<summary>Solar production forecast Estimated energy production - remaining today</summary>
    public NumericSensorEntity EnergyProductionTodayRemaining => new(_haContext, "sensor.energy_production_today_remaining");
    ///<summary>Solar production forecast Estimated energy production - tomorrow</summary>
    public NumericSensorEntity EnergyProductionTomorrow => new(_haContext, "sensor.energy_production_tomorrow");
    ///<summary>Termostat Gabinet Battery</summary>
    public NumericSensorEntity GlowicaGabinetBattery => new(_haContext, "sensor.glowica_gabinet_battery");
    ///<summary>Termostaty Hol Główny Battery</summary>
    public NumericSensorEntity GlowicaHolGlownyBattery => new(_haContext, "sensor.glowica_hol_glowny_battery");
    ///<summary>Termostat Klatka Schodowa Battery</summary>
    public NumericSensorEntity GlowicaKlatkaSchodowaBattery => new(_haContext, "sensor.glowica_klatka_schodowa_battery");
    ///<summary>Termostat Kuchnia Battery</summary>
    public NumericSensorEntity GlowicaKuchniaBattery => new(_haContext, "sensor.glowica_kuchnia_battery");
    ///<summary>Termostat Łazienka Dół Battery</summary>
    public NumericSensorEntity GlowicaLazienkaDolBattery => new(_haContext, "sensor.glowica_lazienka_dol_battery");
    ///<summary>Termostaty Łazienka Góra Battery</summary>
    public NumericSensorEntity GlowicaLazienkaGoraBocznyBattery => new(_haContext, "sensor.glowica_lazienka_gora_boczny_battery");
    ///<summary>Termostaty Łazienka Góra Battery</summary>
    public NumericSensorEntity GlowicaLazienkaGoraZeberkowyBattery => new(_haContext, "sensor.glowica_lazienka_gora_zeberkowy_battery");
    ///<summary>Termostat Pokój Oliwii Battery</summary>
    public NumericSensorEntity GlowicaPokojOliwiiBattery => new(_haContext, "sensor.glowica_pokoj_oliwii_battery");
    ///<summary>Termostaty Salon Battery</summary>
    public NumericSensorEntity GlowicaSalonLewyBattery => new(_haContext, "sensor.glowica_salon_lewy_battery");
    ///<summary>Termostaty Salon Battery</summary>
    public NumericSensorEntity GlowicaSalonPrawyBattery => new(_haContext, "sensor.glowica_salon_prawy_battery");
    ///<summary>Termostat Siłownia Battery</summary>
    public NumericSensorEntity GlowicaSilowniaBattery => new(_haContext, "sensor.glowica_silownia_battery");
    ///<summary>Termostat Sypialnia Battery</summary>
    public NumericSensorEntity GlowicaSypialniaBattery => new(_haContext, "sensor.glowica_sypialnia_battery");
    ///<summary>Grid export sum</summary>
    public NumericSensorEntity GridExportSum => new(_haContext, "sensor.grid_export_sum");
    ///<summary>Grid import sum</summary>
    public NumericSensorEntity GridImportSum => new(_haContext, "sensor.grid_import_sum");
    ///<summary>HL-L2370DN Black toner remaining</summary>
    public NumericSensorEntity HlL2370dnBlackTonerRemaining => new(_haContext, "sensor.hl_l2370dn_black_toner_remaining");
    ///<summary>HL-L2370DN Drum page counter</summary>
    public NumericSensorEntity HlL2370dnDrumPageCounter => new(_haContext, "sensor.hl_l2370dn_drum_page_counter");
    ///<summary>HL-L2370DN Drum remaining lifetime</summary>
    public NumericSensorEntity HlL2370dnDrumRemainingLifetime => new(_haContext, "sensor.hl_l2370dn_drum_remaining_lifetime");
    ///<summary>HL-L2370DN Drum remaining pages</summary>
    public NumericSensorEntity HlL2370dnDrumRemainingPages => new(_haContext, "sensor.hl_l2370dn_drum_remaining_pages");
    ///<summary>HL-L2370DN Duplex unit page counter</summary>
    public NumericSensorEntity HlL2370dnDuplexUnitPageCounter => new(_haContext, "sensor.hl_l2370dn_duplex_unit_page_counter");
    ///<summary>HL-L2370DN Page counter</summary>
    public NumericSensorEntity HlL2370dnPageCounter => new(_haContext, "sensor.hl_l2370dn_page_counter");
    ///<summary>Home Cloud ceiling</summary>
    public NumericSensorEntity HomeCloudCeiling => new(_haContext, "sensor.home_cloud_ceiling");
    ///<summary>Home Common air quality index</summary>
    public NumericSensorEntity HomeCommonAirQualityIndex => new(_haContext, "sensor.home_common_air_quality_index");
    ///<summary>Home Hours of sun day 0</summary>
    public NumericSensorEntity HomeHoursOfSunDay0 => new(_haContext, "sensor.home_hours_of_sun_day_0");
    ///<summary>Home Hours of sun day 1</summary>
    public NumericSensorEntity HomeHoursOfSunDay1 => new(_haContext, "sensor.home_hours_of_sun_day_1");
    ///<summary>Home Hours of sun day 2</summary>
    public NumericSensorEntity HomeHoursOfSunDay2 => new(_haContext, "sensor.home_hours_of_sun_day_2");
    ///<summary>Home Hours of sun day 3</summary>
    public NumericSensorEntity HomeHoursOfSunDay3 => new(_haContext, "sensor.home_hours_of_sun_day_3");
    ///<summary>Home Hours of sun day 4</summary>
    public NumericSensorEntity HomeHoursOfSunDay4 => new(_haContext, "sensor.home_hours_of_sun_day_4");
    ///<summary>Home Humidity</summary>
    public NumericSensorEntity HomeHumidity => new(_haContext, "sensor.home_humidity");
    ///<summary>Home PM1</summary>
    public NumericSensorEntity HomePm1 => new(_haContext, "sensor.home_pm1");
    ///<summary>Home PM10</summary>
    public NumericSensorEntity HomePm10 => new(_haContext, "sensor.home_pm10");
    ///<summary>Home PM2.5</summary>
    public NumericSensorEntity HomePm25 => new(_haContext, "sensor.home_pm2_5");
    ///<summary>Home Precipitation</summary>
    public NumericSensorEntity HomePrecipitation => new(_haContext, "sensor.home_precipitation");
    ///<summary>Home Pressure</summary>
    public NumericSensorEntity HomePressure => new(_haContext, "sensor.home_pressure");
    ///<summary>Home RealFeel temperature</summary>
    public NumericSensorEntity HomeRealfeelTemperature => new(_haContext, "sensor.home_realfeel_temperature");
    ///<summary>Home RealFeel temperature max day 0</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay0 => new(_haContext, "sensor.home_realfeel_temperature_max_day_0");
    ///<summary>Home RealFeel temperature max day 1</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay1 => new(_haContext, "sensor.home_realfeel_temperature_max_day_1");
    ///<summary>Home RealFeel temperature max day 2</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay2 => new(_haContext, "sensor.home_realfeel_temperature_max_day_2");
    ///<summary>Home RealFeel temperature max day 3</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay3 => new(_haContext, "sensor.home_realfeel_temperature_max_day_3");
    ///<summary>Home RealFeel temperature max day 4</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay4 => new(_haContext, "sensor.home_realfeel_temperature_max_day_4");
    ///<summary>Home RealFeel temperature min day 0</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay0 => new(_haContext, "sensor.home_realfeel_temperature_min_day_0");
    ///<summary>Home RealFeel temperature min day 1</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay1 => new(_haContext, "sensor.home_realfeel_temperature_min_day_1");
    ///<summary>Home RealFeel temperature min day 2</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay2 => new(_haContext, "sensor.home_realfeel_temperature_min_day_2");
    ///<summary>Home RealFeel temperature min day 3</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay3 => new(_haContext, "sensor.home_realfeel_temperature_min_day_3");
    ///<summary>Home RealFeel temperature min day 4</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay4 => new(_haContext, "sensor.home_realfeel_temperature_min_day_4");
    ///<summary>Home Temperature</summary>
    public NumericSensorEntity HomeTemperature => new(_haContext, "sensor.home_temperature");
    ///<summary>Home Thunderstorm probability day 0</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay0 => new(_haContext, "sensor.home_thunderstorm_probability_day_0");
    ///<summary>Home Thunderstorm probability day 1</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay1 => new(_haContext, "sensor.home_thunderstorm_probability_day_1");
    ///<summary>Home Thunderstorm probability day 2</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay2 => new(_haContext, "sensor.home_thunderstorm_probability_day_2");
    ///<summary>Home Thunderstorm probability day 3</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay3 => new(_haContext, "sensor.home_thunderstorm_probability_day_3");
    ///<summary>Home Thunderstorm probability day 4</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay4 => new(_haContext, "sensor.home_thunderstorm_probability_day_4");
    ///<summary>Home Thunderstorm probability night 0</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight0 => new(_haContext, "sensor.home_thunderstorm_probability_night_0");
    ///<summary>Home Thunderstorm probability night 1</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight1 => new(_haContext, "sensor.home_thunderstorm_probability_night_1");
    ///<summary>Home Thunderstorm probability night 2</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight2 => new(_haContext, "sensor.home_thunderstorm_probability_night_2");
    ///<summary>Home Thunderstorm probability night 3</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight3 => new(_haContext, "sensor.home_thunderstorm_probability_night_3");
    ///<summary>Home Thunderstorm probability night 4</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight4 => new(_haContext, "sensor.home_thunderstorm_probability_night_4");
    ///<summary>Home UV index day 0</summary>
    public NumericSensorEntity HomeUvIndexDay0 => new(_haContext, "sensor.home_uv_index_day_0");
    ///<summary>Home UV index day 1</summary>
    public NumericSensorEntity HomeUvIndexDay1 => new(_haContext, "sensor.home_uv_index_day_1");
    ///<summary>Home UV index day 2</summary>
    public NumericSensorEntity HomeUvIndexDay2 => new(_haContext, "sensor.home_uv_index_day_2");
    ///<summary>Home UV index day 3</summary>
    public NumericSensorEntity HomeUvIndexDay3 => new(_haContext, "sensor.home_uv_index_day_3");
    ///<summary>Home UV index day 4</summary>
    public NumericSensorEntity HomeUvIndexDay4 => new(_haContext, "sensor.home_uv_index_day_4");
    ///<summary>Home Wind speed day 0</summary>
    public NumericSensorEntity HomeWindSpeedDay0 => new(_haContext, "sensor.home_wind_speed_day_0");
    ///<summary>Home Wind speed day 1</summary>
    public NumericSensorEntity HomeWindSpeedDay1 => new(_haContext, "sensor.home_wind_speed_day_1");
    ///<summary>Home Wind speed day 2</summary>
    public NumericSensorEntity HomeWindSpeedDay2 => new(_haContext, "sensor.home_wind_speed_day_2");
    ///<summary>Home Wind speed day 3</summary>
    public NumericSensorEntity HomeWindSpeedDay3 => new(_haContext, "sensor.home_wind_speed_day_3");
    ///<summary>Home Wind speed day 4</summary>
    public NumericSensorEntity HomeWindSpeedDay4 => new(_haContext, "sensor.home_wind_speed_day_4");
    ///<summary>Home Wind speed night 0</summary>
    public NumericSensorEntity HomeWindSpeedNight0 => new(_haContext, "sensor.home_wind_speed_night_0");
    ///<summary>Home Wind speed night 1</summary>
    public NumericSensorEntity HomeWindSpeedNight1 => new(_haContext, "sensor.home_wind_speed_night_1");
    ///<summary>Home Wind speed night 2</summary>
    public NumericSensorEntity HomeWindSpeedNight2 => new(_haContext, "sensor.home_wind_speed_night_2");
    ///<summary>Home Wind speed night 3</summary>
    public NumericSensorEntity HomeWindSpeedNight3 => new(_haContext, "sensor.home_wind_speed_night_3");
    ///<summary>Home Wind speed night 4</summary>
    public NumericSensorEntity HomeWindSpeedNight4 => new(_haContext, "sensor.home_wind_speed_night_4");
    ///<summary>Jakub Syty 6,12kWp AC current</summary>
    public NumericSensorEntity JakubSyty612kwpAcCurrent => new(_haContext, "sensor.jakub_syty_612kwp_ac_current");
    ///<summary>Jakub Syty 6,12kWp AC power</summary>
    public NumericSensorEntity JakubSyty612kwpAcPower => new(_haContext, "sensor.jakub_syty_612kwp_ac_power");
    ///<summary>Jakub Syty 6,12kWp DC current</summary>
    public NumericSensorEntity JakubSyty612kwpDcCurrent => new(_haContext, "sensor.jakub_syty_612kwp_dc_current");
    ///<summary>Jakub Syty 6,12kWp DC voltage</summary>
    public NumericSensorEntity JakubSyty612kwpDcVoltage => new(_haContext, "sensor.jakub_syty_612kwp_dc_voltage");
    ///<summary>Jakub Syty 6,12kWp Total energy</summary>
    public NumericSensorEntity JakubSyty612kwpTotalEnergy => new(_haContext, "sensor.jakub_syty_612kwp_total_energy");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 1 Distance</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000010 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_10");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 2 X</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000011 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_11");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 2 Y</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000012 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_12");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 2 Speed</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000013 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_13");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 2 Distance</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000014 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_14");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 3 X</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000015 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_15");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 3 Y</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000016 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_16");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 3 Speed</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000017 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_17");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 3 Distance</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000018 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_18");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 4 X</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000019 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_19");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 4 Y</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000020 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_20");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 4 Speed</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000021 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_21");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 4 Distance</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac000022 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_22");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 1 X</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac00007 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_7");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 1 Y</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac00008 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_8");
    ///<summary>eMotion Max 2 (e04b410156c6) Target 1 Speed</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac00009 => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_9");
    ///<summary>eMotion Max 2 (e04b410156c6) brightness</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac0000L => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_l");
    ///<summary>eMotion Max 2 (e04b410156c6) wifi rssi</summary>
    public NumericSensorEntity LnlinkhaE04b410156c6000000000000d6ac0000WRssi => new(_haContext, "sensor.lnlinkha_e04b410156c6000000000000d6ac0000_w_rssi");
    ///<summary>Hulajnoga  BLE Battery BLE Battery Level</summary>
    public NumericSensorEntity NinebotDeBlt419j7immuogk00V4BleBatteryLevelP21 => new(_haContext, "sensor.ninebot_de_blt_4_19j7immuogk00_v4_ble_battery_level_p_2_1");
    ///<summary>plug_01 Current</summary>
    public NumericSensorEntity Plug01Current => new(_haContext, "sensor.plug_01_current");
    ///<summary>plug_01 Power</summary>
    public NumericSensorEntity Plug01Power => new(_haContext, "sensor.plug_01_power");
    ///<summary>plug_01 Summation delivered</summary>
    public NumericSensorEntity Plug01SummationDelivered => new(_haContext, "sensor.plug_01_summation_delivered");
    ///<summary>plug_01 Voltage</summary>
    public NumericSensorEntity Plug01Voltage => new(_haContext, "sensor.plug_01_voltage");
    ///<summary>Plug Monitoring Box Current</summary>
    public NumericSensorEntity PlugMonitoringBoxCurrent => new(_haContext, "sensor.plug_monitoring_box_current");
    ///<summary>Plug Monitoring Box Power</summary>
    public NumericSensorEntity PlugMonitoringBoxPower => new(_haContext, "sensor.plug_monitoring_box_power");
    ///<summary>Plug Monitoring Box Summation delivered</summary>
    public NumericSensorEntity PlugMonitoringBoxSummationDelivered => new(_haContext, "sensor.plug_monitoring_box_summation_delivered");
    ///<summary>Plug Monitoring Box Voltage</summary>
    public NumericSensorEntity PlugMonitoringBoxVoltage => new(_haContext, "sensor.plug_monitoring_box_voltage");
    ///<summary>Plug Toilet  Current</summary>
    public NumericSensorEntity PlugToiletCurrent => new(_haContext, "sensor.plug_toilet_current");
    ///<summary>Plug Toilet  Power</summary>
    public NumericSensorEntity PlugToiletPower => new(_haContext, "sensor.plug_toilet_power");
    ///<summary>Plug Toilet  Summation delivered</summary>
    public NumericSensorEntity PlugToiletSummationDelivered => new(_haContext, "sensor.plug_toilet_summation_delivered");
    ///<summary>Plug Toilet  Voltage</summary>
    public NumericSensorEntity PlugToiletVoltage => new(_haContext, "sensor.plug_toilet_voltage");
    ///<summary>Plug Water Pump Current</summary>
    public NumericSensorEntity PlugWaterPumpCurrent => new(_haContext, "sensor.plug_water_pump_current");
    ///<summary>Plug Water Pump Power</summary>
    public NumericSensorEntity PlugWaterPumpPower => new(_haContext, "sensor.plug_water_pump_power");
    ///<summary>Plug Water Pump Summation delivered</summary>
    public NumericSensorEntity PlugWaterPumpSummationDelivered => new(_haContext, "sensor.plug_water_pump_summation_delivered");
    ///<summary>Plug Water Pump Voltage</summary>
    public NumericSensorEntity PlugWaterPumpVoltage => new(_haContext, "sensor.plug_water_pump_voltage");
    ///<summary>Solar production forecast Estimated power production - in 12 hours</summary>
    public NumericSensorEntity PowerProductionNext12hours => new(_haContext, "sensor.power_production_next_12hours");
    ///<summary>Solar production forecast Estimated power production - in 24 hours</summary>
    public NumericSensorEntity PowerProductionNext24hours => new(_haContext, "sensor.power_production_next_24hours");
    ///<summary>Solar production forecast Estimated power production - in 1 hour</summary>
    public NumericSensorEntity PowerProductionNextHour => new(_haContext, "sensor.power_production_next_hour");
    ///<summary>Solar production forecast Estimated power production - now</summary>
    public NumericSensorEntity PowerProductionNow => new(_haContext, "sensor.power_production_now");
    ///<summary>PV Sum</summary>
    public NumericSensorEntity PvSum => new(_haContext, "sensor.pv_sum");
    ///<summary>Samsung Dorota Battery level</summary>
    public NumericSensorEntity SamsungDorotaBatteryLevel => new(_haContext, "sensor.samsung_dorota_battery_level");
    ///<summary>Samsung Tablet Battery level</summary>
    public NumericSensorEntity SamsungTabletBatteryLevel => new(_haContext, "sensor.samsung_tablet_battery_level");
    ///<summary>Telefon Kuba Battery level</summary>
    public NumericSensorEntity SmG990bBatteryLevel => new(_haContext, "sensor.sm_g990b_battery_level");
    ///<summary>Telefon Kuba Battery temperature</summary>
    public NumericSensorEntity SmG990bBatteryTemperature => new(_haContext, "sensor.sm_g990b_battery_temperature");
    ///<summary>Telefon Kuba Remaining charge time</summary>
    public NumericSensorEntity SmG990bRemainingChargeTime => new(_haContext, "sensor.sm_g990b_remaining_charge_time");
    ///<summary>Smart Meter TS 65A-3 Current phase 1</summary>
    public NumericSensorEntity SmartMeterTs65a3CurrentPhase1 => new(_haContext, "sensor.smart_meter_ts_65a_3_current_phase_1");
    ///<summary>Smart Meter TS 65A-3 Current phase 2</summary>
    public NumericSensorEntity SmartMeterTs65a3CurrentPhase2 => new(_haContext, "sensor.smart_meter_ts_65a_3_current_phase_2");
    ///<summary>Smart Meter TS 65A-3 Current phase 3</summary>
    public NumericSensorEntity SmartMeterTs65a3CurrentPhase3 => new(_haContext, "sensor.smart_meter_ts_65a_3_current_phase_3");
    ///<summary>Smart Meter TS 65A-3 Frequency phase average</summary>
    public NumericSensorEntity SmartMeterTs65a3FrequencyPhaseAverage => new(_haContext, "sensor.smart_meter_ts_65a_3_frequency_phase_average");
    ///<summary>Smart Meter TS 65A-3 Real energy consumed</summary>
    public NumericSensorEntity SmartMeterTs65a3RealEnergyConsumed => new(_haContext, "sensor.smart_meter_ts_65a_3_real_energy_consumed");
    ///<summary>Smart Meter TS 65A-3 Real energy produced</summary>
    public NumericSensorEntity SmartMeterTs65a3RealEnergyProduced => new(_haContext, "sensor.smart_meter_ts_65a_3_real_energy_produced");
    ///<summary>Smart Meter TS 65A-3 Real power</summary>
    public NumericSensorEntity SmartMeterTs65a3RealPower => new(_haContext, "sensor.smart_meter_ts_65a_3_real_power");
    ///<summary>SolarNet Power battery charge</summary>
    public NumericSensorEntity SolarnetPowerBatteryCharge => new(_haContext, "sensor.solarnet_power_battery_charge");
    ///<summary>SolarNet Power battery discharge</summary>
    public NumericSensorEntity SolarnetPowerBatteryDischarge => new(_haContext, "sensor.solarnet_power_battery_discharge");
    ///<summary>SolarNet Power grid export</summary>
    public NumericSensorEntity SolarnetPowerGridExport => new(_haContext, "sensor.solarnet_power_grid_export");
    ///<summary>SolarNet Power grid import</summary>
    public NumericSensorEntity SolarnetPowerGridImport => new(_haContext, "sensor.solarnet_power_grid_import");
    ///<summary>SolarNet Power load consumed</summary>
    public NumericSensorEntity SolarnetPowerLoadConsumed => new(_haContext, "sensor.solarnet_power_load_consumed");
    ///<summary>SolarNet Power photovoltaics</summary>
    public NumericSensorEntity SolarnetPowerPhotovoltaics2 => new(_haContext, "sensor.solarnet_power_photovoltaics_2");
    ///<summary>SolarNet Relative autonomy</summary>
    public NumericSensorEntity SolarnetRelativeAutonomy => new(_haContext, "sensor.solarnet_relative_autonomy");
    ///<summary>SolarNet Relative self-consumption</summary>
    public NumericSensorEntity SolarnetRelativeSelfConsumption => new(_haContext, "sensor.solarnet_relative_self_consumption");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity SwitchGabinetCpuUtilization => new(_haContext, "sensor.switch_gabinet_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity SwitchGabinetMemoryUtilization => new(_haContext, "sensor.switch_gabinet_memory_utilization");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity SwitchStrychCpuUtilization => new(_haContext, "sensor.switch_strych_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity SwitchStrychMemoryUtilization => new(_haContext, "sensor.switch_strych_memory_utilization");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity SwitchStryszekCpuUtilization => new(_haContext, "sensor.switch_stryszek_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity SwitchStryszekMemoryUtilization => new(_haContext, "sensor.switch_stryszek_memory_utilization");
    ///<summary>Tauron energy bank</summary>
    public NumericSensorEntity TauronEnergyBank => new(_haContext, "sensor.tauron_energy_bank");
    ///<summary>Telefon Kuba Active calories burned</summary>
    public NumericSensorEntity TelefonKubaActiveCaloriesBurned => new(_haContext, "sensor.telefon_kuba_active_calories_burned");
    ///<summary>Telefon Kuba Daily distance</summary>
    public NumericSensorEntity TelefonKubaDailyDistance => new(_haContext, "sensor.telefon_kuba_daily_distance");
    ///<summary>Telefon Kuba Daily elevation gained</summary>
    public NumericSensorEntity TelefonKubaDailyElevationGained => new(_haContext, "sensor.telefon_kuba_daily_elevation_gained");
    ///<summary>Telefon Kuba Daily steps</summary>
    public NumericSensorEntity TelefonKubaDailySteps => new(_haContext, "sensor.telefon_kuba_daily_steps");
    ///<summary>Telefon Kuba Total calories burned</summary>
    public NumericSensorEntity TelefonKubaTotalCaloriesBurned => new(_haContext, "sensor.telefon_kuba_total_calories_burned");
    ///<summary>Telefon Kuba VO2 max</summary>
    public NumericSensorEntity TelefonKubaVo2Max => new(_haContext, "sensor.telefon_kuba_vo2_max");
    ///<summary>Termostaty Hol Główny Battery</summary>
    public NumericSensorEntity TermostatBattery => new(_haContext, "sensor.termostat_battery");
    ///<summary>TicWatch Pro 5 Battery level</summary>
    public NumericSensorEntity TicwatchPro5BatteryLevel => new(_haContext, "sensor.ticwatch_pro_5_battery_level");
    ///<summary>TicWatch Pro 5 Bluetooth connection</summary>
    public NumericSensorEntity TicwatchPro5BluetoothConnection => new(_haContext, "sensor.ticwatch_pro_5_bluetooth_connection");
    ///<summary>TicWatch Pro 5 Daily calories</summary>
    public NumericSensorEntity TicwatchPro5DailyCalories => new(_haContext, "sensor.ticwatch_pro_5_daily_calories");
    ///<summary>TicWatch Pro 5 Daily distance</summary>
    public NumericSensorEntity TicwatchPro5DailyDistance => new(_haContext, "sensor.ticwatch_pro_5_daily_distance");
    ///<summary>TicWatch Pro 5 Daily floors</summary>
    public NumericSensorEntity TicwatchPro5DailyFloors => new(_haContext, "sensor.ticwatch_pro_5_daily_floors");
    ///<summary>TicWatch Pro 5 Daily steps</summary>
    public NumericSensorEntity TicwatchPro5DailySteps => new(_haContext, "sensor.ticwatch_pro_5_daily_steps");
    ///<summary>TicWatch Pro 5 Heart rate</summary>
    public NumericSensorEntity TicwatchPro5HeartRate => new(_haContext, "sensor.ticwatch_pro_5_heart_rate");
    ///<summary>TicWatch Pro 5 Light sensor</summary>
    public NumericSensorEntity TicwatchPro5LightSensor => new(_haContext, "sensor.ticwatch_pro_5_light_sensor");
    ///<summary>TicWatch Pro 5 Pressure sensor</summary>
    public NumericSensorEntity TicwatchPro5PressureSensor => new(_haContext, "sensor.ticwatch_pro_5_pressure_sensor");
    ///<summary>TicWatch Pro 5 Remaining charge time</summary>
    public NumericSensorEntity TicwatchPro5RemainingChargeTime => new(_haContext, "sensor.ticwatch_pro_5_remaining_charge_time");
    ///<summary>TicWatch Pro 5 Steps sensor</summary>
    public NumericSensorEntity TicwatchPro5StepsSensor => new(_haContext, "sensor.ticwatch_pro_5_steps_sensor");
    ///<summary>Zmywarka do naczyń Program progress</summary>
    public NumericSensorEntity ZmywarkaDoNaczynProgramProgress => new(_haContext, "sensor.zmywarka_do_naczyn_program_progress");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all stt entities currently registered (at runtime) in Home Assistant as SttEntity</summary>
    public IEnumerable<SttEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("stt.")).Select(e => new SttEntity(e));
    ///<summary>OpenAI Whisper</summary>
    public SttEntity OpenaiWhisper => new(_haContext, "stt.openai_whisper");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>Klima Salon Fresh air</summary>
    public SwitchEntity _502cc6c1e5adFreshAir => new(_haContext, "switch.502cc6c1e5ad_fresh_air");
    ///<summary>Klima Salon Panel light</summary>
    public SwitchEntity _502cc6c1e5adPanelLight => new(_haContext, "switch.502cc6c1e5ad_panel_light");
    ///<summary>Klima Salon Quiet mode</summary>
    public SwitchEntity _502cc6c1e5adQuiet => new(_haContext, "switch.502cc6c1e5ad_quiet");
    ///<summary>Klima Salon Xtra fan</summary>
    public SwitchEntity _502cc6c1e5adXfan => new(_haContext, "switch.502cc6c1e5ad_xfan");
    ///<summary>Gate open</summary>
    public SwitchEntity BramaOtworz => new(_haContext, "switch.brama_otworz");
    ///<summary>Gate close</summary>
    public SwitchEntity BramaZamknij => new(_haContext, "switch.brama_zamknij");
    ///<summary>Klima Sypialnia Fresh air</summary>
    public SwitchEntity C69b20b8FreshAir => new(_haContext, "switch.c69b20b8_fresh_air");
    ///<summary>Klima Sypialnia Panel light</summary>
    public SwitchEntity C69b20b8PanelLight => new(_haContext, "switch.c69b20b8_panel_light");
    ///<summary>Klima Sypialnia Quiet mode</summary>
    public SwitchEntity C69b20b8Quiet => new(_haContext, "switch.c69b20b8_quiet");
    ///<summary>Klima Sypialnia Xtra fan</summary>
    public SwitchEntity C69b20b8Xfan => new(_haContext, "switch.c69b20b8_xfan");
    ///<summary>Klima Gabinet Fresh air</summary>
    public SwitchEntity C69c4629FreshAir => new(_haContext, "switch.c69c4629_fresh_air");
    ///<summary>Klima Gabinet Panel light</summary>
    public SwitchEntity C69c4629PanelLight => new(_haContext, "switch.c69c4629_panel_light");
    ///<summary>Klima Gabinet Quiet mode</summary>
    public SwitchEntity C69c4629Quiet => new(_haContext, "switch.c69c4629_quiet");
    ///<summary>Klima Gabinet Xtra fan</summary>
    public SwitchEntity C69c4629Xfan => new(_haContext, "switch.c69c4629_xfan");
    ///<summary>Klima Siłownia Fresh air</summary>
    public SwitchEntity C69c478aFreshAir => new(_haContext, "switch.c69c478a_fresh_air");
    ///<summary>Klima Siłownia Panel light</summary>
    public SwitchEntity C69c478aPanelLight => new(_haContext, "switch.c69c478a_panel_light");
    ///<summary>Klima Siłownia Quiet mode</summary>
    public SwitchEntity C69c478aQuiet => new(_haContext, "switch.c69c478a_quiet");
    ///<summary>Klima Siłownia Xtra fan</summary>
    public SwitchEntity C69c478aXfan => new(_haContext, "switch.c69c478a_xfan");
    ///<summary>Czesio Resume Cleaning</summary>
    public SwitchEntity CzesioResumeCleaning => new(_haContext, "switch.czesio_resume_cleaning");
    ///<summary>Garage open</summary>
    public SwitchEntity GarazOtworz => new(_haContext, "switch.garaz_otworz");
    ///<summary>Garage close</summary>
    public SwitchEntity GarazZamknij => new(_haContext, "switch.garaz_zamknij");
    ///<summary>Fresh air</summary>
    public SwitchEntity KlimaPokojOliwiiFreshAir => new(_haContext, "switch.klima_pokoj_oliwii_fresh_air");
    ///<summary>Panel light</summary>
    public SwitchEntity KlimaPokojOliwiiPanelLight => new(_haContext, "switch.klima_pokoj_oliwii_panel_light");
    ///<summary>Quiet mode</summary>
    public SwitchEntity KlimaPokojOliwiiQuiet => new(_haContext, "switch.klima_pokoj_oliwii_quiet");
    ///<summary>Xtra fan</summary>
    public SwitchEntity KlimaPokojOliwiiXfan => new(_haContext, "switch.klima_pokoj_oliwii_xfan");
    ///<summary>eMotion Max 2 (e04b410156c6) Reverse x-axis</summary>
    public SwitchEntity LnlinkhaE04b410156c6000000000000d6ac0000ConfigRadarX => new(_haContext, "switch.lnlinkha_e04b410156c6000000000000d6ac0000_config_radar_x");
    ///<summary>plug_01 Child lock</summary>
    public SwitchEntity Plug01ChildLock => new(_haContext, "switch.plug_01_child_lock");
    ///<summary>plug_01 Switch</summary>
    public SwitchEntity Plug01Switch => new(_haContext, "switch.plug_01_switch");
    ///<summary>Plug Monitoring Box Child lock</summary>
    public SwitchEntity PlugMonitoringBoxChildLock => new(_haContext, "switch.plug_monitoring_box_child_lock");
    ///<summary>Plug Monitoring Box Switch</summary>
    public SwitchEntity PlugMonitoringBoxSwitch => new(_haContext, "switch.plug_monitoring_box_switch");
    ///<summary>Plug Toilet  Child lock</summary>
    public SwitchEntity PlugToiletChildLock => new(_haContext, "switch.plug_toilet_child_lock");
    ///<summary>Plug Toilet  Switch</summary>
    public SwitchEntity PlugToiletSwitch => new(_haContext, "switch.plug_toilet_switch");
    ///<summary>Plug Water Pump Child lock</summary>
    public SwitchEntity PlugWaterPumpChildLock => new(_haContext, "switch.plug_water_pump_child_lock");
    ///<summary>Plug Water Pump Switch</summary>
    public SwitchEntity PlugWaterPumpSwitch => new(_haContext, "switch.plug_water_pump_switch");
    public SwitchEntity SGuest => new(_haContext, "switch.s_guest");
    public SwitchEntity SIot => new(_haContext, "switch.s_iot");
    public SwitchEntity SMain => new(_haContext, "switch.s_main");
    public SwitchEntity STv => new(_haContext, "switch.s_tv");
    ///<summary>Switch Garage Outside </summary>
    public SwitchEntity SonoffSwitchGarageOutside => new(_haContext, "switch.sonoff_switch_garage_outside");
    ///<summary>Switch office desk</summary>
    public SwitchEntity SwitchOfficeDesk => new(_haContext, "switch.switch_office_desk");
    ///<summary>Switch office main</summary>
    public SwitchEntity SwitchOfficeMain => new(_haContext, "switch.switch_office_main");
    ///<summary>Home Assistant to Home Security Network</summary>
    public SwitchEntity UnifiNetworkHomeAssistantToHomeSecurityNetwork => new(_haContext, "switch.unifi_network_home_assistant_to_home_security_network");
    ///<summary>IoT Access to Home Security Network</summary>
    public SwitchEntity UnifiNetworkIotAccessToHomeSecurityNetwork => new(_haContext, "switch.unifi_network_iot_access_to_home_security_network");
    ///<summary>Zmywarka do naczyń Extra dry</summary>
    public SwitchEntity ZmywarkaDoNaczynExtraDry => new(_haContext, "switch.zmywarka_do_naczyn_extra_dry");
    ///<summary>Zmywarka do naczyń Half load</summary>
    public SwitchEntity ZmywarkaDoNaczynHalfLoad => new(_haContext, "switch.zmywarka_do_naczyn_half_load");
    ///<summary>Zmywarka do naczyń Power</summary>
    public SwitchEntity ZmywarkaDoNaczynPower => new(_haContext, "switch.zmywarka_do_naczyn_power");
    ///<summary>Zmywarka do naczyń Program Auto2</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramAuto2 => new(_haContext, "switch.zmywarka_do_naczyn_program_auto2");
    ///<summary>Zmywarka do naczyń Program Eco50</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramEco50 => new(_haContext, "switch.zmywarka_do_naczyn_program_eco50");
    ///<summary>Zmywarka do naczyń Program Intensiv70</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramIntensiv70 => new(_haContext, "switch.zmywarka_do_naczyn_program_intensiv70");
    ///<summary>Zmywarka do naczyń Program MachineCare</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramMachinecare => new(_haContext, "switch.zmywarka_do_naczyn_program_machinecare");
    ///<summary>Zmywarka do naczyń Program NightWash</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramNightwash => new(_haContext, "switch.zmywarka_do_naczyn_program_nightwash");
    ///<summary>Zmywarka do naczyń Program PreRinse</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramPrerinse => new(_haContext, "switch.zmywarka_do_naczyn_program_prerinse");
    ///<summary>Zmywarka do naczyń Program Quick65</summary>
    public SwitchEntity ZmywarkaDoNaczynProgramQuick65 => new(_haContext, "switch.zmywarka_do_naczyn_program_quick65");
    ///<summary>Silence on demand</summary>
    public SwitchEntity ZmywarkaDoNaczynSilenceOnDemand => new(_haContext, "switch.zmywarka_do_naczyn_silence_on_demand");
    ///<summary>Zmywarka do naczyń Vario speed +</summary>
    public SwitchEntity ZmywarkaDoNaczynVarioSpeed => new(_haContext, "switch.zmywarka_do_naczyn_vario_speed");
}

public partial class TagEntities
{
    private readonly IHaContext _haContext;
    public TagEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tag entities currently registered (at runtime) in Home Assistant as TagEntity</summary>
    public IEnumerable<TagEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tag.")).Select(e => new TagEntity(e));
    ///<summary>tag_ac_living_room</summary>
    public TagEntity TagAcLivingRoom => new(_haContext, "tag.tag_ac_living_room");
    ///<summary>tag_garage_doors</summary>
    public TagEntity TagGarageDoors => new(_haContext, "tag.tag_garage_doors");
    ///<summary>tag_garage_switch</summary>
    public TagEntity TagGarageSwitch => new(_haContext, "tag.tag_garage_switch");
    ///<summary>tag_home_office</summary>
    public TagEntity TagHomeOffice => new(_haContext, "tag.tag_home_office");
    ///<summary>tag_night_alert</summary>
    public TagEntity TagNightAlert => new(_haContext, "tag.tag_night_alert");
}

public partial class TextEntities
{
    private readonly IHaContext _haContext;
    public TextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all text entities currently registered (at runtime) in Home Assistant as TextEntity</summary>
    public IEnumerable<TextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("text.")).Select(e => new TextEntity(e));
    ///<summary>Czesio * vacuum-extend clean-extend-data</summary>
    public TextEntity DreameDe1063030855P2114aCleanExtendDataP410 => new(_haContext, "text.dreame_de_1063030855_p2114a_clean_extend_data_p_4_10");
    ///<summary>Czesio * do-not-disturb end-time</summary>
    public TextEntity DreameDe1063030855P2114aEndTimeP53 => new(_haContext, "text.dreame_de_1063030855_p2114a_end_time_p_5_3");
    ///<summary>Czesio * map frame-info</summary>
    public TextEntity DreameDe1063030855P2114aFrameInfoP62 => new(_haContext, "text.dreame_de_1063030855_p2114a_frame_info_p_6_2");
    ///<summary>Czesio * map map-extend-data</summary>
    public TextEntity DreameDe1063030855P2114aMapExtendDataP64 => new(_haContext, "text.dreame_de_1063030855_p2114a_map_extend_data_p_6_4");
    ///<summary>Czesio * vacuum-extend remote-state</summary>
    public TextEntity DreameDe1063030855P2114aRemoteStateP415 => new(_haContext, "text.dreame_de_1063030855_p2114a_remote_state_p_4_15");
    ///<summary>Czesio * audio set-voice</summary>
    public TextEntity DreameDe1063030855P2114aSetVoiceP74 => new(_haContext, "text.dreame_de_1063030855_p2114a_set_voice_p_7_4");
    ///<summary>Czesio * do-not-disturb start-time</summary>
    public TextEntity DreameDe1063030855P2114aStartTimeP52 => new(_haContext, "text.dreame_de_1063030855_p2114a_start_time_p_5_2");
    ///<summary>Czesio * time timer-clean</summary>
    public TextEntity DreameDe1063030855P2114aTimerCleanP82 => new(_haContext, "text.dreame_de_1063030855_p2114a_timer_clean_p_8_2");
    ///<summary>Czesio * audio voice-packet-id</summary>
    public TextEntity DreameDe1063030855P2114aVoicePacketIdP72 => new(_haContext, "text.dreame_de_1063030855_p2114a_voice_packet_id_p_7_2");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tts entities currently registered (at runtime) in Home Assistant as TtsEntity</summary>
    public IEnumerable<TtsEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tts.")).Select(e => new TtsEntity(e));
    ///<summary>Google Translate en com</summary>
    public TtsEntity GoogleTranslateEnCom => new(_haContext, "tts.google_translate_en_com");
    ///<summary>OpenAI TTS (api.openai.com, tts-1, shimmer) TTS-1</summary>
    public TtsEntity OpenaiTtsShimmer => new(_haContext, "tts.openai_tts_shimmer");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>AirCast Update</summary>
    public UpdateEntity AircastUpdate => new(_haContext, "update.aircast_update");
    public UpdateEntity ApGora => new(_haContext, "update.ap_gora");
    public UpdateEntity ApKuchnia => new(_haContext, "update.ap_kuchnia");
    ///<summary>Battery State Card / Entity Row update</summary>
    public UpdateEntity BatteryStateCardEntityRowUpdate => new(_haContext, "update.battery_state_card_entity_row_update");
    ///<summary>Bubble Card update</summary>
    public UpdateEntity BubbleCardUpdate => new(_haContext, "update.bubble_card_update");
    ///<summary>button-card update</summary>
    public UpdateEntity ButtonCardUpdate => new(_haContext, "update.button_card_update");
    ///<summary>Dahua update</summary>
    public UpdateEntity DahuaUpdate => new(_haContext, "update.dahua_update");
    public UpdateEntity DreamRouterHome => new(_haContext, "update.dream_router_home");
    ///<summary>Dreame Vacuum update</summary>
    public UpdateEntity DreameVacuumUpdate => new(_haContext, "update.dreame_vacuum_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Frigate update</summary>
    public UpdateEntity FrigateUpdate => new(_haContext, "update.frigate_update");
    ///<summary>Get HACS Update</summary>
    public UpdateEntity GetHacsUpdate => new(_haContext, "update.get_hacs_update");
    ///<summary>Office desk lamp Firmware</summary>
    public UpdateEntity GledoptoGlLb001pFirmware => new(_haContext, "update.gledopto_gl_lb_001p_firmware");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Home Assistant Connect ZBT-1 (c89470d1) Firmware</summary>
    public UpdateEntity HomeAssistantConnectZbt1C89470d1Firmware => new(_haContext, "update.home_assistant_connect_zbt_1_c89470d1_firmware");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>LED strip Office  Firmware</summary>
    public UpdateEntity LedStripOfficeFirmware => new(_haContext, "update.led_strip_office_firmware");
    ///<summary>Matter Server Update</summary>
    public UpdateEntity MatterServerUpdate => new(_haContext, "update.matter_server_update");
    ///<summary>Metrology - Metro + Fluent + Windows Themes - by mmak.es update</summary>
    public UpdateEntity MetrologyMetroFluentWindowsThemesByMmakEsUpdate => new(_haContext, "update.metrology_metro_fluent_windows_themes_by_mmak_es_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>Mushroom update</summary>
    public UpdateEntity MushroomUpdate => new(_haContext, "update.mushroom_update");
    ///<summary>Music Assistant Server Update</summary>
    public UpdateEntity MusicAssistantServerUpdate => new(_haContext, "update.music_assistant_server_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>NetDaemon V5 (.NET 9) Update</summary>
    public UpdateEntity NetdaemonV5Net9Update => new(_haContext, "update.netdaemon_v5_net_9_update");
    ///<summary>Node-RED Update</summary>
    public UpdateEntity NodeRedUpdate => new(_haContext, "update.node_red_update");
    ///<summary>OpenAI TTS Speech Service update</summary>
    public UpdateEntity OpenaiTtsSpeechServiceUpdate => new(_haContext, "update.openai_tts_speech_service_update");
    ///<summary>OpenAI Whisper Cloud update</summary>
    public UpdateEntity OpenaiWhisperCloudUpdate => new(_haContext, "update.openai_whisper_cloud_update");
    ///<summary>openWakeWord Update</summary>
    public UpdateEntity OpenwakewordUpdate => new(_haContext, "update.openwakeword_update");
    ///<summary>Sonoff LAN update</summary>
    public UpdateEntity SonoffLanUpdate => new(_haContext, "update.sonoff_lan_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    public UpdateEntity SwitchGabinet => new(_haContext, "update.switch_gabinet");
    public UpdateEntity SwitchStrych => new(_haContext, "update.switch_strych");
    public UpdateEntity SwitchStryszek => new(_haContext, "update.switch_stryszek");
    ///<summary>UI Lovelace Minimalist update</summary>
    public UpdateEntity UiLovelaceMinimalistUpdate => new(_haContext, "update.ui_lovelace_minimalist_update");
    ///<summary>Uptime Kuma update</summary>
    public UpdateEntity UptimeKumaUpdate => new(_haContext, "update.uptime_kuma_update");
    ///<summary>Vacuum Card update</summary>
    public UpdateEntity VacuumCardUpdate => new(_haContext, "update.vacuum_card_update");
    ///<summary>Xiaomi Home update</summary>
    public UpdateEntity XiaomiHomeUpdate => new(_haContext, "update.xiaomi_home_update");
    ///<summary>Xiaomi Vacuum Map Card update</summary>
    public UpdateEntity XiaomiVacuumMapCardUpdate => new(_haContext, "update.xiaomi_vacuum_map_card_update");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all vacuum entities currently registered (at runtime) in Home Assistant as VacuumEntity</summary>
    public IEnumerable<VacuumEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("vacuum.")).Select(e => new VacuumEntity(e));
    ///<summary>Czesio</summary>
    public VacuumEntity Czesio => new(_haContext, "vacuum.czesio");
    ///<summary>Czesio  Robot Cleaner</summary>
    public VacuumEntity DreameDe1063030855P2114a => new(_haContext, "vacuum.dreame_de_1063030855_p2114a");
    ///<summary>Wiesio  Robot Cleaner</summary>
    public VacuumEntity RoborockDe261382059S5 => new(_haContext, "vacuum.roborock_de_261382059_s5");
}

public partial class WakeWordEntities
{
    private readonly IHaContext _haContext;
    public WakeWordEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all wake_word entities currently registered (at runtime) in Home Assistant as WakeWordEntity</summary>
    public IEnumerable<WakeWordEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("wake_word.")).Select(e => new WakeWordEntity(e));
    ///<summary>openwakeword</summary>
    public WakeWordEntity Openwakeword => new(_haContext, "wake_word.openwakeword");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Forecast Home</summary>
    public WeatherEntity ForecastHome => new(_haContext, "weather.forecast_home");
    ///<summary>Home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("off_with_transition")]
    public bool? OffWithTransition { get; init; }

    [JsonPropertyName("off_brightness")]
    public double? OffBrightness { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<object>? GroupMembers { get; init; }

    [JsonPropertyName("media_album_id")]
    public string? MediaAlbumId { get; init; }

    [JsonPropertyName("media_queue_id")]
    public double? MediaQueueId { get; init; }

    [JsonPropertyName("media_source_id")]
    public double? MediaSourceId { get; init; }

    [JsonPropertyName("media_station")]
    public string? MediaStation { get; init; }

    [JsonPropertyName("media_type")]
    public string? MediaType { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("mass_player_type")]
    public string? MassPlayerType { get; init; }

    [JsonPropertyName("active_queue")]
    public string? ActiveQueue { get; init; }
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public string? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("ignoring_battery_optimizations")]
    public bool? IgnoringBatteryOptimizations { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("charger_position")]
    public object? ChargerPosition { get; init; }

    [JsonPropertyName("rooms")]
    public object? Rooms { get; init; }

    [JsonPropertyName("vacuum_position")]
    public object? VacuumPosition { get; init; }

    [JsonPropertyName("map_id")]
    public double? MapId { get; init; }

    [JsonPropertyName("rotation")]
    public double? Rotation { get; init; }

    [JsonPropertyName("updated_at")]
    public string? UpdatedAt { get; init; }

    [JsonPropertyName("used_times")]
    public double? UsedTimes { get; init; }

    [JsonPropertyName("is_empty")]
    public bool? IsEmpty { get; init; }

    [JsonPropertyName("frame_id")]
    public double? FrameId { get; init; }

    [JsonPropertyName("calibration_points")]
    public IReadOnlyList<object>? CalibrationPoints { get; init; }

    [JsonPropertyName("active_segments")]
    public IReadOnlyList<double>? ActiveSegments { get; init; }

    [JsonPropertyName("obstacles")]
    public IReadOnlyList<object>? Obstacles { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("selected_schedule")]
    public string? SelectedSchedule { get; init; }

    [JsonPropertyName("heating_power_request")]
    public double? HeatingPowerRequest { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("authorized")]
    public bool? Authorized { get; init; }

    [JsonPropertyName("is_guest")]
    public bool? IsGuest { get; init; }

    [JsonPropertyName("qos_policy_applied")]
    public bool? QosPolicyApplied { get; init; }

    [JsonPropertyName("vlan")]
    public double? Vlan { get; init; }

    [JsonPropertyName("oui")]
    public string? Oui { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("_is_guest_by_uap")]
    public bool? IsGuestByUap { get; init; }

    [JsonPropertyName("ap_mac")]
    public string? ApMac { get; init; }

    [JsonPropertyName("essid")]
    public string? Essid { get; init; }

    [JsonPropertyName("is_11r")]
    public bool? Is11r { get; init; }

    [JsonPropertyName("radio")]
    public string? Radio { get; init; }

    [JsonPropertyName("radio_proto")]
    public string? RadioProto { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("backup_stage")]
    public object? BackupStage { get; init; }

    [JsonPropertyName("failed_reason")]
    public object? FailedReason { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NotifyEntity : Entity<NotifyEntity, EntityState<NotifyAttributes>, NotifyAttributes>
{
    public NotifyEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NotifyEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NotifyAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("action params")]
    public string? Actionparams { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("activity_list")]
    public IReadOnlyList<object>? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("value")]
    public double? Value { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("map_id")]
    public double? MapId { get; init; }

    [JsonPropertyName("map_index")]
    public double? MapIndex { get; init; }

    [JsonPropertyName("room_id")]
    public double? RoomId { get; init; }

    [JsonPropertyName("index")]
    public double? Index { get; init; }

    [JsonPropertyName("type")]
    public double? Type { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("Package")]
    public string? Package { get; init; }

    [JsonPropertyName("exercise_type")]
    public string? ExerciseType { get; init; }

    [JsonPropertyName("time")]
    public string? Time { get; init; }

    [JsonPropertyName("value")]
    public double? Value { get; init; }

    [JsonPropertyName("room_id")]
    public double? RoomId { get; init; }

    [JsonPropertyName("room_icon")]
    public string? RoomIcon { get; init; }

    [JsonPropertyName("2025-03-07 20:53:13")]
    public object? _20250307205313 { get; init; }

    [JsonPropertyName("2025-03-07 19:57:32")]
    public object? _20250307195732 { get; init; }

    [JsonPropertyName("2025-03-07 06:39:45")]
    public object? _20250307063945 { get; init; }

    [JsonPropertyName("2025-03-06 20:03:26")]
    public object? _20250306200326 { get; init; }

    [JsonPropertyName("2025-03-06 18:26:20")]
    public object? _20250306182620 { get; init; }

    [JsonPropertyName("2025-03-05 17:54:54")]
    public object? _20250305175454 { get; init; }

    [JsonPropertyName("2025-03-05 08:02:26")]
    public object? _20250305080226 { get; init; }

    [JsonPropertyName("2025-03-04 18:46:28")]
    public object? _20250304184628 { get; init; }

    [JsonPropertyName("2025-03-04 06:54:50")]
    public object? _20250304065450 { get; init; }

    [JsonPropertyName("2025-03-03 17:40:46")]
    public object? _20250303174046 { get; init; }

    [JsonPropertyName("2025-03-03 08:21:24")]
    public object? _20250303082124 { get; init; }

    [JsonPropertyName("2025-03-03 06:53:00")]
    public object? _20250303065300 { get; init; }

    [JsonPropertyName("2025-03-02 18:58:02")]
    public object? _20250302185802 { get; init; }

    [JsonPropertyName("2025-03-02 10:13:45")]
    public object? _20250302101345 { get; init; }

    [JsonPropertyName("2025-03-02 09:25:37")]
    public object? _20250302092537 { get; init; }

    [JsonPropertyName("2025-03-02 08:43:29")]
    public object? _20250302084329 { get; init; }

    [JsonPropertyName("2025-03-01 19:23:34")]
    public object? _20250301192334 { get; init; }

    [JsonPropertyName("2025-03-01 16:44:58")]
    public object? _20250301164458 { get; init; }

    [JsonPropertyName("2025-03-01 11:18:53")]
    public object? _20250301111853 { get; init; }

    [JsonPropertyName("2025-03-01 11:04:03")]
    public object? _20250301110403 { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public object? Serial { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("album_au.com.shiftyjelly.pocketcasts")]
    public string? AlbumAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("artist_au.com.shiftyjelly.pocketcasts")]
    public string? ArtistAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("duration_au.com.shiftyjelly.pocketcasts")]
    public double? DurationAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("media_id_au.com.shiftyjelly.pocketcasts")]
    public string? MediaIdAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("playback_position_au.com.shiftyjelly.pocketcasts")]
    public double? PlaybackPositionAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("playback_state_au.com.shiftyjelly.pocketcasts")]
    public string? PlaybackStateAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("title_au.com.shiftyjelly.pocketcasts")]
    public string? TitleAu_com_shiftyjelly_pocketcasts { get; init; }

    [JsonPropertyName("total_media_session_count")]
    public double? TotalMediaSessionCount { get; init; }

    [JsonPropertyName("2025-05-11 20:17:01")]
    public object? _20250511201701 { get; init; }

    [JsonPropertyName("2025-05-11 17:30:01")]
    public object? _20250511173001 { get; init; }

    [JsonPropertyName("2025-05-11 12:22:15")]
    public object? _20250511122215 { get; init; }

    [JsonPropertyName("2025-05-10 13:13:03")]
    public object? _20250510131303 { get; init; }

    [JsonPropertyName("2025-05-10 12:19:28")]
    public object? _20250510121928 { get; init; }

    [JsonPropertyName("2025-05-10 09:53:10")]
    public object? _20250510095310 { get; init; }

    [JsonPropertyName("2025-05-10 08:56:42")]
    public object? _20250510085642 { get; init; }

    [JsonPropertyName("2025-05-10 07:46:26")]
    public object? _20250510074626 { get; init; }

    [JsonPropertyName("2025-05-09 21:02:26")]
    public object? _20250509210226 { get; init; }

    [JsonPropertyName("2025-05-09 19:52:02")]
    public object? _20250509195202 { get; init; }

    [JsonPropertyName("2025-05-09 19:40:07")]
    public object? _20250509194007 { get; init; }

    [JsonPropertyName("2025-05-09 17:47:32")]
    public object? _20250509174732 { get; init; }

    [JsonPropertyName("2025-05-08 22:01:30")]
    public object? _20250508220130 { get; init; }

    [JsonPropertyName("2025-05-08 21:31:45")]
    public object? _20250508213145 { get; init; }

    [JsonPropertyName("2025-05-08 09:05:21")]
    public object? _20250508090521 { get; init; }

    [JsonPropertyName("2025-05-07 22:07:36")]
    public object? _20250507220736 { get; init; }

    [JsonPropertyName("2025-05-07 21:49:54")]
    public object? _20250507214954 { get; init; }

    [JsonPropertyName("2025-05-07 08:59:25")]
    public object? _20250507085925 { get; init; }

    [JsonPropertyName("2025-05-06 20:41:12")]
    public object? _20250506204112 { get; init; }

    [JsonPropertyName("2025-05-06 19:05:47")]
    public object? _20250506190547 { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("endTime")]
    public string? EndTime { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("sources")]
    public IReadOnlyList<string>? Sources { get; init; }

    [JsonPropertyName("date")]
    public string? Date { get; init; }

    [JsonPropertyName("measurementMethod")]
    public string? MeasurementMethod { get; init; }

    [JsonPropertyName("connected_not_paired_devices")]
    public IReadOnlyList<object>? ConnectedNotPairedDevices { get; init; }

    [JsonPropertyName("connected_paired_devices")]
    public IReadOnlyList<string>? ConnectedPairedDevices { get; init; }

    [JsonPropertyName("paired_devices")]
    public IReadOnlyList<string>? PairedDevices { get; init; }

    [JsonPropertyName("accuracy")]
    public string? Accuracy { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("level")]
    public string? Level { get; init; }

    [JsonPropertyName("advice")]
    public string? Advice { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("limit")]
    public double? Limit { get; init; }

    [JsonPropertyName("percent")]
    public double? Percent { get; init; }

    [JsonPropertyName("type")]
    public object? Type { get; init; }

    [JsonPropertyName("direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("zcl_unit_of_measurement")]
    public double? ZclUnitOfMeasurement { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("value")]
    public double? Value { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TagEntity : Entity<TagEntity, EntityState<TagAttributes>, TagAttributes>
{
    public TagEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TagEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TagAttributes
{
    [JsonPropertyName("tag_id")]
    public string? TagId { get; init; }

    [JsonPropertyName("last_scanned_by_device_id")]
    public string? LastScannedByDeviceId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TextEntity : Entity<TextEntity, EntityState<TextAttributes>, TextAttributes>
{
    public TextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TextAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("update_percentage")]
    public object? UpdatePercentage { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>, IVacuumEntityCore
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("fan_speed_list")]
    public IReadOnlyList<string>? FanSpeedList { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("mop_pad")]
    public bool? MopPad { get; init; }

    [JsonPropertyName("mop_pad_humidity")]
    public string? MopPadHumidity { get; init; }

    [JsonPropertyName("mop_pad_humidity_list")]
    public IReadOnlyList<string>? MopPadHumidityList { get; init; }

    [JsonPropertyName("cleaning_mode")]
    public string? CleaningMode { get; init; }

    [JsonPropertyName("tight_mopping")]
    public string? TightMopping { get; init; }

    [JsonPropertyName("error")]
    public string? Error { get; init; }

    [JsonPropertyName("cleaning_time")]
    public double? CleaningTime { get; init; }

    [JsonPropertyName("cleaned_area")]
    public double? CleanedArea { get; init; }

    [JsonPropertyName("voice_packet_id")]
    public string? VoicePacketId { get; init; }

    [JsonPropertyName("timezone")]
    public string? Timezone { get; init; }

    [JsonPropertyName("main_brush_time_left")]
    public double? MainBrushTimeLeft { get; init; }

    [JsonPropertyName("main_brush_left")]
    public double? MainBrushLeft { get; init; }

    [JsonPropertyName("side_brush_time_left")]
    public double? SideBrushTimeLeft { get; init; }

    [JsonPropertyName("side_brush_left")]
    public double? SideBrushLeft { get; init; }

    [JsonPropertyName("filter_left")]
    public double? FilterLeft { get; init; }

    [JsonPropertyName("filter_time_left")]
    public double? FilterTimeLeft { get; init; }

    [JsonPropertyName("sensor_dirty_left")]
    public double? SensorDirtyLeft { get; init; }

    [JsonPropertyName("sensor_dirty_time_left")]
    public double? SensorDirtyTimeLeft { get; init; }

    [JsonPropertyName("mop_pad_left")]
    public double? MopPadLeft { get; init; }

    [JsonPropertyName("mop_pad_time_left")]
    public double? MopPadTimeLeft { get; init; }

    [JsonPropertyName("detergent_left")]
    public double? DetergentLeft { get; init; }

    [JsonPropertyName("detergent_time_left")]
    public double? DetergentTimeLeft { get; init; }

    [JsonPropertyName("total_cleaned_area")]
    public double? TotalCleanedArea { get; init; }

    [JsonPropertyName("total_cleaning_time")]
    public double? TotalCleaningTime { get; init; }

    [JsonPropertyName("cleaning_count")]
    public double? CleaningCount { get; init; }

    [JsonPropertyName("dnd_start")]
    public string? DndStart { get; init; }

    [JsonPropertyName("dnd_end")]
    public string? DndEnd { get; init; }

    [JsonPropertyName("customized_cleaning")]
    public bool? CustomizedCleaning { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("cleaning_sequence")]
    public IReadOnlyList<double>? CleaningSequence { get; init; }

    [JsonPropertyName("charging")]
    public bool? Charging { get; init; }

    [JsonPropertyName("started")]
    public bool? Started { get; init; }

    [JsonPropertyName("paused")]
    public bool? Paused { get; init; }

    [JsonPropertyName("running")]
    public bool? Running { get; init; }

    [JsonPropertyName("returning_paused")]
    public bool? ReturningPaused { get; init; }

    [JsonPropertyName("returning")]
    public bool? Returning { get; init; }

    [JsonPropertyName("mapping")]
    public bool? Mapping { get; init; }

    [JsonPropertyName("active_segments")]
    public object? ActiveSegments { get; init; }

    [JsonPropertyName("current_segment")]
    public double? CurrentSegment { get; init; }

    [JsonPropertyName("selected_map")]
    public string? SelectedMap { get; init; }

    [JsonPropertyName("rooms")]
    public object? Rooms { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record WakeWordEntity : Entity<WakeWordEntity, EntityState<WakeWordAttributes>, WakeWordAttributes>
{
    public WakeWordEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WakeWordEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WakeWordAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("uv_index")]
    public double? UvIndex { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("apparent_temperature")]
    public double? ApparentTemperature { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<object>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AssistSatelliteServices AssistSatellite { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DahuaServices Dahua { get; }

    DenonavrServices Denonavr { get; }

    DeviceTrackerServices DeviceTracker { get; }

    DreameVacuumServices DreameVacuum { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GoogleGenerativeAiConversationServices GoogleGenerativeAiConversation { get; }

    HassioServices Hassio { get; }

    HeosServices Heos { get; }

    HomeConnectServices HomeConnect { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    MusicAssistantServices MusicAssistant { get; }

    NetatmoServices Netatmo { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OpenaiConversationServices OpenaiConversation { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PythonScriptServices PythonScript { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SonoffServices Sonoff { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UnifiServices Unifi { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    ValveServices Valve { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AssistSatelliteServices AssistSatellite => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DahuaServices Dahua => new(_haContext);
    public DenonavrServices Denonavr => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public DreameVacuumServices DreameVacuum => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleGenerativeAiConversationServices GoogleGenerativeAiConversation => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HeosServices Heos => new(_haContext);
    public HomeConnectServices HomeConnect => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public MusicAssistantServices MusicAssistant => new(_haContext);
    public NetatmoServices Netatmo => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OpenaiConversationServices OpenaiConversation => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PythonScriptServices PythonScript => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SonoffServices Sonoff => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UnifiServices Unifi => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public ValveServices Valve => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AssistSatelliteServices
{
    private readonly IHaContext _haContext;
    public AssistSatelliteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lets a satellite announce a message.</summary>
    ///<param name="target">The target for this service call</param>
    public void Announce(ServiceTarget target, AssistSatelliteAnnounceParameters data)
    {
        _haContext.CallService("assist_satellite", "announce", target, data);
    }

    ///<summary>Lets a satellite announce a message.</summary>
    ///<param name="message">The message to announce. eg: Time to wake up!</param>
    ///<param name="mediaId">The media ID to announce instead of using text-to-speech.</param>
    ///<param name="preannounce">Play a sound before the announcement.</param>
    ///<param name="preannounceMediaId">Custom media ID to play before the announcement.</param>
    public void Announce(ServiceTarget target, string? message = null, string? mediaId = null, bool? preannounce = null, string? preannounceMediaId = null)
    {
        _haContext.CallService("assist_satellite", "announce", target, new AssistSatelliteAnnounceParameters { Message = message, MediaId = mediaId, Preannounce = preannounce, PreannounceMediaId = preannounceMediaId });
    }

    ///<summary>Starts a conversation from a satellite.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartConversation(ServiceTarget target, AssistSatelliteStartConversationParameters data)
    {
        _haContext.CallService("assist_satellite", "start_conversation", target, data);
    }

    ///<summary>Starts a conversation from a satellite.</summary>
    ///<param name="startMessage">The message to start with. eg: You left the lights on in the living room. Turn them off?</param>
    ///<param name="startMediaId">The media ID to start with instead of using text-to-speech.</param>
    ///<param name="extraSystemPrompt">Provide background information to the AI about the request.</param>
    ///<param name="preannounce">Play a sound before the start message or media.</param>
    ///<param name="preannounceMediaId">Custom media ID to play before the start message or media.</param>
    public void StartConversation(ServiceTarget target, string? startMessage = null, string? startMediaId = null, string? extraSystemPrompt = null, bool? preannounce = null, string? preannounceMediaId = null)
    {
        _haContext.CallService("assist_satellite", "start_conversation", target, new AssistSatelliteStartConversationParameters { StartMessage = startMessage, StartMediaId = startMediaId, ExtraSystemPrompt = extraSystemPrompt, Preannounce = preannounce, PreannounceMediaId = preannounceMediaId });
    }
}

public partial record AssistSatelliteAnnounceParameters
{
    ///<summary>The message to announce. eg: Time to wake up!</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>The media ID to announce instead of using text-to-speech.</summary>
    [JsonPropertyName("media_id")]
    public string? MediaId { get; init; }

    ///<summary>Play a sound before the announcement.</summary>
    [JsonPropertyName("preannounce")]
    public bool? Preannounce { get; init; }

    ///<summary>Custom media ID to play before the announcement.</summary>
    [JsonPropertyName("preannounce_media_id")]
    public string? PreannounceMediaId { get; init; }
}

public partial record AssistSatelliteStartConversationParameters
{
    ///<summary>The message to start with. eg: You left the lights on in the living room. Turn them off?</summary>
    [JsonPropertyName("start_message")]
    public string? StartMessage { get; init; }

    ///<summary>The media ID to start with instead of using text-to-speech.</summary>
    [JsonPropertyName("start_media_id")]
    public string? StartMediaId { get; init; }

    ///<summary>Provide background information to the AI about the request.</summary>
    [JsonPropertyName("extra_system_prompt")]
    public string? ExtraSystemPrompt { get; init; }

    ///<summary>Play a sound before the start message or media.</summary>
    [JsonPropertyName("preannounce")]
    public bool? Preannounce { get; init; }

    ///<summary>Custom media ID to play before the start message or media.</summary>
    [JsonPropertyName("preannounce_media_id")]
    public string? PreannounceMediaId { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup with automatic backup settings.</summary>
    public void CreateAutomatic(object? data = null)
    {
        _haContext.CallService("backup", "create_automatic", null, data);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show, defaults to lovelace if not specified. eg: lovelace-cast</param>
    ///<param name="viewPath">The URL path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string viewPath, string? dashboardPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show, defaults to lovelace if not specified. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The URL path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, double position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, double tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public double? TiltPosition { get; init; }
}

public partial class DahuaServices
{
    private readonly IHaContext _haContext;
    public DahuaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Enables of disables all IVS rules based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableAllIvsRules(ServiceTarget target, DahuaEnableAllIvsRulesParameters data)
    {
        _haContext.CallService("dahua", "enable_all_ivs_rules", target, data);
    }

    ///<summary>Enables of disables all IVS rules based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="enabled">If true all IVS rules are enabled. If false, all are disabled eg: True</param>
    public void EnableAllIvsRules(ServiceTarget target, bool enabled)
    {
        _haContext.CallService("dahua", "enable_all_ivs_rules", target, new DahuaEnableAllIvsRulesParameters { Enabled = enabled });
    }

    ///<summary>Enables or disable the channel title video overaly</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableChannelTitle(ServiceTarget target, DahuaEnableChannelTitleParameters data)
    {
        _haContext.CallService("dahua", "enable_channel_title", target, data);
    }

    ///<summary>Enables or disable the channel title video overaly</summary>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public void EnableChannelTitle(ServiceTarget target, bool enabled)
    {
        _haContext.CallService("dahua", "enable_channel_title", target, new DahuaEnableChannelTitleParameters { Enabled = enabled });
    }

    ///<summary>Enables or disable the channel custom text video overaly</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableCustomOverlay(ServiceTarget target, DahuaEnableCustomOverlayParameters data)
    {
        _haContext.CallService("dahua", "enable_custom_overlay", target, data);
    }

    ///<summary>Enables or disable the channel custom text video overaly</summary>
    ///<param name="group">Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public void EnableCustomOverlay(ServiceTarget target, double @group, bool enabled)
    {
        _haContext.CallService("dahua", "enable_custom_overlay", target, new DahuaEnableCustomOverlayParameters { Group = @group, Enabled = enabled });
    }

    ///<summary>Enables of disable a single IVS rule based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableIvsRule(ServiceTarget target, DahuaEnableIvsRuleParameters data)
    {
        _haContext.CallService("dahua", "enable_ivs_rule", target, data);
    }

    ///<summary>Enables of disable a single IVS rule based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="index">The rule index. 0 is a hidden rule, so usually the first rule is rule 1 eg: 1</param>
    ///<param name="enabled">If true enables the IVS rule, otherwise disables it eg: True</param>
    public void EnableIvsRule(ServiceTarget target, double index, bool enabled)
    {
        _haContext.CallService("dahua", "enable_ivs_rule", target, new DahuaEnableIvsRuleParameters { Index = index, Enabled = enabled });
    }

    ///<summary>Enables or disable the channel text video overaly</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableTextOverlay(ServiceTarget target, DahuaEnableTextOverlayParameters data)
    {
        _haContext.CallService("dahua", "enable_text_overlay", target, data);
    }

    ///<summary>Enables or disable the channel text video overaly</summary>
    ///<param name="group">Multiple text overlay groups can exist. The default 1 should be used in most cases eg: 1</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public void EnableTextOverlay(ServiceTarget target, double @group, bool enabled)
    {
        _haContext.CallService("dahua", "enable_text_overlay", target, new DahuaEnableTextOverlayParameters { Group = @group, Enabled = enabled });
    }

    ///<summary>Enables or disable the channel time video overaly</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableTimeOverlay(ServiceTarget target, DahuaEnableTimeOverlayParameters data)
    {
        _haContext.CallService("dahua", "enable_time_overlay", target, data);
    }

    ///<summary>Enables or disable the channel time video overaly</summary>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public void EnableTimeOverlay(ServiceTarget target, bool enabled)
    {
        _haContext.CallService("dahua", "enable_time_overlay", target, new DahuaEnableTimeOverlayParameters { Enabled = enabled });
    }

    ///<summary>Reboots the device</summary>
    ///<param name="target">The target for this service call</param>
    public void Reboot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dahua", "reboot", target, data);
    }

    ///<summary>Sets a title on the video</summary>
    ///<param name="target">The target for this service call</param>
    public void SetChannelTitle(ServiceTarget target, DahuaSetChannelTitleParameters data)
    {
        _haContext.CallService("dahua", "set_channel_title", target, data);
    }

    ///<summary>Sets a title on the video</summary>
    ///<param name="text1">The first title eg: Front Porch</param>
    ///<param name="text2">The second title eg: House</param>
    public void SetChannelTitle(ServiceTarget target, string? text1 = null, string? text2 = null)
    {
        _haContext.CallService("dahua", "set_channel_title", target, new DahuaSetChannelTitleParameters { Text1 = text1, Text2 = text2 });
    }

    ///<summary>Sets a custom text overlay on the video</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCustomOverlay(ServiceTarget target, DahuaSetCustomOverlayParameters data)
    {
        _haContext.CallService("dahua", "set_custom_overlay", target, data);
    }

    ///<summary>Sets a custom text overlay on the video</summary>
    ///<param name="group">Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</param>
    ///<param name="text1">Custom overlay 1 eg: Text 1</param>
    ///<param name="text2">Custom overlay 2 eg: Text 2</param>
    public void SetCustomOverlay(ServiceTarget target, double @group, string? text1 = null, string? text2 = null)
    {
        _haContext.CallService("dahua", "set_custom_overlay", target, new DahuaSetCustomOverlayParameters { Group = @group, Text1 = text1, Text2 = text2 });
    }

    ///<summary>Sets the camera&apos;s focus and zoom</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFocusZoom(ServiceTarget target, DahuaSetFocusZoomParameters data)
    {
        _haContext.CallService("dahua", "set_focus_zoom", target, data);
    }

    ///<summary>Sets the camera&apos;s focus and zoom</summary>
    ///<param name="focus">Decimal Value for Focus eg: 0.758333</param>
    ///<param name="zoom">Decimal value for zoom eg: 0.898502</param>
    public void SetFocusZoom(ServiceTarget target, string focus, string zoom)
    {
        _haContext.CallService("dahua", "set_focus_zoom", target, new DahuaSetFocusZoomParameters { Focus = focus, Zoom = zoom });
    }

    ///<summary>Set the infrared light settings on a Dahua camera</summary>
    ///<param name="target">The target for this service call</param>
    public void SetInfraredMode(ServiceTarget target, DahuaSetInfraredModeParameters data)
    {
        _haContext.CallService("dahua", "set_infrared_mode", target, data);
    }

    ///<summary>Set the infrared light settings on a Dahua camera</summary>
    ///<param name="mode">The infrared mode: Auto, On, Off eg: Auto</param>
    ///<param name="brightness">The infrared brightness, from 0 to 100 inclusive. 100 is the brightest eg: 100</param>
    public void SetInfraredMode(ServiceTarget target, object? mode = null, long? brightness = null)
    {
        _haContext.CallService("dahua", "set_infrared_mode", target, new DahuaSetInfraredModeParameters { Mode = mode, Brightness = brightness });
    }

    ///<summary>Enables or disabled the cameras privacy masking</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPrivacyMasking(ServiceTarget target, DahuaSetPrivacyMaskingParameters data)
    {
        _haContext.CallService("dahua", "set_privacy_masking", target, data);
    }

    ///<summary>Enables or disabled the cameras privacy masking</summary>
    ///<param name="index">The mask index. 0 is the first mask eg: 0</param>
    ///<param name="enabled">If true enables the mask, otherwise disables it eg: True</param>
    public void SetPrivacyMasking(ServiceTarget target, double index, bool enabled)
    {
        _haContext.CallService("dahua", "set_privacy_masking", target, new DahuaSetPrivacyMaskingParameters { Index = index, Enabled = enabled });
    }

    ///<summary>Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetRecordMode(ServiceTarget target, DahuaSetRecordModeParameters data)
    {
        _haContext.CallService("dahua", "set_record_mode", target, data);
    }

    ///<summary>Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.</summary>
    ///<param name="mode">The mode: Auto, On, Off eg: Auto</param>
    public void SetRecordMode(ServiceTarget target, object? mode = null)
    {
        _haContext.CallService("dahua", "set_record_mode", target, new DahuaSetRecordModeParameters { Mode = mode });
    }

    ///<summary>Sets a text overlay on the video</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTextOverlay(ServiceTarget target, DahuaSetTextOverlayParameters data)
    {
        _haContext.CallService("dahua", "set_text_overlay", target, data);
    }

    ///<summary>Sets a text overlay on the video</summary>
    ///<param name="group">Multiple custom text groups can exist. The default 1 should be used in most cases eg: 1</param>
    ///<param name="text1">Text overlay 1 eg: Text 1</param>
    ///<param name="text2">Text overlay 2 eg: Text 2</param>
    ///<param name="text3">Text overlay 3 eg: Text 3</param>
    ///<param name="text4">Text overlay 4 eg: Text 4</param>
    public void SetTextOverlay(ServiceTarget target, double @group, string? text1 = null, string? text2 = null, string? text3 = null, string? text4 = null)
    {
        _haContext.CallService("dahua", "set_text_overlay", target, new DahuaSetTextOverlayParameters { Group = @group, Text1 = text1, Text2 = text2, Text3 = text3, Text4 = text4 });
    }

    ///<summary>Set the camera&apos;s Day/Night Mode. For example, Color, BlackWhite, or Auto</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVideoInDayNightMode(ServiceTarget target, DahuaSetVideoInDayNightModeParameters data)
    {
        _haContext.CallService("dahua", "set_video_in_day_night_mode", target, data);
    }

    ///<summary>Set the camera&apos;s Day/Night Mode. For example, Color, BlackWhite, or Auto</summary>
    ///<param name="configType">The config type: general, day, night eg: general</param>
    ///<param name="mode">The mode: Auto, Color, BlackWhite. Note Auto is also known as Brightness by Dahua eg: Auto</param>
    public void SetVideoInDayNightMode(ServiceTarget target, object? configType = null, object? mode = null)
    {
        _haContext.CallService("dahua", "set_video_in_day_night_mode", target, new DahuaSetVideoInDayNightModeParameters { ConfigType = configType, Mode = mode });
    }

    ///<summary>Sets the video profile mode to day or night</summary>
    ///<param name="target">The target for this service call</param>
    public void SetVideoProfileMode(ServiceTarget target, DahuaSetVideoProfileModeParameters data)
    {
        _haContext.CallService("dahua", "set_video_profile_mode", target, data);
    }

    ///<summary>Sets the video profile mode to day or night</summary>
    ///<param name="mode">The profile: Day, Night eg: Day</param>
    public void SetVideoProfileMode(ServiceTarget target, object? mode = null)
    {
        _haContext.CallService("dahua", "set_video_profile_mode", target, new DahuaSetVideoProfileModeParameters { Mode = mode });
    }

    ///<summary>Cancels a VTO call</summary>
    ///<param name="target">The target for this service call</param>
    public void VtoCancelCall(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dahua", "vto_cancel_call", target, data);
    }

    ///<summary>Open a door via a VTO (Doorbell) for supported devices</summary>
    ///<param name="target">The target for this service call</param>
    public void VtoOpenDoor(ServiceTarget target, DahuaVtoOpenDoorParameters data)
    {
        _haContext.CallService("dahua", "vto_open_door", target, data);
    }

    ///<summary>Open a door via a VTO (Doorbell) for supported devices</summary>
    ///<param name="doorId">The door ID. Default is 1 eg: 1</param>
    public void VtoOpenDoor(ServiceTarget target, double doorId)
    {
        _haContext.CallService("dahua", "vto_open_door", target, new DahuaVtoOpenDoorParameters { DoorId = doorId });
    }
}

public partial record DahuaEnableAllIvsRulesParameters
{
    ///<summary>If true all IVS rules are enabled. If false, all are disabled eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaEnableChannelTitleParameters
{
    ///<summary>If the overlay is enabled or not eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaEnableCustomOverlayParameters
{
    ///<summary>Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</summary>
    [JsonPropertyName("group")]
    public double? Group { get; init; }

    ///<summary>If the overlay is enabled or not eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaEnableIvsRuleParameters
{
    ///<summary>The rule index. 0 is a hidden rule, so usually the first rule is rule 1 eg: 1</summary>
    [JsonPropertyName("index")]
    public double? Index { get; init; }

    ///<summary>If true enables the IVS rule, otherwise disables it eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaEnableTextOverlayParameters
{
    ///<summary>Multiple text overlay groups can exist. The default 1 should be used in most cases eg: 1</summary>
    [JsonPropertyName("group")]
    public double? Group { get; init; }

    ///<summary>If the overlay is enabled or not eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaEnableTimeOverlayParameters
{
    ///<summary>If the overlay is enabled or not eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaSetChannelTitleParameters
{
    ///<summary>The first title eg: Front Porch</summary>
    [JsonPropertyName("text1")]
    public string? Text1 { get; init; }

    ///<summary>The second title eg: House</summary>
    [JsonPropertyName("text2")]
    public string? Text2 { get; init; }
}

public partial record DahuaSetCustomOverlayParameters
{
    ///<summary>Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</summary>
    [JsonPropertyName("group")]
    public double? Group { get; init; }

    ///<summary>Custom overlay 1 eg: Text 1</summary>
    [JsonPropertyName("text1")]
    public string? Text1 { get; init; }

    ///<summary>Custom overlay 2 eg: Text 2</summary>
    [JsonPropertyName("text2")]
    public string? Text2 { get; init; }
}

public partial record DahuaSetFocusZoomParameters
{
    ///<summary>Decimal Value for Focus eg: 0.758333</summary>
    [JsonPropertyName("focus")]
    public string? Focus { get; init; }

    ///<summary>Decimal value for zoom eg: 0.898502</summary>
    [JsonPropertyName("zoom")]
    public string? Zoom { get; init; }
}

public partial record DahuaSetInfraredModeParameters
{
    ///<summary>The infrared mode: Auto, On, Off eg: Auto</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary>The infrared brightness, from 0 to 100 inclusive. 100 is the brightest eg: 100</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record DahuaSetPrivacyMaskingParameters
{
    ///<summary>The mask index. 0 is the first mask eg: 0</summary>
    [JsonPropertyName("index")]
    public double? Index { get; init; }

    ///<summary>If true enables the mask, otherwise disables it eg: True</summary>
    [JsonPropertyName("enabled")]
    public bool? Enabled { get; init; }
}

public partial record DahuaSetRecordModeParameters
{
    ///<summary>The mode: Auto, On, Off eg: Auto</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial record DahuaSetTextOverlayParameters
{
    ///<summary>Multiple custom text groups can exist. The default 1 should be used in most cases eg: 1</summary>
    [JsonPropertyName("group")]
    public double? Group { get; init; }

    ///<summary>Text overlay 1 eg: Text 1</summary>
    [JsonPropertyName("text1")]
    public string? Text1 { get; init; }

    ///<summary>Text overlay 2 eg: Text 2</summary>
    [JsonPropertyName("text2")]
    public string? Text2 { get; init; }

    ///<summary>Text overlay 3 eg: Text 3</summary>
    [JsonPropertyName("text3")]
    public string? Text3 { get; init; }

    ///<summary>Text overlay 4 eg: Text 4</summary>
    [JsonPropertyName("text4")]
    public string? Text4 { get; init; }
}

public partial record DahuaSetVideoInDayNightModeParameters
{
    ///<summary>The config type: general, day, night eg: general</summary>
    [JsonPropertyName("config_type")]
    public object? ConfigType { get; init; }

    ///<summary>The mode: Auto, Color, BlackWhite. Note Auto is also known as Brightness by Dahua eg: Auto</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial record DahuaSetVideoProfileModeParameters
{
    ///<summary>The profile: Day, Night eg: Day</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial record DahuaVtoOpenDoorParameters
{
    ///<summary>The door ID. Default is 1 eg: 1</summary>
    [JsonPropertyName("door_id")]
    public double? DoorId { get; init; }
}

public partial class DenonavrServices
{
    private readonly IHaContext _haContext;
    public DenonavrServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a generic HTTP get command.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetCommand(ServiceTarget target, DenonavrGetCommandParameters data)
    {
        _haContext.CallService("denonavr", "get_command", target, data);
    }

    ///<summary>Sends a generic HTTP get command.</summary>
    ///<param name="command">Endpoint of the command, including associated parameters. eg: /goform/formiPhoneAppDirect.xml?RCKSK0410370</param>
    public void GetCommand(ServiceTarget target, string command)
    {
        _haContext.CallService("denonavr", "get_command", target, new DenonavrGetCommandParameters { Command = command });
    }

    ///<summary>Enables or disables DynamicEQ.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDynamicEq(ServiceTarget target, DenonavrSetDynamicEqParameters data)
    {
        _haContext.CallService("denonavr", "set_dynamic_eq", target, data);
    }

    ///<summary>Enables or disables DynamicEQ.</summary>
    ///<param name="dynamicEq">Whether DynamicEQ should be enabled or disabled.</param>
    public void SetDynamicEq(ServiceTarget target, bool? dynamicEq = null)
    {
        _haContext.CallService("denonavr", "set_dynamic_eq", target, new DenonavrSetDynamicEqParameters { DynamicEq = dynamicEq });
    }

    ///<summary>Updates Audyssey settings.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateAudyssey(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("denonavr", "update_audyssey", target, data);
    }
}

public partial record DenonavrGetCommandParameters
{
    ///<summary>Endpoint of the command, including associated parameters. eg: /goform/formiPhoneAppDirect.xml?RCKSK0410370</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }
}

public partial record DenonavrSetDynamicEqParameters
{
    ///<summary>Whether DynamicEQ should be enabled or disabled.</summary>
    [JsonPropertyName("dynamic_eq")]
    public bool? DynamicEq { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class DreameVacuumServices
{
    private readonly IHaContext _haContext;
    public DreameVacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select the first option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dreame_vacuum", "select_select_first", target, data);
    }

    ///<summary>Select the last option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dreame_vacuum", "select_select_last", target, data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSelectNext(ServiceTarget target, DreameVacuumSelectSelectNextParameters data)
    {
        _haContext.CallService("dreame_vacuum", "select_select_next", target, data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectSelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("dreame_vacuum", "select_select_next", target, new DreameVacuumSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSelectPrevious(ServiceTarget target, DreameVacuumSelectSelectPreviousParameters data)
    {
        _haContext.CallService("dreame_vacuum", "select_select_previous", target, data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectSelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("dreame_vacuum", "select_select_previous", target, new DreameVacuumSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Start the cleaning operation in the selected rooms.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumCleanSegment(ServiceTarget target, DreameVacuumVacuumCleanSegmentParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_clean_segment", target, data);
    }

    ///<summary>Start the cleaning operation in the selected rooms.</summary>
    ///<param name="segments">List of rooms to be cleaned. Only room&apos;s Character or an array of room&apos;s character, cleaning times, fan speed and mop mode to override the default values per room. eg: [3,2] or 3</param>
    ///<param name="repeats">Number of cleaning passes for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,2] or 1</param>
    ///<param name="suctionLevel">Fan speed for every selected room (unless it is overridden by customized cleaning parameter). eg: [0,3] or 0</param>
    ///<param name="waterVolume">Water level for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,3] or 1</param>
    public void VacuumCleanSegment(ServiceTarget target, object segments, double? repeats = null, double? suctionLevel = null, double? waterVolume = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_clean_segment", target, new DreameVacuumVacuumCleanSegmentParameters { Segments = segments, Repeats = repeats, SuctionLevel = suctionLevel, WaterVolume = waterVolume });
    }

    ///<summary>Start the cleaning operation in the selected points on the map.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumCleanSpot(ServiceTarget target, DreameVacuumVacuumCleanSpotParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_clean_spot", target, data);
    }

    ///<summary>Start the cleaning operation in the selected points on the map.</summary>
    ///<param name="points">List of coordinates to be cleaned. eg: [819,-263] or [[819,-263],[819,-263]]</param>
    ///<param name="repeats">Number of cleaning passes for every selected zone. eg: [1,2] or 1</param>
    ///<param name="suctionLevel">Fan speed for every selected zone. eg: [0,3] or 0</param>
    ///<param name="waterVolume">Water level for every selected zone. eg: [1,3] or 1</param>
    public void VacuumCleanSpot(ServiceTarget target, object points, double? repeats = null, double? suctionLevel = null, double? waterVolume = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_clean_spot", target, new DreameVacuumVacuumCleanSpotParameters { Points = points, Repeats = repeats, SuctionLevel = suctionLevel, WaterVolume = waterVolume });
    }

    ///<summary>Start the cleaning operation in the selected area.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumCleanZone(ServiceTarget target, DreameVacuumVacuumCleanZoneParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_clean_zone", target, data);
    }

    ///<summary>Start the cleaning operation in the selected area.</summary>
    ///<param name="zone">Coordinates. eg: [819,-263,4424,2105] or [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="repeats">Number of cleaning passes for every selected zone. eg: [1,3] or 1</param>
    public void VacuumCleanZone(ServiceTarget target, object zone, double? repeats = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_clean_zone", target, new DreameVacuumVacuumCleanZoneParameters { Zone = zone, Repeats = repeats });
    }

    ///<summary>Delete a map.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumDeleteMap(ServiceTarget target, DreameVacuumVacuumDeleteMapParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_delete_map", target, data);
    }

    ///<summary>Delete a map.</summary>
    ///<param name="mapId">ID of the map to be deleted. eg: 14</param>
    public void VacuumDeleteMap(ServiceTarget target, double? mapId = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_delete_map", target, new DreameVacuumVacuumDeleteMapParameters { MapId = mapId });
    }

    ///<summary>Discard the temporary map.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumDiscardTemporaryMap(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_discard_temporary_map", target, data);
    }

    ///<summary>Install official or custom voice pack.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumInstallVoicePack(ServiceTarget target, DreameVacuumVacuumInstallVoicePackParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_install_voice_pack", target, data);
    }

    ///<summary>Install official or custom voice pack.</summary>
    ///<param name="langId">Language ID of this pack. eg: DE</param>
    ///<param name="url">Url of this pack it should be reachable by the vacuum bot. eg: http://awsde0.fds.api.xiaomi.com/dreame-product/dreame.vacuum.p2009/voices/package/deyu.tar.gz</param>
    ///<param name="md5">MD5 checksum of the language pack. eg: d25986c1f608c0897475707e77d856f9</param>
    ///<param name="size">Size of the language pack in bytes. eg: 4067845</param>
    public void VacuumInstallVoicePack(ServiceTarget target, string langId, string url, string md5, double size)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_install_voice_pack", target, new DreameVacuumVacuumInstallVoicePackParameters { LangId = langId, Url = url, Md5 = md5, Size = size });
    }

    ///<summary>Merge rooms.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumMergeSegments(ServiceTarget target, DreameVacuumVacuumMergeSegmentsParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_merge_segments", target, data);
    }

    ///<summary>Merge rooms.</summary>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="segments">Room IDs. eg: [3,2]</param>
    public void VacuumMergeSegments(ServiceTarget target, object segments, string? mapId = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_merge_segments", target, new DreameVacuumVacuumMergeSegmentsParameters { MapId = mapId, Segments = segments });
    }

    ///<summary>Remotely control move the bot one step.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumRemoteControlMoveStep(ServiceTarget target, DreameVacuumVacuumRemoteControlMoveStepParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_remote_control_move_step", target, data);
    }

    ///<summary>Remotely control move the bot one step.</summary>
    ///<param name="rotation">Turn in binary degrees between -128 and 128. eg: 64</param>
    ///<param name="velocity">Move speed, from 100 (forward) to -300 (backward). eg: 100</param>
    public void VacuumRemoteControlMoveStep(ServiceTarget target, double rotation, double velocity)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_remote_control_move_step", target, new DreameVacuumVacuumRemoteControlMoveStepParameters { Rotation = rotation, Velocity = velocity });
    }

    ///<summary>Rename a map.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumRenameMap(ServiceTarget target, DreameVacuumVacuumRenameMapParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_rename_map", target, data);
    }

    ///<summary>Rename a map.</summary>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="mapName">New name of the map. eg: Ground Floor</param>
    public void VacuumRenameMap(ServiceTarget target, string mapId, string mapName)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_rename_map", target, new DreameVacuumVacuumRenameMapParameters { MapId = mapId, MapName = mapName });
    }

    ///<summary>Rename a segment.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumRenameSegment(ServiceTarget target, DreameVacuumVacuumRenameSegmentParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_rename_segment", target, data);
    }

    ///<summary>Rename a segment.</summary>
    ///<param name="segmentId">ID of the segment eg: 3</param>
    ///<param name="segmentName">New name of the segment eg: Playroom</param>
    public void VacuumRenameSegment(ServiceTarget target, double segmentId, string segmentName)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_rename_segment", target, new DreameVacuumVacuumRenameSegmentParameters { SegmentId = segmentId, SegmentName = segmentName });
    }

    ///<summary>Replace the temporary map with another saved map.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumReplaceTemporaryMap(ServiceTarget target, DreameVacuumVacuumReplaceTemporaryMapParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_replace_temporary_map", target, data);
    }

    ///<summary>Replace the temporary map with another saved map.</summary>
    ///<param name="mapId">ID of the map to be replaced with. eg: 14</param>
    public void VacuumReplaceTemporaryMap(ServiceTarget target, double? mapId = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_replace_temporary_map", target, new DreameVacuumVacuumReplaceTemporaryMapParameters { MapId = mapId });
    }

    ///<summary>Request map data</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumRequestMap(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_request_map", target, data);
    }

    ///<summary>Reset a consumable.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumResetConsumable(ServiceTarget target, DreameVacuumVacuumResetConsumableParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_reset_consumable", target, data);
    }

    ///<summary>Reset a consumable.</summary>
    ///<param name="consumable">Consumable type.</param>
    public void VacuumResetConsumable(ServiceTarget target, object consumable)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_reset_consumable", target, new DreameVacuumVacuumResetConsumableParameters { Consumable = consumable });
    }

    ///<summary>Save the temporary map.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSaveTemporaryMap(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_save_temporary_map", target, data);
    }

    ///<summary>Select current map. Used when having multiple maps/floors.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSelectMap(ServiceTarget target, DreameVacuumVacuumSelectMapParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_select_map", target, data);
    }

    ///<summary>Select current map. Used when having multiple maps/floors.</summary>
    ///<param name="mapId">ID of the map to be selected. eg: 14</param>
    public void VacuumSelectMap(ServiceTarget target, double mapId)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_select_map", target, new DreameVacuumVacuumSelectMapParameters { MapId = mapId });
    }

    ///<summary>Set room cleaning sequence. (Only on supported devices)</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSetCleaningSequence(ServiceTarget target, DreameVacuumVacuumSetCleaningSequenceParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_cleaning_sequence", target, data);
    }

    ///<summary>Set room cleaning sequence. (Only on supported devices)</summary>
    ///<param name="cleaningSequence">Segment ID list of cleaning sequence. eg: [5,3,2,1,4] or []</param>
    public void VacuumSetCleaningSequence(ServiceTarget target, object cleaningSequence)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_cleaning_sequence", target, new DreameVacuumVacuumSetCleaningSequenceParameters { CleaningSequence = cleaningSequence });
    }

    ///<summary>Set custom cleaning parameters. (Only on supported devices)</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSetCustomCleaning(ServiceTarget target, DreameVacuumVacuumSetCustomCleaningParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_custom_cleaning", target, data);
    }

    ///<summary>Set custom cleaning parameters. (Only on supported devices)</summary>
    ///<param name="segmentId">Room IDs. eg: [1,2,3,4,5]</param>
    ///<param name="suctionLevel">Suction level for each room. eg: [0,0,2,3,1]</param>
    ///<param name="waterVolume">Water volume for each room. eg: [1,1,2,3,1]</param>
    ///<param name="repeats">Cleaning times for each room. eg: [2,2,1,3,1]</param>
    public void VacuumSetCustomCleaning(ServiceTarget target, object segmentId, object suctionLevel, object waterVolume, object repeats)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_custom_cleaning", target, new DreameVacuumVacuumSetCustomCleaningParameters { SegmentId = segmentId, SuctionLevel = suctionLevel, WaterVolume = waterVolume, Repeats = repeats });
    }

    ///<summary>Enable/disable DnD functionality and/or setting its start and end time.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSetDnd(ServiceTarget target, DreameVacuumVacuumSetDndParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_dnd", target, data);
    }

    ///<summary>Enable/disable DnD functionality and/or setting its start and end time.</summary>
    ///<param name="dndEnabled">Enable or disable DnD feature. eg: true</param>
    ///<param name="dndStart">Start time of DnD feature. eg: 22:00</param>
    ///<param name="dndEnd">End time of DnD feature. eg: 6:30</param>
    public void VacuumSetDnd(ServiceTarget target, bool dndEnabled, string? dndStart = null, string? dndEnd = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_dnd", target, new DreameVacuumVacuumSetDndParameters { DndEnabled = dndEnabled, DndStart = dndStart, DndEnd = dndEnd });
    }

    ///<summary>Define virtual walls, restricted zones, and/or no mop zones.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSetRestrictedZone(ServiceTarget target, DreameVacuumVacuumSetRestrictedZoneParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_restricted_zone", target, data);
    }

    ///<summary>Define virtual walls, restricted zones, and/or no mop zones.</summary>
    ///<param name="walls">Virtual walls. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="zones">No go zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="noMops">No mop zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    public void VacuumSetRestrictedZone(ServiceTarget target, string? walls = null, string? zones = null, string? noMops = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_set_restricted_zone", target, new DreameVacuumVacuumSetRestrictedZoneParameters { Walls = walls, Zones = zones, NoMops = noMops });
    }

    ///<summary>Split rooms.</summary>
    ///<param name="target">The target for this service call</param>
    public void VacuumSplitSegments(ServiceTarget target, DreameVacuumVacuumSplitSegmentsParameters data)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_split_segments", target, data);
    }

    ///<summary>Split rooms.</summary>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="segment">Room ID. eg: 3</param>
    ///<param name="line">Split line coordinates. eg: [819,-263,4424,2105]</param>
    public void VacuumSplitSegments(ServiceTarget target, double segment, object line, string? mapId = null)
    {
        _haContext.CallService("dreame_vacuum", "vacuum_split_segments", target, new DreameVacuumVacuumSplitSegmentsParameters { MapId = mapId, Segment = segment, Line = line });
    }
}

public partial record DreameVacuumSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record DreameVacuumSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record DreameVacuumVacuumCleanSegmentParameters
{
    ///<summary>List of rooms to be cleaned. Only room&apos;s Character or an array of room&apos;s character, cleaning times, fan speed and mop mode to override the default values per room. eg: [3,2] or 3</summary>
    [JsonPropertyName("segments")]
    public object? Segments { get; init; }

    ///<summary>Number of cleaning passes for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,2] or 1</summary>
    [JsonPropertyName("repeats")]
    public double? Repeats { get; init; }

    ///<summary>Fan speed for every selected room (unless it is overridden by customized cleaning parameter). eg: [0,3] or 0</summary>
    [JsonPropertyName("suction_level")]
    public double? SuctionLevel { get; init; }

    ///<summary>Water level for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,3] or 1</summary>
    [JsonPropertyName("water_volume")]
    public double? WaterVolume { get; init; }
}

public partial record DreameVacuumVacuumCleanSpotParameters
{
    ///<summary>List of coordinates to be cleaned. eg: [819,-263] or [[819,-263],[819,-263]]</summary>
    [JsonPropertyName("points")]
    public object? Points { get; init; }

    ///<summary>Number of cleaning passes for every selected zone. eg: [1,2] or 1</summary>
    [JsonPropertyName("repeats")]
    public double? Repeats { get; init; }

    ///<summary>Fan speed for every selected zone. eg: [0,3] or 0</summary>
    [JsonPropertyName("suction_level")]
    public double? SuctionLevel { get; init; }

    ///<summary>Water level for every selected zone. eg: [1,3] or 1</summary>
    [JsonPropertyName("water_volume")]
    public double? WaterVolume { get; init; }
}

public partial record DreameVacuumVacuumCleanZoneParameters
{
    ///<summary>Coordinates. eg: [819,-263,4424,2105] or [[819,-263,4424,2105],[-2001,-3050,-542,515]]</summary>
    [JsonPropertyName("zone")]
    public object? Zone { get; init; }

    ///<summary>Number of cleaning passes for every selected zone. eg: [1,3] or 1</summary>
    [JsonPropertyName("repeats")]
    public double? Repeats { get; init; }
}

public partial record DreameVacuumVacuumDeleteMapParameters
{
    ///<summary>ID of the map to be deleted. eg: 14</summary>
    [JsonPropertyName("map_id")]
    public double? MapId { get; init; }
}

public partial record DreameVacuumVacuumInstallVoicePackParameters
{
    ///<summary>Language ID of this pack. eg: DE</summary>
    [JsonPropertyName("lang_id")]
    public string? LangId { get; init; }

    ///<summary>Url of this pack it should be reachable by the vacuum bot. eg: http://awsde0.fds.api.xiaomi.com/dreame-product/dreame.vacuum.p2009/voices/package/deyu.tar.gz</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>MD5 checksum of the language pack. eg: d25986c1f608c0897475707e77d856f9</summary>
    [JsonPropertyName("md5")]
    public string? Md5 { get; init; }

    ///<summary>Size of the language pack in bytes. eg: 4067845</summary>
    [JsonPropertyName("size")]
    public double? Size { get; init; }
}

public partial record DreameVacuumVacuumMergeSegmentsParameters
{
    ///<summary>ID of the map. eg: 14</summary>
    [JsonPropertyName("map_id")]
    public string? MapId { get; init; }

    ///<summary>Room IDs. eg: [3,2]</summary>
    [JsonPropertyName("segments")]
    public object? Segments { get; init; }
}

public partial record DreameVacuumVacuumRemoteControlMoveStepParameters
{
    ///<summary>Turn in binary degrees between -128 and 128. eg: 64</summary>
    [JsonPropertyName("rotation")]
    public double? Rotation { get; init; }

    ///<summary>Move speed, from 100 (forward) to -300 (backward). eg: 100</summary>
    [JsonPropertyName("velocity")]
    public double? Velocity { get; init; }
}

public partial record DreameVacuumVacuumRenameMapParameters
{
    ///<summary>ID of the map. eg: 14</summary>
    [JsonPropertyName("map_id")]
    public string? MapId { get; init; }

    ///<summary>New name of the map. eg: Ground Floor</summary>
    [JsonPropertyName("map_name")]
    public string? MapName { get; init; }
}

public partial record DreameVacuumVacuumRenameSegmentParameters
{
    ///<summary>ID of the segment eg: 3</summary>
    [JsonPropertyName("segment_id")]
    public double? SegmentId { get; init; }

    ///<summary>New name of the segment eg: Playroom</summary>
    [JsonPropertyName("segment_name")]
    public string? SegmentName { get; init; }
}

public partial record DreameVacuumVacuumReplaceTemporaryMapParameters
{
    ///<summary>ID of the map to be replaced with. eg: 14</summary>
    [JsonPropertyName("map_id")]
    public double? MapId { get; init; }
}

public partial record DreameVacuumVacuumResetConsumableParameters
{
    ///<summary>Consumable type.</summary>
    [JsonPropertyName("consumable")]
    public object? Consumable { get; init; }
}

public partial record DreameVacuumVacuumSelectMapParameters
{
    ///<summary>ID of the map to be selected. eg: 14</summary>
    [JsonPropertyName("map_id")]
    public double? MapId { get; init; }
}

public partial record DreameVacuumVacuumSetCleaningSequenceParameters
{
    ///<summary>Segment ID list of cleaning sequence. eg: [5,3,2,1,4] or []</summary>
    [JsonPropertyName("cleaning_sequence")]
    public object? CleaningSequence { get; init; }
}

public partial record DreameVacuumVacuumSetCustomCleaningParameters
{
    ///<summary>Room IDs. eg: [1,2,3,4,5]</summary>
    [JsonPropertyName("segment_id")]
    public object? SegmentId { get; init; }

    ///<summary>Suction level for each room. eg: [0,0,2,3,1]</summary>
    [JsonPropertyName("suction_level")]
    public object? SuctionLevel { get; init; }

    ///<summary>Water volume for each room. eg: [1,1,2,3,1]</summary>
    [JsonPropertyName("water_volume")]
    public object? WaterVolume { get; init; }

    ///<summary>Cleaning times for each room. eg: [2,2,1,3,1]</summary>
    [JsonPropertyName("repeats")]
    public object? Repeats { get; init; }
}

public partial record DreameVacuumVacuumSetDndParameters
{
    ///<summary>Enable or disable DnD feature. eg: true</summary>
    [JsonPropertyName("dnd_enabled")]
    public bool? DndEnabled { get; init; }

    ///<summary>Start time of DnD feature. eg: 22:00</summary>
    [JsonPropertyName("dnd_start")]
    public string? DndStart { get; init; }

    ///<summary>End time of DnD feature. eg: 6:30</summary>
    [JsonPropertyName("dnd_end")]
    public string? DndEnd { get; init; }
}

public partial record DreameVacuumVacuumSetRestrictedZoneParameters
{
    ///<summary>Virtual walls. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</summary>
    [JsonPropertyName("walls")]
    public string? Walls { get; init; }

    ///<summary>No go zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</summary>
    [JsonPropertyName("zones")]
    public string? Zones { get; init; }

    ///<summary>No mop zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</summary>
    [JsonPropertyName("no_mops")]
    public string? NoMops { get; init; }
}

public partial record DreameVacuumVacuumSplitSegmentsParameters
{
    ///<summary>ID of the map. eg: 14</summary>
    [JsonPropertyName("map_id")]
    public string? MapId { get; init; }

    ///<summary>Room ID. eg: 3</summary>
    [JsonPropertyName("segment")]
    public double? Segment { get; init; }

    ///<summary>Split line coordinates. eg: [819,-263,4424,2105]</summary>
    [JsonPropertyName("line")]
    public object? Line { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, double percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, double? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleGenerativeAiConversationServices
{
    private readonly IHaContext _haContext;
    public GoogleGenerativeAiConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    public void GenerateContent(GoogleGenerativeAiConversationGenerateContentParameters data)
    {
        _haContext.CallService("google_generative_ai_conversation", "generate_content", null, data);
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    ///<param name="prompt">The prompt eg: Describe what you see in these images</param>
    ///<param name="imageFilename">Deprecated. Use filenames instead. eg: /config/www/image.jpg</param>
    ///<param name="filenames">Attachments to add to the prompt (images, PDFs, etc) eg: /config/www/image.jpg</param>
    public void GenerateContent(string prompt, object? imageFilename = null, IEnumerable<string>? filenames = null)
    {
        _haContext.CallService("google_generative_ai_conversation", "generate_content", null, new GoogleGenerativeAiConversationGenerateContentParameters { Prompt = prompt, ImageFilename = imageFilename, Filenames = filenames });
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    public Task<JsonElement?> GenerateContentAsync(GoogleGenerativeAiConversationGenerateContentParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("google_generative_ai_conversation", "generate_content", null, data);
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    ///<param name="prompt">The prompt eg: Describe what you see in these images</param>
    ///<param name="imageFilename">Deprecated. Use filenames instead. eg: /config/www/image.jpg</param>
    ///<param name="filenames">Attachments to add to the prompt (images, PDFs, etc) eg: /config/www/image.jpg</param>
    public Task<JsonElement?> GenerateContentAsync(string prompt, object? imageFilename = null, IEnumerable<string>? filenames = null)
    {
        return _haContext.CallServiceWithResponseAsync("google_generative_ai_conversation", "generate_content", null, new GoogleGenerativeAiConversationGenerateContentParameters { Prompt = prompt, ImageFilename = imageFilename, Filenames = filenames });
    }
}

public partial record GoogleGenerativeAiConversationGenerateContentParameters
{
    ///<summary>The prompt eg: Describe what you see in these images</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>Deprecated. Use filenames instead. eg: /config/www/image.jpg</summary>
    [JsonPropertyName("image_filename")]
    public object? ImageFilename { get; init; }

    ///<summary>Attachments to add to the prompt (images, PDFs, etc) eg: /config/www/image.jpg</summary>
    [JsonPropertyName("filenames")]
    public IEnumerable<string>? Filenames { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HeosServices
{
    private readonly IHaContext _haContext;
    public HeosServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the queue of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetQueue(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("heos", "get_queue", target, data);
    }

    ///<summary>Retrieves the queue of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetQueueAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("heos", "get_queue", target, data);
    }

    ///<summary>Turns down the group volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void GroupVolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("heos", "group_volume_down", target, data);
    }

    ///<summary>Sets the group&apos;s volume while preserving member volume ratios.</summary>
    ///<param name="target">The target for this service call</param>
    public void GroupVolumeSet(ServiceTarget target, HeosGroupVolumeSetParameters data)
    {
        _haContext.CallService("heos", "group_volume_set", target, data);
    }

    ///<summary>Sets the group&apos;s volume while preserving member volume ratios.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void GroupVolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("heos", "group_volume_set", target, new HeosGroupVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the group volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void GroupVolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("heos", "group_volume_up", target, data);
    }

    ///<summary>Moves one or more items within the play queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void MoveQueueItem(ServiceTarget target, HeosMoveQueueItemParameters data)
    {
        _haContext.CallService("heos", "move_queue_item", target, data);
    }

    ///<summary>Moves one or more items within the play queue.</summary>
    ///<param name="queueIds">The IDs (indexes) of the items in the queue to move.</param>
    ///<param name="destinationPosition">The position index in the queue to move the items to.</param>
    public void MoveQueueItem(ServiceTarget target, IEnumerable<string> queueIds, long destinationPosition)
    {
        _haContext.CallService("heos", "move_queue_item", target, new HeosMoveQueueItemParameters { QueueIds = queueIds, DestinationPosition = destinationPosition });
    }

    ///<summary>Removes items from the play queue.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveFromQueue(ServiceTarget target, HeosRemoveFromQueueParameters data)
    {
        _haContext.CallService("heos", "remove_from_queue", target, data);
    }

    ///<summary>Removes items from the play queue.</summary>
    ///<param name="queueIds">The IDs (indexes) of the items in the queue to remove.</param>
    public void RemoveFromQueue(ServiceTarget target, IEnumerable<string> queueIds)
    {
        _haContext.CallService("heos", "remove_from_queue", target, new HeosRemoveFromQueueParameters { QueueIds = queueIds });
    }

    ///<summary>Signs in to a HEOS account.</summary>
    public void SignIn(HeosSignInParameters data)
    {
        _haContext.CallService("heos", "sign_in", null, data);
    }

    ///<summary>Signs in to a HEOS account.</summary>
    ///<param name="username">The username or email of the HEOS account. eg: example@example.com</param>
    ///<param name="password">The password of the HEOS account. eg: password</param>
    public void SignIn(string username, string password)
    {
        _haContext.CallService("heos", "sign_in", null, new HeosSignInParameters { Username = username, Password = password });
    }

    ///<summary>Signs out of the HEOS account.</summary>
    public void SignOut(object? data = null)
    {
        _haContext.CallService("heos", "sign_out", null, data);
    }
}

public partial record HeosGroupVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial record HeosMoveQueueItemParameters
{
    ///<summary>The IDs (indexes) of the items in the queue to move.</summary>
    [JsonPropertyName("queue_ids")]
    public IEnumerable<string>? QueueIds { get; init; }

    ///<summary>The position index in the queue to move the items to.</summary>
    [JsonPropertyName("destination_position")]
    public long? DestinationPosition { get; init; }
}

public partial record HeosRemoveFromQueueParameters
{
    ///<summary>The IDs (indexes) of the items in the queue to remove.</summary>
    [JsonPropertyName("queue_ids")]
    public IEnumerable<string>? QueueIds { get; init; }
}

public partial record HeosSignInParameters
{
    ///<summary>The username or email of the HEOS account. eg: example@example.com</summary>
    [JsonPropertyName("username")]
    public string? Username { get; init; }

    ///<summary>The password of the HEOS account. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeConnectServices
{
    private readonly IHaContext _haContext;
    public HomeConnectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Changes a setting.</summary>
    public void ChangeSetting(HomeConnectChangeSettingParameters data)
    {
        _haContext.CallService("home_connect", "change_setting", null, data);
    }

    ///<summary>Changes a setting.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="key">Key of the setting. eg: BSH.Common.Setting.ChildLock</param>
    ///<param name="value">Value of the setting. eg: true</param>
    public void ChangeSetting(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "change_setting", null, new HomeConnectChangeSettingParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Pauses the current running program.</summary>
    public void PauseProgram(HomeConnectPauseProgramParameters data)
    {
        _haContext.CallService("home_connect", "pause_program", null, data);
    }

    ///<summary>Pauses the current running program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    public void PauseProgram(string deviceId)
    {
        _haContext.CallService("home_connect", "pause_program", null, new HomeConnectPauseProgramParameters { DeviceId = deviceId });
    }

    ///<summary>Resumes a paused program.</summary>
    public void ResumeProgram(HomeConnectResumeProgramParameters data)
    {
        _haContext.CallService("home_connect", "resume_program", null, data);
    }

    ///<summary>Resumes a paused program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    public void ResumeProgram(string deviceId)
    {
        _haContext.CallService("home_connect", "resume_program", null, new HomeConnectResumeProgramParameters { DeviceId = deviceId });
    }

    ///<summary>Selects a program without starting it.</summary>
    public void SelectProgram(HomeConnectSelectProgramParameters data)
    {
        _haContext.CallService("home_connect", "select_program", null, data);
    }

    ///<summary>Selects a program without starting it.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="program">Program to select. eg: Dishcare.Dishwasher.Program.Auto2</param>
    ///<param name="key">Key of the option. eg: BSH.Common.Option.StartInRelative</param>
    ///<param name="value">Value of the option. eg: 1800</param>
    ///<param name="unit">Unit for the option. eg: seconds</param>
    public void SelectProgram(string deviceId, string program, string? key = null, object? value = null, string? unit = null)
    {
        _haContext.CallService("home_connect", "select_program", null, new HomeConnectSelectProgramParameters { DeviceId = deviceId, Program = program, Key = key, Value = value, Unit = unit });
    }

    ///<summary>Sets an option for the active program.</summary>
    public void SetOptionActive(HomeConnectSetOptionActiveParameters data)
    {
        _haContext.CallService("home_connect", "set_option_active", null, data);
    }

    ///<summary>Sets an option for the active program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="key">Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</param>
    ///<param name="value">Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</param>
    public void SetOptionActive(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "set_option_active", null, new HomeConnectSetOptionActiveParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Sets options for the selected program.</summary>
    public void SetOptionSelected(HomeConnectSetOptionSelectedParameters data)
    {
        _haContext.CallService("home_connect", "set_option_selected", null, data);
    }

    ///<summary>Sets options for the selected program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="key">Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</param>
    ///<param name="value">Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</param>
    public void SetOptionSelected(string deviceId, string key, object value)
    {
        _haContext.CallService("home_connect", "set_option_selected", null, new HomeConnectSetOptionSelectedParameters { DeviceId = deviceId, Key = key, Value = value });
    }

    ///<summary>Starts or selects a program with options or sets the options for the active or the selected program.</summary>
    public void SetProgramAndOptions(HomeConnectSetProgramAndOptionsParameters data)
    {
        _haContext.CallService("home_connect", "set_program_and_options", null, data);
    }

    ///<summary>Starts or selects a program with options or sets the options for the active or the selected program.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="affectsTo">Selects if the program affected by the action should be the active or the selected program. eg: active_program</param>
    ///<param name="program">Program to select eg: dishcare_dishwasher_program_auto2</param>
    ///<param name="cleaningRobotOptions"></param>
    ///<param name="coffeeMakerOptions"></param>
    ///<param name="dishWasherOptions"></param>
    ///<param name="dryerOptions"></param>
    ///<param name="hoodOptions"></param>
    ///<param name="ovenOptions"></param>
    ///<param name="warmingDrawerOptions"></param>
    ///<param name="washerOptions"></param>
    public void SetProgramAndOptions(string deviceId, object affectsTo, object? program = null, object? cleaningRobotOptions = null, object? coffeeMakerOptions = null, object? dishWasherOptions = null, object? dryerOptions = null, object? hoodOptions = null, object? ovenOptions = null, object? warmingDrawerOptions = null, object? washerOptions = null)
    {
        _haContext.CallService("home_connect", "set_program_and_options", null, new HomeConnectSetProgramAndOptionsParameters { DeviceId = deviceId, AffectsTo = affectsTo, Program = program, CleaningRobotOptions = cleaningRobotOptions, CoffeeMakerOptions = coffeeMakerOptions, DishWasherOptions = dishWasherOptions, DryerOptions = dryerOptions, HoodOptions = hoodOptions, OvenOptions = ovenOptions, WarmingDrawerOptions = warmingDrawerOptions, WasherOptions = washerOptions });
    }

    ///<summary>Selects a program and starts it.</summary>
    public void StartProgram(HomeConnectStartProgramParameters data)
    {
        _haContext.CallService("home_connect", "start_program", null, data);
    }

    ///<summary>Selects a program and starts it.</summary>
    ///<param name="deviceId">ID of the device.</param>
    ///<param name="program">Program to select. eg: Dishcare.Dishwasher.Program.Auto2</param>
    ///<param name="key">Key of the option. eg: BSH.Common.Option.StartInRelative</param>
    ///<param name="value">Value of the option. eg: 1800</param>
    ///<param name="unit">Unit for the option. eg: seconds</param>
    public void StartProgram(string deviceId, string program, string? key = null, object? value = null, string? unit = null)
    {
        _haContext.CallService("home_connect", "start_program", null, new HomeConnectStartProgramParameters { DeviceId = deviceId, Program = program, Key = key, Value = value, Unit = unit });
    }
}

public partial record HomeConnectChangeSettingParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the setting. eg: BSH.Common.Setting.ChildLock</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the setting. eg: true</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectPauseProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeConnectResumeProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial record HomeConnectSelectProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Program to select. eg: Dishcare.Dishwasher.Program.Auto2</summary>
    [JsonPropertyName("program")]
    public string? Program { get; init; }

    ///<summary>Key of the option. eg: BSH.Common.Option.StartInRelative</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: 1800</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Unit for the option. eg: seconds</summary>
    [JsonPropertyName("unit")]
    public string? Unit { get; init; }
}

public partial record HomeConnectSetOptionActiveParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectSetOptionSelectedParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Key of the option. eg: LaundryCare.Dryer.Option.DryingTarget</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: LaundryCare.Dryer.EnumType.DryingTarget.IronDry</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record HomeConnectSetProgramAndOptionsParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Selects if the program affected by the action should be the active or the selected program. eg: active_program</summary>
    [JsonPropertyName("affects_to")]
    public object? AffectsTo { get; init; }

    ///<summary>Program to select eg: dishcare_dishwasher_program_auto2</summary>
    [JsonPropertyName("program")]
    public object? Program { get; init; }

    [JsonPropertyName("cleaning_robot_options")]
    public object? CleaningRobotOptions { get; init; }

    [JsonPropertyName("coffee_maker_options")]
    public object? CoffeeMakerOptions { get; init; }

    [JsonPropertyName("dish_washer_options")]
    public object? DishWasherOptions { get; init; }

    [JsonPropertyName("dryer_options")]
    public object? DryerOptions { get; init; }

    [JsonPropertyName("hood_options")]
    public object? HoodOptions { get; init; }

    [JsonPropertyName("oven_options")]
    public object? OvenOptions { get; init; }

    [JsonPropertyName("warming_drawer_options")]
    public object? WarmingDrawerOptions { get; init; }

    [JsonPropertyName("washer_options")]
    public object? WasherOptions { get; init; }
}

public partial record HomeConnectStartProgramParameters
{
    ///<summary>ID of the device.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Program to select. eg: Dishcare.Dishwasher.Program.Auto2</summary>
    [JsonPropertyName("program")]
    public string? Program { get; init; }

    ///<summary>Key of the option. eg: BSH.Common.Option.StartInRelative</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value of the option. eg: 1800</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Unit for the option. eg: seconds</summary>
    [JsonPropertyName("unit")]
    public string? Unit { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reloads all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, object? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the Core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public object? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="mode">Operation mode. For example, &quot;normal&quot;, &quot;eco&quot;, or &quot;away&quot;. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "toggle", target, data);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_off", target, data);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_on", target, data);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, &quot;normal&quot;, &quot;eco&quot;, or &quot;away&quot;. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void Toggle(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public void TurnOff(ServiceTarget target, double? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void TurnOn(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public double? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("brightness_step")]
    public double? BrightnessStep { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void BrowseMedia(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        _haContext.CallService("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public void BrowseMedia(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        _haContext.CallService("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> BrowseMediaAsync(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public Task<JsonElement?> BrowseMediaAsync(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void SearchMedia(ServiceTarget target, MediaPlayerSearchMediaParameters data)
    {
        _haContext.CallService("media_player", "search_media", target, data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public void SearchMedia(ServiceTarget target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        _haContext.CallService("media_player", "search_media", target, new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> SearchMediaAsync(ServiceTarget target, MediaPlayerSearchMediaParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "search_media", target, data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public Task<JsonElement?> SearchMediaAsync(ServiceTarget target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "search_media", target, new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerBrowseMediaParameters
{
    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Whether the media (one or all) should be played in a loop or not.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSearchMediaParameters
{
    ///<summary>The term to search for. eg: Beatles</summary>
    [JsonPropertyName("search_query")]
    public string? SearchQuery { get; init; }

    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</summary>
    [JsonPropertyName("media_filter_classes")]
    public IEnumerable<string>? MediaFilterClasses { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether the media should be played in randomized order or not.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, double? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">If &apos;Payload&apos; is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object? payload = null, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("mqtt", "reload", null, data);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>If &apos;Payload&apos; is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class MusicAssistantServices
{
    private readonly IHaContext _haContext;
    public MusicAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves items from a Music Assistant library.</summary>
    public void GetLibrary(MusicAssistantGetLibraryParameters data)
    {
        _haContext.CallService("music_assistant", "get_library", null, data);
    }

    ///<summary>Retrieves items from a Music Assistant library.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="mediaType">The media type for which to request details for. eg: playlist</param>
    ///<param name="favorite">Filter items so only favorites items are returned. eg: true</param>
    ///<param name="search">Optional search string to search through this library. eg: We Are The Champions</param>
    ///<param name="limit">Maximum number of items to return. eg: 25</param>
    ///<param name="offset">Offset to start the list from. eg: 25</param>
    ///<param name="orderBy">Sort the list by this field. eg: random</param>
    ///<param name="albumType">Filter albums by type. eg: single</param>
    ///<param name="albumArtistsOnly">Only return album artists when listing the artists library items. eg: true</param>
    public void GetLibrary(object configEntryId, object mediaType, bool? favorite = null, string? search = null, long? limit = null, long? offset = null, object? orderBy = null, IEnumerable<object>? albumType = null, bool? albumArtistsOnly = null)
    {
        _haContext.CallService("music_assistant", "get_library", null, new MusicAssistantGetLibraryParameters { ConfigEntryId = configEntryId, MediaType = mediaType, Favorite = favorite, Search = search, Limit = limit, Offset = offset, OrderBy = orderBy, AlbumType = albumType, AlbumArtistsOnly = albumArtistsOnly });
    }

    ///<summary>Retrieves items from a Music Assistant library.</summary>
    public Task<JsonElement?> GetLibraryAsync(MusicAssistantGetLibraryParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "get_library", null, data);
    }

    ///<summary>Retrieves items from a Music Assistant library.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="mediaType">The media type for which to request details for. eg: playlist</param>
    ///<param name="favorite">Filter items so only favorites items are returned. eg: true</param>
    ///<param name="search">Optional search string to search through this library. eg: We Are The Champions</param>
    ///<param name="limit">Maximum number of items to return. eg: 25</param>
    ///<param name="offset">Offset to start the list from. eg: 25</param>
    ///<param name="orderBy">Sort the list by this field. eg: random</param>
    ///<param name="albumType">Filter albums by type. eg: single</param>
    ///<param name="albumArtistsOnly">Only return album artists when listing the artists library items. eg: true</param>
    public Task<JsonElement?> GetLibraryAsync(object configEntryId, object mediaType, bool? favorite = null, string? search = null, long? limit = null, long? offset = null, object? orderBy = null, IEnumerable<object>? albumType = null, bool? albumArtistsOnly = null)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "get_library", null, new MusicAssistantGetLibraryParameters { ConfigEntryId = configEntryId, MediaType = mediaType, Favorite = favorite, Search = search, Limit = limit, Offset = offset, OrderBy = orderBy, AlbumType = albumType, AlbumArtistsOnly = albumArtistsOnly });
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetQueue(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("music_assistant", "get_queue", target, data);
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetQueueAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "get_queue", target, data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayAnnouncement(ServiceTarget target, MusicAssistantPlayAnnouncementParameters data)
    {
        _haContext.CallService("music_assistant", "play_announcement", target, data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public void PlayAnnouncement(ServiceTarget target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        _haContext.CallService("music_assistant", "play_announcement", target, new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MusicAssistantPlayMediaParameters data)
    {
        _haContext.CallService("music_assistant", "play_media", target, data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public void PlayMedia(ServiceTarget target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        _haContext.CallService("music_assistant", "play_media", target, new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    public void Search(MusicAssistantSearchParameters data)
    {
        _haContext.CallService("music_assistant", "search", null, data);
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="name">The name/title to search for. eg: We Are The Champions</param>
    ///<param name="mediaType">The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="limit">Maximum number of items to return (per media type). eg: 25</param>
    ///<param name="libraryOnly">Only include results that are in the library. eg: true</param>
    public void Search(object configEntryId, string name, IEnumerable<object>? mediaType = null, string? artist = null, string? album = null, long? limit = null, bool? libraryOnly = null)
    {
        _haContext.CallService("music_assistant", "search", null, new MusicAssistantSearchParameters { ConfigEntryId = configEntryId, Name = name, MediaType = mediaType, Artist = artist, Album = album, Limit = limit, LibraryOnly = libraryOnly });
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    public Task<JsonElement?> SearchAsync(MusicAssistantSearchParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "search", null, data);
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="name">The name/title to search for. eg: We Are The Champions</param>
    ///<param name="mediaType">The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="limit">Maximum number of items to return (per media type). eg: 25</param>
    ///<param name="libraryOnly">Only include results that are in the library. eg: true</param>
    public Task<JsonElement?> SearchAsync(object configEntryId, string name, IEnumerable<object>? mediaType = null, string? artist = null, string? album = null, long? limit = null, bool? libraryOnly = null)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "search", null, new MusicAssistantSearchParameters { ConfigEntryId = configEntryId, Name = name, MediaType = mediaType, Artist = artist, Album = album, Limit = limit, LibraryOnly = libraryOnly });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TransferQueue(ServiceTarget target, MusicAssistantTransferQueueParameters data)
    {
        _haContext.CallService("music_assistant", "transfer_queue", target, data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public void TransferQueue(ServiceTarget target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        _haContext.CallService("music_assistant", "transfer_queue", target, new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }
}

public partial record MusicAssistantGetLibraryParameters
{
    ///<summary>Select the Music Assistant instance to perform the search on.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>The media type for which to request details for. eg: playlist</summary>
    [JsonPropertyName("media_type")]
    public object? MediaType { get; init; }

    ///<summary>Filter items so only favorites items are returned. eg: true</summary>
    [JsonPropertyName("favorite")]
    public bool? Favorite { get; init; }

    ///<summary>Optional search string to search through this library. eg: We Are The Champions</summary>
    [JsonPropertyName("search")]
    public string? Search { get; init; }

    ///<summary>Maximum number of items to return. eg: 25</summary>
    [JsonPropertyName("limit")]
    public long? Limit { get; init; }

    ///<summary>Offset to start the list from. eg: 25</summary>
    [JsonPropertyName("offset")]
    public long? Offset { get; init; }

    ///<summary>Sort the list by this field. eg: random</summary>
    [JsonPropertyName("order_by")]
    public object? OrderBy { get; init; }

    ///<summary>Filter albums by type. eg: single</summary>
    [JsonPropertyName("album_type")]
    public IEnumerable<object>? AlbumType { get; init; }

    ///<summary>Only return album artists when listing the artists library items. eg: true</summary>
    [JsonPropertyName("album_artists_only")]
    public bool? AlbumArtistsOnly { get; init; }
}

public partial record MusicAssistantPlayAnnouncementParameters
{
    ///<summary>URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</summary>
    [JsonPropertyName("use_pre_announce")]
    public bool? UsePreAnnounce { get; init; }

    ///<summary>Use a forced volume level for the announcement. Omit to use player default. eg: 75</summary>
    [JsonPropertyName("announce_volume")]
    public long? AnnounceVolume { get; init; }
}

public partial record MusicAssistantPlayMediaParameters
{
    ///<summary>URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</summary>
    [JsonPropertyName("media_id")]
    public object? MediaId { get; init; }

    ///<summary>The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</summary>
    [JsonPropertyName("media_type")]
    public object? MediaType { get; init; }

    ///<summary>When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</summary>
    [JsonPropertyName("artist")]
    public string? Artist { get; init; }

    ///<summary>When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</summary>
    [JsonPropertyName("album")]
    public string? Album { get; init; }

    ///<summary>If the content should be played now or added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>Enable radio mode to auto-generate a playlist based on the selection.</summary>
    [JsonPropertyName("radio_mode")]
    public bool? RadioMode { get; init; }
}

public partial record MusicAssistantSearchParameters
{
    ///<summary>Select the Music Assistant instance to perform the search on.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>The name/title to search for. eg: We Are The Champions</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</summary>
    [JsonPropertyName("media_type")]
    public IEnumerable<object>? MediaType { get; init; }

    ///<summary>When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</summary>
    [JsonPropertyName("artist")]
    public string? Artist { get; init; }

    ///<summary>When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</summary>
    [JsonPropertyName("album")]
    public string? Album { get; init; }

    ///<summary>Maximum number of items to return (per media type). eg: 25</summary>
    [JsonPropertyName("limit")]
    public long? Limit { get; init; }

    ///<summary>Only include results that are in the library. eg: true</summary>
    [JsonPropertyName("library_only")]
    public bool? LibraryOnly { get; init; }
}

public partial record MusicAssistantTransferQueueParameters
{
    ///<summary>The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</summary>
    [JsonPropertyName("source_player")]
    public string? SourcePlayer { get; init; }

    ///<summary>Start playing the queue on the target player. Omit to use the default behavior. eg: true</summary>
    [JsonPropertyName("auto_play")]
    public bool? AutoPlay { get; init; }
}

public partial class NetatmoServices
{
    private readonly IHaContext _haContext;
    public NetatmoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears any temperature setting for a Netatmo climate device reverting it to the current preset or schedule.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearTemperatureSetting(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("netatmo", "clear_temperature_setting", target, data);
    }

    ///<summary>Registers the webhook to the Netatmo backend.</summary>
    public void RegisterWebhook(object? data = null)
    {
        _haContext.CallService("netatmo", "register_webhook", null, data);
    }

    ///<summary>Sets the light mode for a Netatmo Outdoor camera light.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCameraLight(ServiceTarget target, NetatmoSetCameraLightParameters data)
    {
        _haContext.CallService("netatmo", "set_camera_light", target, data);
    }

    ///<summary>Sets the light mode for a Netatmo Outdoor camera light.</summary>
    ///<param name="cameraLightMode">Outdoor camera light mode.</param>
    public void SetCameraLight(ServiceTarget target, object cameraLightMode)
    {
        _haContext.CallService("netatmo", "set_camera_light", target, new NetatmoSetCameraLightParameters { CameraLightMode = cameraLightMode });
    }

    ///<summary>Sets a person as away. If no person is set the home will be marked as empty. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPersonAway(ServiceTarget target, NetatmoSetPersonAwayParameters data)
    {
        _haContext.CallService("netatmo", "set_person_away", target, data);
    }

    ///<summary>Sets a person as away. If no person is set the home will be marked as empty. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="person">Person&apos;s name. eg: Bob</param>
    public void SetPersonAway(ServiceTarget target, string? person = null)
    {
        _haContext.CallService("netatmo", "set_person_away", target, new NetatmoSetPersonAwayParameters { Person = person });
    }

    ///<summary>Sets a list of persons as at home. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPersonsHome(ServiceTarget target, NetatmoSetPersonsHomeParameters data)
    {
        _haContext.CallService("netatmo", "set_persons_home", target, data);
    }

    ///<summary>Sets a list of persons as at home. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="persons">List of names. eg: [Alice, Bob]</param>
    public void SetPersonsHome(ServiceTarget target, object persons)
    {
        _haContext.CallService("netatmo", "set_persons_home", target, new NetatmoSetPersonsHomeParameters { Persons = persons });
    }

    ///<summary>Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetModeWithEndDatetime(ServiceTarget target, NetatmoSetPresetModeWithEndDatetimeParameters data)
    {
        _haContext.CallService("netatmo", "set_preset_mode_with_end_datetime", target, data);
    }

    ///<summary>Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.</summary>
    ///<param name="presetMode">Climate preset mode such as Schedule, Away or Frost Guard. eg: away</param>
    ///<param name="endDatetime">Date &amp; time the preset will be active until. eg: &quot;2019-04-20 05:04:20&quot;</param>
    public void SetPresetModeWithEndDatetime(ServiceTarget target, object presetMode, DateTime endDatetime)
    {
        _haContext.CallService("netatmo", "set_preset_mode_with_end_datetime", target, new NetatmoSetPresetModeWithEndDatetimeParameters { PresetMode = presetMode, EndDatetime = endDatetime });
    }

    ///<summary>Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSchedule(ServiceTarget target, NetatmoSetScheduleParameters data)
    {
        _haContext.CallService("netatmo", "set_schedule", target, data);
    }

    ///<summary>Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.</summary>
    ///<param name="scheduleName">Schedule name. eg: Standard</param>
    public void SetSchedule(ServiceTarget target, string scheduleName)
    {
        _haContext.CallService("netatmo", "set_schedule", target, new NetatmoSetScheduleParameters { ScheduleName = scheduleName });
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with an end date &amp; time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperatureWithEndDatetime(ServiceTarget target, NetatmoSetTemperatureWithEndDatetimeParameters data)
    {
        _haContext.CallService("netatmo", "set_temperature_with_end_datetime", target, data);
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with an end date &amp; time.</summary>
    ///<param name="targetTemperature">The target temperature for the device. eg: 19.5</param>
    ///<param name="endDatetime">Date &amp; time the target temperature will be active until. eg: &quot;2019-04-20 05:04:20&quot;</param>
    public void SetTemperatureWithEndDatetime(ServiceTarget target, double targetTemperature, DateTime endDatetime)
    {
        _haContext.CallService("netatmo", "set_temperature_with_end_datetime", target, new NetatmoSetTemperatureWithEndDatetimeParameters { TargetTemperature = targetTemperature, EndDatetime = endDatetime });
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with time period.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperatureWithTimePeriod(ServiceTarget target, NetatmoSetTemperatureWithTimePeriodParameters data)
    {
        _haContext.CallService("netatmo", "set_temperature_with_time_period", target, data);
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with time period.</summary>
    ///<param name="targetTemperature">The target temperature for the device. eg: 19.5</param>
    ///<param name="timePeriod">The time period which the temperature setting will be active for.</param>
    public void SetTemperatureWithTimePeriod(ServiceTarget target, double targetTemperature, object timePeriod)
    {
        _haContext.CallService("netatmo", "set_temperature_with_time_period", target, new NetatmoSetTemperatureWithTimePeriodParameters { TargetTemperature = targetTemperature, TimePeriod = timePeriod });
    }

    ///<summary>Unregisters the webhook from the Netatmo backend.</summary>
    public void UnregisterWebhook(object? data = null)
    {
        _haContext.CallService("netatmo", "unregister_webhook", null, data);
    }
}

public partial record NetatmoSetCameraLightParameters
{
    ///<summary>Outdoor camera light mode.</summary>
    [JsonPropertyName("camera_light_mode")]
    public object? CameraLightMode { get; init; }
}

public partial record NetatmoSetPersonAwayParameters
{
    ///<summary>Person&apos;s name. eg: Bob</summary>
    [JsonPropertyName("person")]
    public string? Person { get; init; }
}

public partial record NetatmoSetPersonsHomeParameters
{
    ///<summary>List of names. eg: [Alice, Bob]</summary>
    [JsonPropertyName("persons")]
    public object? Persons { get; init; }
}

public partial record NetatmoSetPresetModeWithEndDatetimeParameters
{
    ///<summary>Climate preset mode such as Schedule, Away or Frost Guard. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public object? PresetMode { get; init; }

    ///<summary>Date &amp; time the preset will be active until. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("end_datetime")]
    public DateTime? EndDatetime { get; init; }
}

public partial record NetatmoSetScheduleParameters
{
    ///<summary>Schedule name. eg: Standard</summary>
    [JsonPropertyName("schedule_name")]
    public string? ScheduleName { get; init; }
}

public partial record NetatmoSetTemperatureWithEndDatetimeParameters
{
    ///<summary>The target temperature for the device. eg: 19.5</summary>
    [JsonPropertyName("target_temperature")]
    public double? TargetTemperature { get; init; }

    ///<summary>Date &amp; time the target temperature will be active until. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("end_datetime")]
    public DateTime? EndDatetime { get; init; }
}

public partial record NetatmoSetTemperatureWithTimePeriodParameters
{
    ///<summary>The target temperature for the device. eg: 19.5</summary>
    [JsonPropertyName("target_temperature")]
    public double? TargetTemperature { get; init; }

    ///<summary>The time period which the temperature setting will be active for.</summary>
    [JsonPropertyName("time_period")]
    public object? TimePeriod { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps(object? data = null)
    {
        _haContext.CallService("netdaemon", "reload_apps", null, data);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_samsung_dorota integration.</summary>
    public void MobileAppSamsungDorota(NotifyMobileAppSamsungDorotaParameters data)
    {
        _haContext.CallService("notify", "mobile_app_samsung_dorota", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_samsung_dorota integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSamsungDorota(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_samsung_dorota", null, new NotifyMobileAppSamsungDorotaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_samsung_tablet integration.</summary>
    public void MobileAppSamsungTablet(NotifyMobileAppSamsungTabletParameters data)
    {
        _haContext.CallService("notify", "mobile_app_samsung_tablet", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_samsung_tablet integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSamsungTablet(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_samsung_tablet", null, new NotifyMobileAppSamsungTabletParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_telefon_kuba integration.</summary>
    public void MobileAppTelefonKuba(NotifyMobileAppTelefonKubaParameters data)
    {
        _haContext.CallService("notify", "mobile_app_telefon_kuba", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_telefon_kuba integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppTelefonKuba(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_telefon_kuba", null, new NotifyMobileAppTelefonKubaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_ticwatch_pro_5 integration.</summary>
    public void MobileAppTicwatchPro5(NotifyMobileAppTicwatchPro5Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_ticwatch_pro_5", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_ticwatch_pro_5 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppTicwatchPro5(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_ticwatch_pro_5", null, new NotifyMobileAppTicwatchPro5Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyMobileAppSamsungDorotaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSamsungTabletParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppTelefonKubaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppTicwatchPro5Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OpenaiConversationServices
{
    private readonly IHaContext _haContext;
    public OpenaiConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a conversational query to ChatGPT including any attached image or PDF files</summary>
    public void GenerateContent(OpenaiConversationGenerateContentParameters data)
    {
        _haContext.CallService("openai_conversation", "generate_content", null, data);
    }

    ///<summary>Sends a conversational query to ChatGPT including any attached image or PDF files</summary>
    ///<param name="configEntry">The config entry to use for this action</param>
    ///<param name="prompt">The prompt to send eg: Hello, how can I help you?</param>
    ///<param name="filenames">List of files to upload eg: - /path/to/file1.txt - /path/to/file2.txt </param>
    public void GenerateContent(object configEntry, string prompt, string? filenames = null)
    {
        _haContext.CallService("openai_conversation", "generate_content", null, new OpenaiConversationGenerateContentParameters { ConfigEntry = configEntry, Prompt = prompt, Filenames = filenames });
    }

    ///<summary>Sends a conversational query to ChatGPT including any attached image or PDF files</summary>
    public Task<JsonElement?> GenerateContentAsync(OpenaiConversationGenerateContentParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("openai_conversation", "generate_content", null, data);
    }

    ///<summary>Sends a conversational query to ChatGPT including any attached image or PDF files</summary>
    ///<param name="configEntry">The config entry to use for this action</param>
    ///<param name="prompt">The prompt to send eg: Hello, how can I help you?</param>
    ///<param name="filenames">List of files to upload eg: - /path/to/file1.txt - /path/to/file2.txt </param>
    public Task<JsonElement?> GenerateContentAsync(object configEntry, string prompt, string? filenames = null)
    {
        return _haContext.CallServiceWithResponseAsync("openai_conversation", "generate_content", null, new OpenaiConversationGenerateContentParameters { ConfigEntry = configEntry, Prompt = prompt, Filenames = filenames });
    }

    ///<summary>Turns a prompt into an image</summary>
    public void GenerateImage(OpenaiConversationGenerateImageParameters data)
    {
        _haContext.CallService("openai_conversation", "generate_image", null, data);
    }

    ///<summary>Turns a prompt into an image</summary>
    ///<param name="configEntry">The config entry to use for this action</param>
    ///<param name="prompt">The text to turn into an image eg: A photo of a dog</param>
    ///<param name="size">The size of the image to generate eg: 1024x1024</param>
    ///<param name="quality">The quality of the image that will be generated eg: standard</param>
    ///<param name="style">The style of the generated image eg: vivid</param>
    public void GenerateImage(object configEntry, string prompt, object? size = null, object? quality = null, object? style = null)
    {
        _haContext.CallService("openai_conversation", "generate_image", null, new OpenaiConversationGenerateImageParameters { ConfigEntry = configEntry, Prompt = prompt, Size = size, Quality = quality, Style = style });
    }

    ///<summary>Turns a prompt into an image</summary>
    public Task<JsonElement?> GenerateImageAsync(OpenaiConversationGenerateImageParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("openai_conversation", "generate_image", null, data);
    }

    ///<summary>Turns a prompt into an image</summary>
    ///<param name="configEntry">The config entry to use for this action</param>
    ///<param name="prompt">The text to turn into an image eg: A photo of a dog</param>
    ///<param name="size">The size of the image to generate eg: 1024x1024</param>
    ///<param name="quality">The quality of the image that will be generated eg: standard</param>
    ///<param name="style">The style of the generated image eg: vivid</param>
    public Task<JsonElement?> GenerateImageAsync(object configEntry, string prompt, object? size = null, object? quality = null, object? style = null)
    {
        return _haContext.CallServiceWithResponseAsync("openai_conversation", "generate_image", null, new OpenaiConversationGenerateImageParameters { ConfigEntry = configEntry, Prompt = prompt, Size = size, Quality = quality, Style = style });
    }
}

public partial record OpenaiConversationGenerateContentParameters
{
    ///<summary>The config entry to use for this action</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>The prompt to send eg: Hello, how can I help you?</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>List of files to upload eg: - /path/to/file1.txt - /path/to/file2.txt </summary>
    [JsonPropertyName("filenames")]
    public string? Filenames { get; init; }
}

public partial record OpenaiConversationGenerateImageParameters
{
    ///<summary>The config entry to use for this action</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>The text to turn into an image eg: A photo of a dog</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>The size of the image to generate eg: 1024x1024</summary>
    [JsonPropertyName("size")]
    public object? Size { get; init; }

    ///<summary>The quality of the image that will be generated eg: standard</summary>
    [JsonPropertyName("quality")]
    public object? Quality { get; init; }

    ///<summary>The style of the generated image eg: vivid</summary>
    [JsonPropertyName("style")]
    public object? Style { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class PythonScriptServices
{
    private readonly IHaContext _haContext;
    public PythonScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all available Python scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("python_script", "reload", null, data);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    public void GetStatistics(RecorderGetStatisticsParameters data)
    {
        _haContext.CallService("recorder", "get_statistics", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    ///<param name="startTime">The start time for the statistics query. eg: 2025-01-01 00:00:00</param>
    ///<param name="endTime">The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</param>
    ///<param name="statisticIds">The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</param>
    ///<param name="period">The time period to group statistics by. eg: hour</param>
    ///<param name="types">The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</param>
    ///<param name="units">Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</param>
    public void GetStatistics(DateTime startTime, IEnumerable<string> statisticIds, object period, IEnumerable<object> types, DateTime? endTime = null, object? units = null)
    {
        _haContext.CallService("recorder", "get_statistics", null, new RecorderGetStatisticsParameters { StartTime = startTime, EndTime = endTime, StatisticIds = statisticIds, Period = period, Types = types, Units = units });
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    public Task<JsonElement?> GetStatisticsAsync(RecorderGetStatisticsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("recorder", "get_statistics", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    ///<param name="startTime">The start time for the statistics query. eg: 2025-01-01 00:00:00</param>
    ///<param name="endTime">The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</param>
    ///<param name="statisticIds">The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</param>
    ///<param name="period">The time period to group statistics by. eg: hour</param>
    ///<param name="types">The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</param>
    ///<param name="units">Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</param>
    public Task<JsonElement?> GetStatisticsAsync(DateTime startTime, IEnumerable<string> statisticIds, object period, IEnumerable<object> types, DateTime? endTime = null, object? units = null)
    {
        return _haContext.CallServiceWithResponseAsync("recorder", "get_statistics", null, new RecorderGetStatisticsParameters { StartTime = startTime, EndTime = endTime, StatisticIds = statisticIds, Period = period, Types = types, Units = units });
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the Recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the Recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderGetStatisticsParameters
{
    ///<summary>The start time for the statistics query. eg: 2025-01-01 00:00:00</summary>
    [JsonPropertyName("start_time")]
    public DateTime? StartTime { get; init; }

    ///<summary>The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</summary>
    [JsonPropertyName("end_time")]
    public DateTime? EndTime { get; init; }

    ///<summary>The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</summary>
    [JsonPropertyName("statistic_ids")]
    public IEnumerable<string>? StatisticIds { get; init; }

    ///<summary>The time period to group statistics by. eg: hour</summary>
    [JsonPropertyName("period")]
    public object? Period { get; init; }

    ///<summary>The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</summary>
    [JsonPropertyName("types")]
    public IEnumerable<object>? Types { get; init; }

    ///<summary>Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</summary>
    [JsonPropertyName("units")]
    public object? Units { get; init; }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the Recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the Recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Sends the turn off command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public double? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetSchedule(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("schedule", "get_schedule", target, data);
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetScheduleAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("schedule", "get_schedule", target, data);
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void CloseAllDoors(object? data = null)
    {
        _haContext.CallService("script", "close_all_doors", null, data);
    }

    public Task<JsonElement?> CloseAllDoorsAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "close_all_doors", null, data);
    }

    public void OpenAllDoors(object? data = null)
    {
        _haContext.CallService("script", "open_all_doors", null, data);
    }

    public Task<JsonElement?> OpenAllDoorsAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "open_all_doors", null, data);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    public void ToggleAll(object? data = null)
    {
        _haContext.CallService("script", "toggle_all", null, data);
    }

    public Task<JsonElement?> ToggleAllAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "toggle_all", null, data);
    }

    public void ToggleGarageDoors(object? data = null)
    {
        _haContext.CallService("script", "toggle_garage_doors", null, data);
    }

    public Task<JsonElement?> ToggleGarageDoorsAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "toggle_garage_doors", null, data);
    }

    public void ToggleGate(object? data = null)
    {
        _haContext.CallService("script", "toggle_gate", null, data);
    }

    public Task<JsonElement?> ToggleGateAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "toggle_gate", null, data);
    }

    public void ToggleNight(object? data = null)
    {
        _haContext.CallService("script", "toggle_night", null, data);
    }

    public Task<JsonElement?> ToggleNightAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "toggle_night", null, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SonoffServices
{
    private readonly IHaContext _haContext;
    public SonoffServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a command to a device.</summary>
    public void SendCommand(SonoffSendCommandParameters data)
    {
        _haContext.CallService("sonoff", "send_command", null, data);
    }

    ///<summary>Sends a command to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 1000123456</param>
    ///<param name="cmd">A single command to send. eg: switch</param>
    public void SendCommand(object? device = null, object? cmd = null)
    {
        _haContext.CallService("sonoff", "send_command", null, new SonoffSendCommandParameters { Device = device, Cmd = cmd });
    }
}

public partial record SonoffSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 1000123456</summary>
    [JsonPropertyName("device")]
    public object? Device { get; init; }

    ///<summary>A single command to send. eg: switch</summary>
    [JsonPropertyName("cmd")]
    public object? Cmd { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("template", "reload", null, data);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, TimeOnly time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UnifiServices
{
    private readonly IHaContext _haContext;
    public UnifiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    public void ReconnectClient(UnifiReconnectClientParameters data)
    {
        _haContext.CallService("unifi", "reconnect_client", null, data);
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    ///<param name="deviceId">The device that should be forced to reconnect to the wireless network.</param>
    public void ReconnectClient(string deviceId)
    {
        _haContext.CallService("unifi", "reconnect_client", null, new UnifiReconnectClientParameters { DeviceId = deviceId });
    }

    ///<summary>Cleans up clients that have only been associated with the controller for a short period of time.</summary>
    public void RemoveClients(object? data = null)
    {
        _haContext.CallService("unifi", "remove_clients", null, data);
    }
}

public partial record UnifiReconnectClientParameters
{
    ///<summary>The device that should be forced to reconnect to the wireless network.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "clean_spot", target, data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "locate", target, data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "pause", target, data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "return_to_base", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "start", target, data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "stop", target, data);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class ValveServices
{
    private readonly IHaContext _haContext;
    public ValveServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseValve(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "close_valve", target, data);
    }

    ///<summary>Opens a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenValve(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "open_valve", target, data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValvePosition(ServiceTarget target, ValveSetValvePositionParameters data)
    {
        _haContext.CallService("valve", "set_valve_position", target, data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetValvePosition(ServiceTarget target, double position)
    {
        _haContext.CallService("valve", "set_valve_position", target, new ValveSetValvePositionParameters { Position = position });
    }

    ///<summary>Stops the valve movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopValve(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "stop_valve", target, data);
    }

    ///<summary>Toggles a valve open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("valve", "toggle", target, data);
    }
}

public partial record ValveSetValvePositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_off", target, data);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_on", target, data);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="type">The scope of the weather forecast.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>The scope of the weather forecast.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, double endpointId, double clusterId, double command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issues a command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, double clusterId, double command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be combined with the &apos;Install code&apos; field). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be combined with the &apos;Source IEEE&apos; field). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Provides both the IEEE address and the install code of the joining device (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(double? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, double endpointId, double clusterId, double attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, double? mode = null, double? strobe = null, double? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, double? mode = null, double? strobe = null, double? level = null, double? duration = null, long? dutyCycle = null, double? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be combined with the &apos;Install code&apos; field). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be combined with the &apos;Source IEEE&apos; field). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Provides both the IEEE address and the install code of the joining device (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public double? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public double? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Arms the alarm in the away mode.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class DahuaEntityExtensionMethods
{
    ///<summary>Enables of disables all IVS rules based on the supplied &apos;enabled&apos; param</summary>
    public static void EnableAllIvsRules(this ICameraEntityCore target, DahuaEnableAllIvsRulesParameters data)
    {
        target.CallService("enable_all_ivs_rules", data);
    }

    ///<summary>Enables of disables all IVS rules based on the supplied &apos;enabled&apos; param</summary>
    public static void EnableAllIvsRules(this IEnumerable<ICameraEntityCore> target, DahuaEnableAllIvsRulesParameters data)
    {
        target.CallService("enable_all_ivs_rules", data);
    }

    ///<summary>Enables of disables all IVS rules based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="enabled">If true all IVS rules are enabled. If false, all are disabled eg: True</param>
    public static void EnableAllIvsRules(this ICameraEntityCore target, bool enabled)
    {
        target.CallService("enable_all_ivs_rules", new DahuaEnableAllIvsRulesParameters { Enabled = enabled });
    }

    ///<summary>Enables of disables all IVS rules based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="enabled">If true all IVS rules are enabled. If false, all are disabled eg: True</param>
    public static void EnableAllIvsRules(this IEnumerable<ICameraEntityCore> target, bool enabled)
    {
        target.CallService("enable_all_ivs_rules", new DahuaEnableAllIvsRulesParameters { Enabled = enabled });
    }

    ///<summary>Enables or disable the channel title video overaly</summary>
    public static void EnableChannelTitle(this ICameraEntityCore target, DahuaEnableChannelTitleParameters data)
    {
        target.CallService("enable_channel_title", data);
    }

    ///<summary>Enables or disable the channel title video overaly</summary>
    public static void EnableChannelTitle(this IEnumerable<ICameraEntityCore> target, DahuaEnableChannelTitleParameters data)
    {
        target.CallService("enable_channel_title", data);
    }

    ///<summary>Enables or disable the channel title video overaly</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableChannelTitle(this ICameraEntityCore target, bool enabled)
    {
        target.CallService("enable_channel_title", new DahuaEnableChannelTitleParameters { Enabled = enabled });
    }

    ///<summary>Enables or disable the channel title video overaly</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableChannelTitle(this IEnumerable<ICameraEntityCore> target, bool enabled)
    {
        target.CallService("enable_channel_title", new DahuaEnableChannelTitleParameters { Enabled = enabled });
    }

    ///<summary>Enables or disable the channel custom text video overaly</summary>
    public static void EnableCustomOverlay(this ICameraEntityCore target, DahuaEnableCustomOverlayParameters data)
    {
        target.CallService("enable_custom_overlay", data);
    }

    ///<summary>Enables or disable the channel custom text video overaly</summary>
    public static void EnableCustomOverlay(this IEnumerable<ICameraEntityCore> target, DahuaEnableCustomOverlayParameters data)
    {
        target.CallService("enable_custom_overlay", data);
    }

    ///<summary>Enables or disable the channel custom text video overaly</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="group">Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableCustomOverlay(this ICameraEntityCore target, double @group, bool enabled)
    {
        target.CallService("enable_custom_overlay", new DahuaEnableCustomOverlayParameters { Group = @group, Enabled = enabled });
    }

    ///<summary>Enables or disable the channel custom text video overaly</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="group">Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableCustomOverlay(this IEnumerable<ICameraEntityCore> target, double @group, bool enabled)
    {
        target.CallService("enable_custom_overlay", new DahuaEnableCustomOverlayParameters { Group = @group, Enabled = enabled });
    }

    ///<summary>Enables of disable a single IVS rule based on the supplied &apos;enabled&apos; param</summary>
    public static void EnableIvsRule(this ICameraEntityCore target, DahuaEnableIvsRuleParameters data)
    {
        target.CallService("enable_ivs_rule", data);
    }

    ///<summary>Enables of disable a single IVS rule based on the supplied &apos;enabled&apos; param</summary>
    public static void EnableIvsRule(this IEnumerable<ICameraEntityCore> target, DahuaEnableIvsRuleParameters data)
    {
        target.CallService("enable_ivs_rule", data);
    }

    ///<summary>Enables of disable a single IVS rule based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="index">The rule index. 0 is a hidden rule, so usually the first rule is rule 1 eg: 1</param>
    ///<param name="enabled">If true enables the IVS rule, otherwise disables it eg: True</param>
    public static void EnableIvsRule(this ICameraEntityCore target, double index, bool enabled)
    {
        target.CallService("enable_ivs_rule", new DahuaEnableIvsRuleParameters { Index = index, Enabled = enabled });
    }

    ///<summary>Enables of disable a single IVS rule based on the supplied &apos;enabled&apos; param</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="index">The rule index. 0 is a hidden rule, so usually the first rule is rule 1 eg: 1</param>
    ///<param name="enabled">If true enables the IVS rule, otherwise disables it eg: True</param>
    public static void EnableIvsRule(this IEnumerable<ICameraEntityCore> target, double index, bool enabled)
    {
        target.CallService("enable_ivs_rule", new DahuaEnableIvsRuleParameters { Index = index, Enabled = enabled });
    }

    ///<summary>Enables or disable the channel text video overaly</summary>
    public static void EnableTextOverlay(this ICameraEntityCore target, DahuaEnableTextOverlayParameters data)
    {
        target.CallService("enable_text_overlay", data);
    }

    ///<summary>Enables or disable the channel text video overaly</summary>
    public static void EnableTextOverlay(this IEnumerable<ICameraEntityCore> target, DahuaEnableTextOverlayParameters data)
    {
        target.CallService("enable_text_overlay", data);
    }

    ///<summary>Enables or disable the channel text video overaly</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="group">Multiple text overlay groups can exist. The default 1 should be used in most cases eg: 1</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableTextOverlay(this ICameraEntityCore target, double @group, bool enabled)
    {
        target.CallService("enable_text_overlay", new DahuaEnableTextOverlayParameters { Group = @group, Enabled = enabled });
    }

    ///<summary>Enables or disable the channel text video overaly</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="group">Multiple text overlay groups can exist. The default 1 should be used in most cases eg: 1</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableTextOverlay(this IEnumerable<ICameraEntityCore> target, double @group, bool enabled)
    {
        target.CallService("enable_text_overlay", new DahuaEnableTextOverlayParameters { Group = @group, Enabled = enabled });
    }

    ///<summary>Enables or disable the channel time video overaly</summary>
    public static void EnableTimeOverlay(this ICameraEntityCore target, DahuaEnableTimeOverlayParameters data)
    {
        target.CallService("enable_time_overlay", data);
    }

    ///<summary>Enables or disable the channel time video overaly</summary>
    public static void EnableTimeOverlay(this IEnumerable<ICameraEntityCore> target, DahuaEnableTimeOverlayParameters data)
    {
        target.CallService("enable_time_overlay", data);
    }

    ///<summary>Enables or disable the channel time video overaly</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableTimeOverlay(this ICameraEntityCore target, bool enabled)
    {
        target.CallService("enable_time_overlay", new DahuaEnableTimeOverlayParameters { Enabled = enabled });
    }

    ///<summary>Enables or disable the channel time video overaly</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="enabled">If the overlay is enabled or not eg: True</param>
    public static void EnableTimeOverlay(this IEnumerable<ICameraEntityCore> target, bool enabled)
    {
        target.CallService("enable_time_overlay", new DahuaEnableTimeOverlayParameters { Enabled = enabled });
    }

    ///<summary>Reboots the device</summary>
    public static void Reboot(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("reboot", data);
    }

    ///<summary>Reboots the device</summary>
    public static void Reboot(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("reboot", data);
    }

    ///<summary>Sets a title on the video</summary>
    public static void SetChannelTitle(this ICameraEntityCore target, DahuaSetChannelTitleParameters data)
    {
        target.CallService("set_channel_title", data);
    }

    ///<summary>Sets a title on the video</summary>
    public static void SetChannelTitle(this IEnumerable<ICameraEntityCore> target, DahuaSetChannelTitleParameters data)
    {
        target.CallService("set_channel_title", data);
    }

    ///<summary>Sets a title on the video</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="text1">The first title eg: Front Porch</param>
    ///<param name="text2">The second title eg: House</param>
    public static void SetChannelTitle(this ICameraEntityCore target, string? text1 = null, string? text2 = null)
    {
        target.CallService("set_channel_title", new DahuaSetChannelTitleParameters { Text1 = text1, Text2 = text2 });
    }

    ///<summary>Sets a title on the video</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="text1">The first title eg: Front Porch</param>
    ///<param name="text2">The second title eg: House</param>
    public static void SetChannelTitle(this IEnumerable<ICameraEntityCore> target, string? text1 = null, string? text2 = null)
    {
        target.CallService("set_channel_title", new DahuaSetChannelTitleParameters { Text1 = text1, Text2 = text2 });
    }

    ///<summary>Sets a custom text overlay on the video</summary>
    public static void SetCustomOverlay(this ICameraEntityCore target, DahuaSetCustomOverlayParameters data)
    {
        target.CallService("set_custom_overlay", data);
    }

    ///<summary>Sets a custom text overlay on the video</summary>
    public static void SetCustomOverlay(this IEnumerable<ICameraEntityCore> target, DahuaSetCustomOverlayParameters data)
    {
        target.CallService("set_custom_overlay", data);
    }

    ///<summary>Sets a custom text overlay on the video</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="group">Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</param>
    ///<param name="text1">Custom overlay 1 eg: Text 1</param>
    ///<param name="text2">Custom overlay 2 eg: Text 2</param>
    public static void SetCustomOverlay(this ICameraEntityCore target, double @group, string? text1 = null, string? text2 = null)
    {
        target.CallService("set_custom_overlay", new DahuaSetCustomOverlayParameters { Group = @group, Text1 = text1, Text2 = text2 });
    }

    ///<summary>Sets a custom text overlay on the video</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="group">Multiple custom text groups can exist. The default 0 should be used in most cases eg: 0</param>
    ///<param name="text1">Custom overlay 1 eg: Text 1</param>
    ///<param name="text2">Custom overlay 2 eg: Text 2</param>
    public static void SetCustomOverlay(this IEnumerable<ICameraEntityCore> target, double @group, string? text1 = null, string? text2 = null)
    {
        target.CallService("set_custom_overlay", new DahuaSetCustomOverlayParameters { Group = @group, Text1 = text1, Text2 = text2 });
    }

    ///<summary>Sets the camera&apos;s focus and zoom</summary>
    public static void SetFocusZoom(this ICameraEntityCore target, DahuaSetFocusZoomParameters data)
    {
        target.CallService("set_focus_zoom", data);
    }

    ///<summary>Sets the camera&apos;s focus and zoom</summary>
    public static void SetFocusZoom(this IEnumerable<ICameraEntityCore> target, DahuaSetFocusZoomParameters data)
    {
        target.CallService("set_focus_zoom", data);
    }

    ///<summary>Sets the camera&apos;s focus and zoom</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="focus">Decimal Value for Focus eg: 0.758333</param>
    ///<param name="zoom">Decimal value for zoom eg: 0.898502</param>
    public static void SetFocusZoom(this ICameraEntityCore target, string focus, string zoom)
    {
        target.CallService("set_focus_zoom", new DahuaSetFocusZoomParameters { Focus = focus, Zoom = zoom });
    }

    ///<summary>Sets the camera&apos;s focus and zoom</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="focus">Decimal Value for Focus eg: 0.758333</param>
    ///<param name="zoom">Decimal value for zoom eg: 0.898502</param>
    public static void SetFocusZoom(this IEnumerable<ICameraEntityCore> target, string focus, string zoom)
    {
        target.CallService("set_focus_zoom", new DahuaSetFocusZoomParameters { Focus = focus, Zoom = zoom });
    }

    ///<summary>Set the infrared light settings on a Dahua camera</summary>
    public static void SetInfraredMode(this ICameraEntityCore target, DahuaSetInfraredModeParameters data)
    {
        target.CallService("set_infrared_mode", data);
    }

    ///<summary>Set the infrared light settings on a Dahua camera</summary>
    public static void SetInfraredMode(this IEnumerable<ICameraEntityCore> target, DahuaSetInfraredModeParameters data)
    {
        target.CallService("set_infrared_mode", data);
    }

    ///<summary>Set the infrared light settings on a Dahua camera</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mode">The infrared mode: Auto, On, Off eg: Auto</param>
    ///<param name="brightness">The infrared brightness, from 0 to 100 inclusive. 100 is the brightest eg: 100</param>
    public static void SetInfraredMode(this ICameraEntityCore target, object? mode = null, long? brightness = null)
    {
        target.CallService("set_infrared_mode", new DahuaSetInfraredModeParameters { Mode = mode, Brightness = brightness });
    }

    ///<summary>Set the infrared light settings on a Dahua camera</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mode">The infrared mode: Auto, On, Off eg: Auto</param>
    ///<param name="brightness">The infrared brightness, from 0 to 100 inclusive. 100 is the brightest eg: 100</param>
    public static void SetInfraredMode(this IEnumerable<ICameraEntityCore> target, object? mode = null, long? brightness = null)
    {
        target.CallService("set_infrared_mode", new DahuaSetInfraredModeParameters { Mode = mode, Brightness = brightness });
    }

    ///<summary>Enables or disabled the cameras privacy masking</summary>
    public static void SetPrivacyMasking(this ICameraEntityCore target, DahuaSetPrivacyMaskingParameters data)
    {
        target.CallService("set_privacy_masking", data);
    }

    ///<summary>Enables or disabled the cameras privacy masking</summary>
    public static void SetPrivacyMasking(this IEnumerable<ICameraEntityCore> target, DahuaSetPrivacyMaskingParameters data)
    {
        target.CallService("set_privacy_masking", data);
    }

    ///<summary>Enables or disabled the cameras privacy masking</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="index">The mask index. 0 is the first mask eg: 0</param>
    ///<param name="enabled">If true enables the mask, otherwise disables it eg: True</param>
    public static void SetPrivacyMasking(this ICameraEntityCore target, double index, bool enabled)
    {
        target.CallService("set_privacy_masking", new DahuaSetPrivacyMaskingParameters { Index = index, Enabled = enabled });
    }

    ///<summary>Enables or disabled the cameras privacy masking</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="index">The mask index. 0 is the first mask eg: 0</param>
    ///<param name="enabled">If true enables the mask, otherwise disables it eg: True</param>
    public static void SetPrivacyMasking(this IEnumerable<ICameraEntityCore> target, double index, bool enabled)
    {
        target.CallService("set_privacy_masking", new DahuaSetPrivacyMaskingParameters { Index = index, Enabled = enabled });
    }

    ///<summary>Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.</summary>
    public static void SetRecordMode(this ICameraEntityCore target, DahuaSetRecordModeParameters data)
    {
        target.CallService("set_record_mode", data);
    }

    ///<summary>Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.</summary>
    public static void SetRecordMode(this IEnumerable<ICameraEntityCore> target, DahuaSetRecordModeParameters data)
    {
        target.CallService("set_record_mode", data);
    }

    ///<summary>Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mode">The mode: Auto, On, Off eg: Auto</param>
    public static void SetRecordMode(this ICameraEntityCore target, object? mode = null)
    {
        target.CallService("set_record_mode", new DahuaSetRecordModeParameters { Mode = mode });
    }

    ///<summary>Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mode">The mode: Auto, On, Off eg: Auto</param>
    public static void SetRecordMode(this IEnumerable<ICameraEntityCore> target, object? mode = null)
    {
        target.CallService("set_record_mode", new DahuaSetRecordModeParameters { Mode = mode });
    }

    ///<summary>Sets a text overlay on the video</summary>
    public static void SetTextOverlay(this ICameraEntityCore target, DahuaSetTextOverlayParameters data)
    {
        target.CallService("set_text_overlay", data);
    }

    ///<summary>Sets a text overlay on the video</summary>
    public static void SetTextOverlay(this IEnumerable<ICameraEntityCore> target, DahuaSetTextOverlayParameters data)
    {
        target.CallService("set_text_overlay", data);
    }

    ///<summary>Sets a text overlay on the video</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="group">Multiple custom text groups can exist. The default 1 should be used in most cases eg: 1</param>
    ///<param name="text1">Text overlay 1 eg: Text 1</param>
    ///<param name="text2">Text overlay 2 eg: Text 2</param>
    ///<param name="text3">Text overlay 3 eg: Text 3</param>
    ///<param name="text4">Text overlay 4 eg: Text 4</param>
    public static void SetTextOverlay(this ICameraEntityCore target, double @group, string? text1 = null, string? text2 = null, string? text3 = null, string? text4 = null)
    {
        target.CallService("set_text_overlay", new DahuaSetTextOverlayParameters { Group = @group, Text1 = text1, Text2 = text2, Text3 = text3, Text4 = text4 });
    }

    ///<summary>Sets a text overlay on the video</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="group">Multiple custom text groups can exist. The default 1 should be used in most cases eg: 1</param>
    ///<param name="text1">Text overlay 1 eg: Text 1</param>
    ///<param name="text2">Text overlay 2 eg: Text 2</param>
    ///<param name="text3">Text overlay 3 eg: Text 3</param>
    ///<param name="text4">Text overlay 4 eg: Text 4</param>
    public static void SetTextOverlay(this IEnumerable<ICameraEntityCore> target, double @group, string? text1 = null, string? text2 = null, string? text3 = null, string? text4 = null)
    {
        target.CallService("set_text_overlay", new DahuaSetTextOverlayParameters { Group = @group, Text1 = text1, Text2 = text2, Text3 = text3, Text4 = text4 });
    }

    ///<summary>Set the camera&apos;s Day/Night Mode. For example, Color, BlackWhite, or Auto</summary>
    public static void SetVideoInDayNightMode(this ICameraEntityCore target, DahuaSetVideoInDayNightModeParameters data)
    {
        target.CallService("set_video_in_day_night_mode", data);
    }

    ///<summary>Set the camera&apos;s Day/Night Mode. For example, Color, BlackWhite, or Auto</summary>
    public static void SetVideoInDayNightMode(this IEnumerable<ICameraEntityCore> target, DahuaSetVideoInDayNightModeParameters data)
    {
        target.CallService("set_video_in_day_night_mode", data);
    }

    ///<summary>Set the camera&apos;s Day/Night Mode. For example, Color, BlackWhite, or Auto</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="configType">The config type: general, day, night eg: general</param>
    ///<param name="mode">The mode: Auto, Color, BlackWhite. Note Auto is also known as Brightness by Dahua eg: Auto</param>
    public static void SetVideoInDayNightMode(this ICameraEntityCore target, object? configType = null, object? mode = null)
    {
        target.CallService("set_video_in_day_night_mode", new DahuaSetVideoInDayNightModeParameters { ConfigType = configType, Mode = mode });
    }

    ///<summary>Set the camera&apos;s Day/Night Mode. For example, Color, BlackWhite, or Auto</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="configType">The config type: general, day, night eg: general</param>
    ///<param name="mode">The mode: Auto, Color, BlackWhite. Note Auto is also known as Brightness by Dahua eg: Auto</param>
    public static void SetVideoInDayNightMode(this IEnumerable<ICameraEntityCore> target, object? configType = null, object? mode = null)
    {
        target.CallService("set_video_in_day_night_mode", new DahuaSetVideoInDayNightModeParameters { ConfigType = configType, Mode = mode });
    }

    ///<summary>Sets the video profile mode to day or night</summary>
    public static void SetVideoProfileMode(this ICameraEntityCore target, DahuaSetVideoProfileModeParameters data)
    {
        target.CallService("set_video_profile_mode", data);
    }

    ///<summary>Sets the video profile mode to day or night</summary>
    public static void SetVideoProfileMode(this IEnumerable<ICameraEntityCore> target, DahuaSetVideoProfileModeParameters data)
    {
        target.CallService("set_video_profile_mode", data);
    }

    ///<summary>Sets the video profile mode to day or night</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mode">The profile: Day, Night eg: Day</param>
    public static void SetVideoProfileMode(this ICameraEntityCore target, object? mode = null)
    {
        target.CallService("set_video_profile_mode", new DahuaSetVideoProfileModeParameters { Mode = mode });
    }

    ///<summary>Sets the video profile mode to day or night</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mode">The profile: Day, Night eg: Day</param>
    public static void SetVideoProfileMode(this IEnumerable<ICameraEntityCore> target, object? mode = null)
    {
        target.CallService("set_video_profile_mode", new DahuaSetVideoProfileModeParameters { Mode = mode });
    }

    ///<summary>Cancels a VTO call</summary>
    public static void VtoCancelCall(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("vto_cancel_call", data);
    }

    ///<summary>Cancels a VTO call</summary>
    public static void VtoCancelCall(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("vto_cancel_call", data);
    }

    ///<summary>Open a door via a VTO (Doorbell) for supported devices</summary>
    public static void VtoOpenDoor(this ICameraEntityCore target, DahuaVtoOpenDoorParameters data)
    {
        target.CallService("vto_open_door", data);
    }

    ///<summary>Open a door via a VTO (Doorbell) for supported devices</summary>
    public static void VtoOpenDoor(this IEnumerable<ICameraEntityCore> target, DahuaVtoOpenDoorParameters data)
    {
        target.CallService("vto_open_door", data);
    }

    ///<summary>Open a door via a VTO (Doorbell) for supported devices</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="doorId">The door ID. Default is 1 eg: 1</param>
    public static void VtoOpenDoor(this ICameraEntityCore target, double doorId)
    {
        target.CallService("vto_open_door", new DahuaVtoOpenDoorParameters { DoorId = doorId });
    }

    ///<summary>Open a door via a VTO (Doorbell) for supported devices</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="doorId">The door ID. Default is 1 eg: 1</param>
    public static void VtoOpenDoor(this IEnumerable<ICameraEntityCore> target, double doorId)
    {
        target.CallService("vto_open_door", new DahuaVtoOpenDoorParameters { DoorId = doorId });
    }
}

public static class DenonavrEntityExtensionMethods
{
    ///<summary>Sends a generic HTTP get command.</summary>
    public static void GetCommand(this IMediaPlayerEntityCore target, DenonavrGetCommandParameters data)
    {
        target.CallService("get_command", data);
    }

    ///<summary>Sends a generic HTTP get command.</summary>
    public static void GetCommand(this IEnumerable<IMediaPlayerEntityCore> target, DenonavrGetCommandParameters data)
    {
        target.CallService("get_command", data);
    }

    ///<summary>Sends a generic HTTP get command.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="command">Endpoint of the command, including associated parameters. eg: /goform/formiPhoneAppDirect.xml?RCKSK0410370</param>
    public static void GetCommand(this IMediaPlayerEntityCore target, string command)
    {
        target.CallService("get_command", new DenonavrGetCommandParameters { Command = command });
    }

    ///<summary>Sends a generic HTTP get command.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="command">Endpoint of the command, including associated parameters. eg: /goform/formiPhoneAppDirect.xml?RCKSK0410370</param>
    public static void GetCommand(this IEnumerable<IMediaPlayerEntityCore> target, string command)
    {
        target.CallService("get_command", new DenonavrGetCommandParameters { Command = command });
    }

    ///<summary>Enables or disables DynamicEQ.</summary>
    public static void SetDynamicEq(this IMediaPlayerEntityCore target, DenonavrSetDynamicEqParameters data)
    {
        target.CallService("set_dynamic_eq", data);
    }

    ///<summary>Enables or disables DynamicEQ.</summary>
    public static void SetDynamicEq(this IEnumerable<IMediaPlayerEntityCore> target, DenonavrSetDynamicEqParameters data)
    {
        target.CallService("set_dynamic_eq", data);
    }

    ///<summary>Enables or disables DynamicEQ.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="dynamicEq">Whether DynamicEQ should be enabled or disabled.</param>
    public static void SetDynamicEq(this IMediaPlayerEntityCore target, bool? dynamicEq = null)
    {
        target.CallService("set_dynamic_eq", new DenonavrSetDynamicEqParameters { DynamicEq = dynamicEq });
    }

    ///<summary>Enables or disables DynamicEQ.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="dynamicEq">Whether DynamicEQ should be enabled or disabled.</param>
    public static void SetDynamicEq(this IEnumerable<IMediaPlayerEntityCore> target, bool? dynamicEq = null)
    {
        target.CallService("set_dynamic_eq", new DenonavrSetDynamicEqParameters { DynamicEq = dynamicEq });
    }

    ///<summary>Updates Audyssey settings.</summary>
    public static void UpdateAudyssey(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("update_audyssey", data);
    }

    ///<summary>Updates Audyssey settings.</summary>
    public static void UpdateAudyssey(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("update_audyssey", data);
    }
}

public static class DreameVacuumEntityExtensionMethods
{
    ///<summary>Select the first option of an select entity.</summary>
    public static void SelectSelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_select_first", data);
    }

    ///<summary>Select the first option of an select entity.</summary>
    public static void SelectSelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_select_first", data);
    }

    ///<summary>Select the last option of an select entity.</summary>
    public static void SelectSelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_select_last", data);
    }

    ///<summary>Select the last option of an select entity.</summary>
    public static void SelectSelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_select_last", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    public static void SelectSelectNext(this ISelectEntityCore target, DreameVacuumSelectSelectNextParameters data)
    {
        target.CallService("select_select_next", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    public static void SelectSelectNext(this IEnumerable<ISelectEntityCore> target, DreameVacuumSelectSelectNextParameters data)
    {
        target.CallService("select_select_next", data);
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectSelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_select_next", new DreameVacuumSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next options of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectSelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_select_next", new DreameVacuumSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    public static void SelectSelectPrevious(this ISelectEntityCore target, DreameVacuumSelectSelectPreviousParameters data)
    {
        target.CallService("select_select_previous", data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    public static void SelectSelectPrevious(this IEnumerable<ISelectEntityCore> target, DreameVacuumSelectSelectPreviousParameters data)
    {
        target.CallService("select_select_previous", data);
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectSelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_select_previous", new DreameVacuumSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Select the previous options of an select entity.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectSelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_select_previous", new DreameVacuumSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Start the cleaning operation in the selected rooms.</summary>
    public static void VacuumCleanSegment(this IVacuumEntityCore target, DreameVacuumVacuumCleanSegmentParameters data)
    {
        target.CallService("vacuum_clean_segment", data);
    }

    ///<summary>Start the cleaning operation in the selected rooms.</summary>
    public static void VacuumCleanSegment(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumCleanSegmentParameters data)
    {
        target.CallService("vacuum_clean_segment", data);
    }

    ///<summary>Start the cleaning operation in the selected rooms.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="segments">List of rooms to be cleaned. Only room&apos;s Character or an array of room&apos;s character, cleaning times, fan speed and mop mode to override the default values per room. eg: [3,2] or 3</param>
    ///<param name="repeats">Number of cleaning passes for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,2] or 1</param>
    ///<param name="suctionLevel">Fan speed for every selected room (unless it is overridden by customized cleaning parameter). eg: [0,3] or 0</param>
    ///<param name="waterVolume">Water level for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,3] or 1</param>
    public static void VacuumCleanSegment(this IVacuumEntityCore target, object segments, double? repeats = null, double? suctionLevel = null, double? waterVolume = null)
    {
        target.CallService("vacuum_clean_segment", new DreameVacuumVacuumCleanSegmentParameters { Segments = segments, Repeats = repeats, SuctionLevel = suctionLevel, WaterVolume = waterVolume });
    }

    ///<summary>Start the cleaning operation in the selected rooms.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="segments">List of rooms to be cleaned. Only room&apos;s Character or an array of room&apos;s character, cleaning times, fan speed and mop mode to override the default values per room. eg: [3,2] or 3</param>
    ///<param name="repeats">Number of cleaning passes for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,2] or 1</param>
    ///<param name="suctionLevel">Fan speed for every selected room (unless it is overridden by customized cleaning parameter). eg: [0,3] or 0</param>
    ///<param name="waterVolume">Water level for every selected room (unless it is overridden by customized cleaning parameter). eg: [1,3] or 1</param>
    public static void VacuumCleanSegment(this IEnumerable<IVacuumEntityCore> target, object segments, double? repeats = null, double? suctionLevel = null, double? waterVolume = null)
    {
        target.CallService("vacuum_clean_segment", new DreameVacuumVacuumCleanSegmentParameters { Segments = segments, Repeats = repeats, SuctionLevel = suctionLevel, WaterVolume = waterVolume });
    }

    ///<summary>Start the cleaning operation in the selected points on the map.</summary>
    public static void VacuumCleanSpot(this IVacuumEntityCore target, DreameVacuumVacuumCleanSpotParameters data)
    {
        target.CallService("vacuum_clean_spot", data);
    }

    ///<summary>Start the cleaning operation in the selected points on the map.</summary>
    public static void VacuumCleanSpot(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumCleanSpotParameters data)
    {
        target.CallService("vacuum_clean_spot", data);
    }

    ///<summary>Start the cleaning operation in the selected points on the map.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="points">List of coordinates to be cleaned. eg: [819,-263] or [[819,-263],[819,-263]]</param>
    ///<param name="repeats">Number of cleaning passes for every selected zone. eg: [1,2] or 1</param>
    ///<param name="suctionLevel">Fan speed for every selected zone. eg: [0,3] or 0</param>
    ///<param name="waterVolume">Water level for every selected zone. eg: [1,3] or 1</param>
    public static void VacuumCleanSpot(this IVacuumEntityCore target, object points, double? repeats = null, double? suctionLevel = null, double? waterVolume = null)
    {
        target.CallService("vacuum_clean_spot", new DreameVacuumVacuumCleanSpotParameters { Points = points, Repeats = repeats, SuctionLevel = suctionLevel, WaterVolume = waterVolume });
    }

    ///<summary>Start the cleaning operation in the selected points on the map.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="points">List of coordinates to be cleaned. eg: [819,-263] or [[819,-263],[819,-263]]</param>
    ///<param name="repeats">Number of cleaning passes for every selected zone. eg: [1,2] or 1</param>
    ///<param name="suctionLevel">Fan speed for every selected zone. eg: [0,3] or 0</param>
    ///<param name="waterVolume">Water level for every selected zone. eg: [1,3] or 1</param>
    public static void VacuumCleanSpot(this IEnumerable<IVacuumEntityCore> target, object points, double? repeats = null, double? suctionLevel = null, double? waterVolume = null)
    {
        target.CallService("vacuum_clean_spot", new DreameVacuumVacuumCleanSpotParameters { Points = points, Repeats = repeats, SuctionLevel = suctionLevel, WaterVolume = waterVolume });
    }

    ///<summary>Start the cleaning operation in the selected area.</summary>
    public static void VacuumCleanZone(this IVacuumEntityCore target, DreameVacuumVacuumCleanZoneParameters data)
    {
        target.CallService("vacuum_clean_zone", data);
    }

    ///<summary>Start the cleaning operation in the selected area.</summary>
    public static void VacuumCleanZone(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumCleanZoneParameters data)
    {
        target.CallService("vacuum_clean_zone", data);
    }

    ///<summary>Start the cleaning operation in the selected area.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="zone">Coordinates. eg: [819,-263,4424,2105] or [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="repeats">Number of cleaning passes for every selected zone. eg: [1,3] or 1</param>
    public static void VacuumCleanZone(this IVacuumEntityCore target, object zone, double? repeats = null)
    {
        target.CallService("vacuum_clean_zone", new DreameVacuumVacuumCleanZoneParameters { Zone = zone, Repeats = repeats });
    }

    ///<summary>Start the cleaning operation in the selected area.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="zone">Coordinates. eg: [819,-263,4424,2105] or [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="repeats">Number of cleaning passes for every selected zone. eg: [1,3] or 1</param>
    public static void VacuumCleanZone(this IEnumerable<IVacuumEntityCore> target, object zone, double? repeats = null)
    {
        target.CallService("vacuum_clean_zone", new DreameVacuumVacuumCleanZoneParameters { Zone = zone, Repeats = repeats });
    }

    ///<summary>Delete a map.</summary>
    public static void VacuumDeleteMap(this IVacuumEntityCore target, DreameVacuumVacuumDeleteMapParameters data)
    {
        target.CallService("vacuum_delete_map", data);
    }

    ///<summary>Delete a map.</summary>
    public static void VacuumDeleteMap(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumDeleteMapParameters data)
    {
        target.CallService("vacuum_delete_map", data);
    }

    ///<summary>Delete a map.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="mapId">ID of the map to be deleted. eg: 14</param>
    public static void VacuumDeleteMap(this IVacuumEntityCore target, double? mapId = null)
    {
        target.CallService("vacuum_delete_map", new DreameVacuumVacuumDeleteMapParameters { MapId = mapId });
    }

    ///<summary>Delete a map.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="mapId">ID of the map to be deleted. eg: 14</param>
    public static void VacuumDeleteMap(this IEnumerable<IVacuumEntityCore> target, double? mapId = null)
    {
        target.CallService("vacuum_delete_map", new DreameVacuumVacuumDeleteMapParameters { MapId = mapId });
    }

    ///<summary>Discard the temporary map.</summary>
    public static void VacuumDiscardTemporaryMap(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("vacuum_discard_temporary_map", data);
    }

    ///<summary>Discard the temporary map.</summary>
    public static void VacuumDiscardTemporaryMap(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("vacuum_discard_temporary_map", data);
    }

    ///<summary>Install official or custom voice pack.</summary>
    public static void VacuumInstallVoicePack(this IVacuumEntityCore target, DreameVacuumVacuumInstallVoicePackParameters data)
    {
        target.CallService("vacuum_install_voice_pack", data);
    }

    ///<summary>Install official or custom voice pack.</summary>
    public static void VacuumInstallVoicePack(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumInstallVoicePackParameters data)
    {
        target.CallService("vacuum_install_voice_pack", data);
    }

    ///<summary>Install official or custom voice pack.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="langId">Language ID of this pack. eg: DE</param>
    ///<param name="url">Url of this pack it should be reachable by the vacuum bot. eg: http://awsde0.fds.api.xiaomi.com/dreame-product/dreame.vacuum.p2009/voices/package/deyu.tar.gz</param>
    ///<param name="md5">MD5 checksum of the language pack. eg: d25986c1f608c0897475707e77d856f9</param>
    ///<param name="size">Size of the language pack in bytes. eg: 4067845</param>
    public static void VacuumInstallVoicePack(this IVacuumEntityCore target, string langId, string url, string md5, double size)
    {
        target.CallService("vacuum_install_voice_pack", new DreameVacuumVacuumInstallVoicePackParameters { LangId = langId, Url = url, Md5 = md5, Size = size });
    }

    ///<summary>Install official or custom voice pack.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="langId">Language ID of this pack. eg: DE</param>
    ///<param name="url">Url of this pack it should be reachable by the vacuum bot. eg: http://awsde0.fds.api.xiaomi.com/dreame-product/dreame.vacuum.p2009/voices/package/deyu.tar.gz</param>
    ///<param name="md5">MD5 checksum of the language pack. eg: d25986c1f608c0897475707e77d856f9</param>
    ///<param name="size">Size of the language pack in bytes. eg: 4067845</param>
    public static void VacuumInstallVoicePack(this IEnumerable<IVacuumEntityCore> target, string langId, string url, string md5, double size)
    {
        target.CallService("vacuum_install_voice_pack", new DreameVacuumVacuumInstallVoicePackParameters { LangId = langId, Url = url, Md5 = md5, Size = size });
    }

    ///<summary>Merge rooms.</summary>
    public static void VacuumMergeSegments(this IVacuumEntityCore target, DreameVacuumVacuumMergeSegmentsParameters data)
    {
        target.CallService("vacuum_merge_segments", data);
    }

    ///<summary>Merge rooms.</summary>
    public static void VacuumMergeSegments(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumMergeSegmentsParameters data)
    {
        target.CallService("vacuum_merge_segments", data);
    }

    ///<summary>Merge rooms.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="segments">Room IDs. eg: [3,2]</param>
    public static void VacuumMergeSegments(this IVacuumEntityCore target, object segments, string? mapId = null)
    {
        target.CallService("vacuum_merge_segments", new DreameVacuumVacuumMergeSegmentsParameters { MapId = mapId, Segments = segments });
    }

    ///<summary>Merge rooms.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="segments">Room IDs. eg: [3,2]</param>
    public static void VacuumMergeSegments(this IEnumerable<IVacuumEntityCore> target, object segments, string? mapId = null)
    {
        target.CallService("vacuum_merge_segments", new DreameVacuumVacuumMergeSegmentsParameters { MapId = mapId, Segments = segments });
    }

    ///<summary>Remotely control move the bot one step.</summary>
    public static void VacuumRemoteControlMoveStep(this IVacuumEntityCore target, DreameVacuumVacuumRemoteControlMoveStepParameters data)
    {
        target.CallService("vacuum_remote_control_move_step", data);
    }

    ///<summary>Remotely control move the bot one step.</summary>
    public static void VacuumRemoteControlMoveStep(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumRemoteControlMoveStepParameters data)
    {
        target.CallService("vacuum_remote_control_move_step", data);
    }

    ///<summary>Remotely control move the bot one step.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="rotation">Turn in binary degrees between -128 and 128. eg: 64</param>
    ///<param name="velocity">Move speed, from 100 (forward) to -300 (backward). eg: 100</param>
    public static void VacuumRemoteControlMoveStep(this IVacuumEntityCore target, double rotation, double velocity)
    {
        target.CallService("vacuum_remote_control_move_step", new DreameVacuumVacuumRemoteControlMoveStepParameters { Rotation = rotation, Velocity = velocity });
    }

    ///<summary>Remotely control move the bot one step.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="rotation">Turn in binary degrees between -128 and 128. eg: 64</param>
    ///<param name="velocity">Move speed, from 100 (forward) to -300 (backward). eg: 100</param>
    public static void VacuumRemoteControlMoveStep(this IEnumerable<IVacuumEntityCore> target, double rotation, double velocity)
    {
        target.CallService("vacuum_remote_control_move_step", new DreameVacuumVacuumRemoteControlMoveStepParameters { Rotation = rotation, Velocity = velocity });
    }

    ///<summary>Rename a map.</summary>
    public static void VacuumRenameMap(this IVacuumEntityCore target, DreameVacuumVacuumRenameMapParameters data)
    {
        target.CallService("vacuum_rename_map", data);
    }

    ///<summary>Rename a map.</summary>
    public static void VacuumRenameMap(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumRenameMapParameters data)
    {
        target.CallService("vacuum_rename_map", data);
    }

    ///<summary>Rename a map.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="mapName">New name of the map. eg: Ground Floor</param>
    public static void VacuumRenameMap(this IVacuumEntityCore target, string mapId, string mapName)
    {
        target.CallService("vacuum_rename_map", new DreameVacuumVacuumRenameMapParameters { MapId = mapId, MapName = mapName });
    }

    ///<summary>Rename a map.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="mapName">New name of the map. eg: Ground Floor</param>
    public static void VacuumRenameMap(this IEnumerable<IVacuumEntityCore> target, string mapId, string mapName)
    {
        target.CallService("vacuum_rename_map", new DreameVacuumVacuumRenameMapParameters { MapId = mapId, MapName = mapName });
    }

    ///<summary>Rename a segment.</summary>
    public static void VacuumRenameSegment(this IVacuumEntityCore target, DreameVacuumVacuumRenameSegmentParameters data)
    {
        target.CallService("vacuum_rename_segment", data);
    }

    ///<summary>Rename a segment.</summary>
    public static void VacuumRenameSegment(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumRenameSegmentParameters data)
    {
        target.CallService("vacuum_rename_segment", data);
    }

    ///<summary>Rename a segment.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="segmentId">ID of the segment eg: 3</param>
    ///<param name="segmentName">New name of the segment eg: Playroom</param>
    public static void VacuumRenameSegment(this IVacuumEntityCore target, double segmentId, string segmentName)
    {
        target.CallService("vacuum_rename_segment", new DreameVacuumVacuumRenameSegmentParameters { SegmentId = segmentId, SegmentName = segmentName });
    }

    ///<summary>Rename a segment.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="segmentId">ID of the segment eg: 3</param>
    ///<param name="segmentName">New name of the segment eg: Playroom</param>
    public static void VacuumRenameSegment(this IEnumerable<IVacuumEntityCore> target, double segmentId, string segmentName)
    {
        target.CallService("vacuum_rename_segment", new DreameVacuumVacuumRenameSegmentParameters { SegmentId = segmentId, SegmentName = segmentName });
    }

    ///<summary>Replace the temporary map with another saved map.</summary>
    public static void VacuumReplaceTemporaryMap(this IVacuumEntityCore target, DreameVacuumVacuumReplaceTemporaryMapParameters data)
    {
        target.CallService("vacuum_replace_temporary_map", data);
    }

    ///<summary>Replace the temporary map with another saved map.</summary>
    public static void VacuumReplaceTemporaryMap(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumReplaceTemporaryMapParameters data)
    {
        target.CallService("vacuum_replace_temporary_map", data);
    }

    ///<summary>Replace the temporary map with another saved map.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="mapId">ID of the map to be replaced with. eg: 14</param>
    public static void VacuumReplaceTemporaryMap(this IVacuumEntityCore target, double? mapId = null)
    {
        target.CallService("vacuum_replace_temporary_map", new DreameVacuumVacuumReplaceTemporaryMapParameters { MapId = mapId });
    }

    ///<summary>Replace the temporary map with another saved map.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="mapId">ID of the map to be replaced with. eg: 14</param>
    public static void VacuumReplaceTemporaryMap(this IEnumerable<IVacuumEntityCore> target, double? mapId = null)
    {
        target.CallService("vacuum_replace_temporary_map", new DreameVacuumVacuumReplaceTemporaryMapParameters { MapId = mapId });
    }

    ///<summary>Request map data</summary>
    public static void VacuumRequestMap(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("vacuum_request_map", data);
    }

    ///<summary>Request map data</summary>
    public static void VacuumRequestMap(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("vacuum_request_map", data);
    }

    ///<summary>Reset a consumable.</summary>
    public static void VacuumResetConsumable(this IVacuumEntityCore target, DreameVacuumVacuumResetConsumableParameters data)
    {
        target.CallService("vacuum_reset_consumable", data);
    }

    ///<summary>Reset a consumable.</summary>
    public static void VacuumResetConsumable(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumResetConsumableParameters data)
    {
        target.CallService("vacuum_reset_consumable", data);
    }

    ///<summary>Reset a consumable.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="consumable">Consumable type.</param>
    public static void VacuumResetConsumable(this IVacuumEntityCore target, object consumable)
    {
        target.CallService("vacuum_reset_consumable", new DreameVacuumVacuumResetConsumableParameters { Consumable = consumable });
    }

    ///<summary>Reset a consumable.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="consumable">Consumable type.</param>
    public static void VacuumResetConsumable(this IEnumerable<IVacuumEntityCore> target, object consumable)
    {
        target.CallService("vacuum_reset_consumable", new DreameVacuumVacuumResetConsumableParameters { Consumable = consumable });
    }

    ///<summary>Save the temporary map.</summary>
    public static void VacuumSaveTemporaryMap(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("vacuum_save_temporary_map", data);
    }

    ///<summary>Save the temporary map.</summary>
    public static void VacuumSaveTemporaryMap(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("vacuum_save_temporary_map", data);
    }

    ///<summary>Select current map. Used when having multiple maps/floors.</summary>
    public static void VacuumSelectMap(this IVacuumEntityCore target, DreameVacuumVacuumSelectMapParameters data)
    {
        target.CallService("vacuum_select_map", data);
    }

    ///<summary>Select current map. Used when having multiple maps/floors.</summary>
    public static void VacuumSelectMap(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumSelectMapParameters data)
    {
        target.CallService("vacuum_select_map", data);
    }

    ///<summary>Select current map. Used when having multiple maps/floors.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="mapId">ID of the map to be selected. eg: 14</param>
    public static void VacuumSelectMap(this IVacuumEntityCore target, double mapId)
    {
        target.CallService("vacuum_select_map", new DreameVacuumVacuumSelectMapParameters { MapId = mapId });
    }

    ///<summary>Select current map. Used when having multiple maps/floors.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="mapId">ID of the map to be selected. eg: 14</param>
    public static void VacuumSelectMap(this IEnumerable<IVacuumEntityCore> target, double mapId)
    {
        target.CallService("vacuum_select_map", new DreameVacuumVacuumSelectMapParameters { MapId = mapId });
    }

    ///<summary>Set room cleaning sequence. (Only on supported devices)</summary>
    public static void VacuumSetCleaningSequence(this IVacuumEntityCore target, DreameVacuumVacuumSetCleaningSequenceParameters data)
    {
        target.CallService("vacuum_set_cleaning_sequence", data);
    }

    ///<summary>Set room cleaning sequence. (Only on supported devices)</summary>
    public static void VacuumSetCleaningSequence(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumSetCleaningSequenceParameters data)
    {
        target.CallService("vacuum_set_cleaning_sequence", data);
    }

    ///<summary>Set room cleaning sequence. (Only on supported devices)</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="cleaningSequence">Segment ID list of cleaning sequence. eg: [5,3,2,1,4] or []</param>
    public static void VacuumSetCleaningSequence(this IVacuumEntityCore target, object cleaningSequence)
    {
        target.CallService("vacuum_set_cleaning_sequence", new DreameVacuumVacuumSetCleaningSequenceParameters { CleaningSequence = cleaningSequence });
    }

    ///<summary>Set room cleaning sequence. (Only on supported devices)</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="cleaningSequence">Segment ID list of cleaning sequence. eg: [5,3,2,1,4] or []</param>
    public static void VacuumSetCleaningSequence(this IEnumerable<IVacuumEntityCore> target, object cleaningSequence)
    {
        target.CallService("vacuum_set_cleaning_sequence", new DreameVacuumVacuumSetCleaningSequenceParameters { CleaningSequence = cleaningSequence });
    }

    ///<summary>Set custom cleaning parameters. (Only on supported devices)</summary>
    public static void VacuumSetCustomCleaning(this IVacuumEntityCore target, DreameVacuumVacuumSetCustomCleaningParameters data)
    {
        target.CallService("vacuum_set_custom_cleaning", data);
    }

    ///<summary>Set custom cleaning parameters. (Only on supported devices)</summary>
    public static void VacuumSetCustomCleaning(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumSetCustomCleaningParameters data)
    {
        target.CallService("vacuum_set_custom_cleaning", data);
    }

    ///<summary>Set custom cleaning parameters. (Only on supported devices)</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="segmentId">Room IDs. eg: [1,2,3,4,5]</param>
    ///<param name="suctionLevel">Suction level for each room. eg: [0,0,2,3,1]</param>
    ///<param name="waterVolume">Water volume for each room. eg: [1,1,2,3,1]</param>
    ///<param name="repeats">Cleaning times for each room. eg: [2,2,1,3,1]</param>
    public static void VacuumSetCustomCleaning(this IVacuumEntityCore target, object segmentId, object suctionLevel, object waterVolume, object repeats)
    {
        target.CallService("vacuum_set_custom_cleaning", new DreameVacuumVacuumSetCustomCleaningParameters { SegmentId = segmentId, SuctionLevel = suctionLevel, WaterVolume = waterVolume, Repeats = repeats });
    }

    ///<summary>Set custom cleaning parameters. (Only on supported devices)</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="segmentId">Room IDs. eg: [1,2,3,4,5]</param>
    ///<param name="suctionLevel">Suction level for each room. eg: [0,0,2,3,1]</param>
    ///<param name="waterVolume">Water volume for each room. eg: [1,1,2,3,1]</param>
    ///<param name="repeats">Cleaning times for each room. eg: [2,2,1,3,1]</param>
    public static void VacuumSetCustomCleaning(this IEnumerable<IVacuumEntityCore> target, object segmentId, object suctionLevel, object waterVolume, object repeats)
    {
        target.CallService("vacuum_set_custom_cleaning", new DreameVacuumVacuumSetCustomCleaningParameters { SegmentId = segmentId, SuctionLevel = suctionLevel, WaterVolume = waterVolume, Repeats = repeats });
    }

    ///<summary>Enable/disable DnD functionality and/or setting its start and end time.</summary>
    public static void VacuumSetDnd(this IVacuumEntityCore target, DreameVacuumVacuumSetDndParameters data)
    {
        target.CallService("vacuum_set_dnd", data);
    }

    ///<summary>Enable/disable DnD functionality and/or setting its start and end time.</summary>
    public static void VacuumSetDnd(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumSetDndParameters data)
    {
        target.CallService("vacuum_set_dnd", data);
    }

    ///<summary>Enable/disable DnD functionality and/or setting its start and end time.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="dndEnabled">Enable or disable DnD feature. eg: true</param>
    ///<param name="dndStart">Start time of DnD feature. eg: 22:00</param>
    ///<param name="dndEnd">End time of DnD feature. eg: 6:30</param>
    public static void VacuumSetDnd(this IVacuumEntityCore target, bool dndEnabled, string? dndStart = null, string? dndEnd = null)
    {
        target.CallService("vacuum_set_dnd", new DreameVacuumVacuumSetDndParameters { DndEnabled = dndEnabled, DndStart = dndStart, DndEnd = dndEnd });
    }

    ///<summary>Enable/disable DnD functionality and/or setting its start and end time.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="dndEnabled">Enable or disable DnD feature. eg: true</param>
    ///<param name="dndStart">Start time of DnD feature. eg: 22:00</param>
    ///<param name="dndEnd">End time of DnD feature. eg: 6:30</param>
    public static void VacuumSetDnd(this IEnumerable<IVacuumEntityCore> target, bool dndEnabled, string? dndStart = null, string? dndEnd = null)
    {
        target.CallService("vacuum_set_dnd", new DreameVacuumVacuumSetDndParameters { DndEnabled = dndEnabled, DndStart = dndStart, DndEnd = dndEnd });
    }

    ///<summary>Define virtual walls, restricted zones, and/or no mop zones.</summary>
    public static void VacuumSetRestrictedZone(this IVacuumEntityCore target, DreameVacuumVacuumSetRestrictedZoneParameters data)
    {
        target.CallService("vacuum_set_restricted_zone", data);
    }

    ///<summary>Define virtual walls, restricted zones, and/or no mop zones.</summary>
    public static void VacuumSetRestrictedZone(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumSetRestrictedZoneParameters data)
    {
        target.CallService("vacuum_set_restricted_zone", data);
    }

    ///<summary>Define virtual walls, restricted zones, and/or no mop zones.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="walls">Virtual walls. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="zones">No go zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="noMops">No mop zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    public static void VacuumSetRestrictedZone(this IVacuumEntityCore target, string? walls = null, string? zones = null, string? noMops = null)
    {
        target.CallService("vacuum_set_restricted_zone", new DreameVacuumVacuumSetRestrictedZoneParameters { Walls = walls, Zones = zones, NoMops = noMops });
    }

    ///<summary>Define virtual walls, restricted zones, and/or no mop zones.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="walls">Virtual walls. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="zones">No go zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    ///<param name="noMops">No mop zones. eg: [[819,-263,4424,2105],[-2001,-3050,-542,515]]</param>
    public static void VacuumSetRestrictedZone(this IEnumerable<IVacuumEntityCore> target, string? walls = null, string? zones = null, string? noMops = null)
    {
        target.CallService("vacuum_set_restricted_zone", new DreameVacuumVacuumSetRestrictedZoneParameters { Walls = walls, Zones = zones, NoMops = noMops });
    }

    ///<summary>Split rooms.</summary>
    public static void VacuumSplitSegments(this IVacuumEntityCore target, DreameVacuumVacuumSplitSegmentsParameters data)
    {
        target.CallService("vacuum_split_segments", data);
    }

    ///<summary>Split rooms.</summary>
    public static void VacuumSplitSegments(this IEnumerable<IVacuumEntityCore> target, DreameVacuumVacuumSplitSegmentsParameters data)
    {
        target.CallService("vacuum_split_segments", data);
    }

    ///<summary>Split rooms.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="segment">Room ID. eg: 3</param>
    ///<param name="line">Split line coordinates. eg: [819,-263,4424,2105]</param>
    public static void VacuumSplitSegments(this IVacuumEntityCore target, double segment, object line, string? mapId = null)
    {
        target.CallService("vacuum_split_segments", new DreameVacuumVacuumSplitSegmentsParameters { MapId = mapId, Segment = segment, Line = line });
    }

    ///<summary>Split rooms.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="mapId">ID of the map. eg: 14</param>
    ///<param name="segment">Room ID. eg: 3</param>
    ///<param name="line">Split line coordinates. eg: [819,-263,4424,2105]</param>
    public static void VacuumSplitSegments(this IEnumerable<IVacuumEntityCore> target, double segment, object line, string? mapId = null)
    {
        target.CallService("vacuum_split_segments", new DreameVacuumVacuumSplitSegmentsParameters { MapId = mapId, Segment = segment, Line = line });
    }
}

public static class HeosEntityExtensionMethods
{
    ///<summary>Retrieves the queue of the media player.</summary>
    public static Task<JsonElement?> GetQueueAsync(this IMediaPlayerEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("get_queue", data);
    }

    ///<summary>Retrieves the queue of the media player.</summary>
    public static void GetQueue(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("get_queue", data);
    }

    ///<summary>Retrieves the queue of the media player.</summary>
    public static void GetQueue(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("get_queue", data);
    }

    ///<summary>Turns down the group volume.</summary>
    public static void GroupVolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("group_volume_down", data);
    }

    ///<summary>Turns down the group volume.</summary>
    public static void GroupVolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("group_volume_down", data);
    }

    ///<summary>Sets the group&apos;s volume while preserving member volume ratios.</summary>
    public static void GroupVolumeSet(this IMediaPlayerEntityCore target, HeosGroupVolumeSetParameters data)
    {
        target.CallService("group_volume_set", data);
    }

    ///<summary>Sets the group&apos;s volume while preserving member volume ratios.</summary>
    public static void GroupVolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, HeosGroupVolumeSetParameters data)
    {
        target.CallService("group_volume_set", data);
    }

    ///<summary>Sets the group&apos;s volume while preserving member volume ratios.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void GroupVolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("group_volume_set", new HeosGroupVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the group&apos;s volume while preserving member volume ratios.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void GroupVolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("group_volume_set", new HeosGroupVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the group volume.</summary>
    public static void GroupVolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("group_volume_up", data);
    }

    ///<summary>Turns up the group volume.</summary>
    public static void GroupVolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("group_volume_up", data);
    }

    ///<summary>Moves one or more items within the play queue.</summary>
    public static void MoveQueueItem(this IMediaPlayerEntityCore target, HeosMoveQueueItemParameters data)
    {
        target.CallService("move_queue_item", data);
    }

    ///<summary>Moves one or more items within the play queue.</summary>
    public static void MoveQueueItem(this IEnumerable<IMediaPlayerEntityCore> target, HeosMoveQueueItemParameters data)
    {
        target.CallService("move_queue_item", data);
    }

    ///<summary>Moves one or more items within the play queue.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="queueIds">The IDs (indexes) of the items in the queue to move.</param>
    ///<param name="destinationPosition">The position index in the queue to move the items to.</param>
    public static void MoveQueueItem(this IMediaPlayerEntityCore target, IEnumerable<string> queueIds, long destinationPosition)
    {
        target.CallService("move_queue_item", new HeosMoveQueueItemParameters { QueueIds = queueIds, DestinationPosition = destinationPosition });
    }

    ///<summary>Moves one or more items within the play queue.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="queueIds">The IDs (indexes) of the items in the queue to move.</param>
    ///<param name="destinationPosition">The position index in the queue to move the items to.</param>
    public static void MoveQueueItem(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> queueIds, long destinationPosition)
    {
        target.CallService("move_queue_item", new HeosMoveQueueItemParameters { QueueIds = queueIds, DestinationPosition = destinationPosition });
    }

    ///<summary>Removes items from the play queue.</summary>
    public static void RemoveFromQueue(this IMediaPlayerEntityCore target, HeosRemoveFromQueueParameters data)
    {
        target.CallService("remove_from_queue", data);
    }

    ///<summary>Removes items from the play queue.</summary>
    public static void RemoveFromQueue(this IEnumerable<IMediaPlayerEntityCore> target, HeosRemoveFromQueueParameters data)
    {
        target.CallService("remove_from_queue", data);
    }

    ///<summary>Removes items from the play queue.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="queueIds">The IDs (indexes) of the items in the queue to remove.</param>
    public static void RemoveFromQueue(this IMediaPlayerEntityCore target, IEnumerable<string> queueIds)
    {
        target.CallService("remove_from_queue", new HeosRemoveFromQueueParameters { QueueIds = queueIds });
    }

    ///<summary>Removes items from the play queue.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="queueIds">The IDs (indexes) of the items in the queue to remove.</param>
    public static void RemoveFromQueue(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> queueIds)
    {
        target.CallService("remove_from_queue", new HeosRemoveFromQueueParameters { QueueIds = queueIds });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Browses the available media.</summary>
    public static Task<JsonElement?> BrowseMediaAsync(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        return target.CallServiceWithResponseAsync("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static Task<JsonElement?> BrowseMediaAsync(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        return target.CallServiceWithResponseAsync("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Searches the available media.</summary>
    public static Task<JsonElement?> SearchMediaAsync(this IMediaPlayerEntityCore target, MediaPlayerSearchMediaParameters data)
    {
        return target.CallServiceWithResponseAsync("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static Task<JsonElement?> SearchMediaAsync(this IMediaPlayerEntityCore target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        return target.CallServiceWithResponseAsync("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    public static void SearchMedia(this IMediaPlayerEntityCore target, MediaPlayerSearchMediaParameters data)
    {
        target.CallService("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    public static void SearchMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSearchMediaParameters data)
    {
        target.CallService("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static void SearchMedia(this IMediaPlayerEntityCore target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        target.CallService("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static void SearchMedia(this IEnumerable<IMediaPlayerEntityCore> target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        target.CallService("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class MusicAssistantEntityExtensionMethods
{
    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    public static Task<JsonElement?> GetQueueAsync(this IMediaPlayerEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("get_queue", data);
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    public static void GetQueue(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("get_queue", data);
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    public static void GetQueue(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("get_queue", data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayAnnouncement(this IMediaPlayerEntityCore target, MusicAssistantPlayAnnouncementParameters data)
    {
        target.CallService("play_announcement", data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayAnnouncement(this IEnumerable<IMediaPlayerEntityCore> target, MusicAssistantPlayAnnouncementParameters data)
    {
        target.CallService("play_announcement", data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public static void PlayAnnouncement(this IMediaPlayerEntityCore target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        target.CallService("play_announcement", new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public static void PlayAnnouncement(this IEnumerable<IMediaPlayerEntityCore> target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        target.CallService("play_announcement", new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MusicAssistantPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MusicAssistantPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        target.CallService("play_media", new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        target.CallService("play_media", new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    public static void TransferQueue(this IMediaPlayerEntityCore target, MusicAssistantTransferQueueParameters data)
    {
        target.CallService("transfer_queue", data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    public static void TransferQueue(this IEnumerable<IMediaPlayerEntityCore> target, MusicAssistantTransferQueueParameters data)
    {
        target.CallService("transfer_queue", data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public static void TransferQueue(this IMediaPlayerEntityCore target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        target.CallService("transfer_queue", new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public static void TransferQueue(this IEnumerable<IMediaPlayerEntityCore> target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        target.CallService("transfer_queue", new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }
}

public static class NetatmoEntityExtensionMethods
{
    ///<summary>Clears any temperature setting for a Netatmo climate device reverting it to the current preset or schedule.</summary>
    public static void ClearTemperatureSetting(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("clear_temperature_setting", data);
    }

    ///<summary>Clears any temperature setting for a Netatmo climate device reverting it to the current preset or schedule.</summary>
    public static void ClearTemperatureSetting(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("clear_temperature_setting", data);
    }

    ///<summary>Sets the light mode for a Netatmo Outdoor camera light.</summary>
    public static void SetCameraLight(this ILightEntityCore target, NetatmoSetCameraLightParameters data)
    {
        target.CallService("set_camera_light", data);
    }

    ///<summary>Sets the light mode for a Netatmo Outdoor camera light.</summary>
    public static void SetCameraLight(this IEnumerable<ILightEntityCore> target, NetatmoSetCameraLightParameters data)
    {
        target.CallService("set_camera_light", data);
    }

    ///<summary>Sets the light mode for a Netatmo Outdoor camera light.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="cameraLightMode">Outdoor camera light mode.</param>
    public static void SetCameraLight(this ILightEntityCore target, object cameraLightMode)
    {
        target.CallService("set_camera_light", new NetatmoSetCameraLightParameters { CameraLightMode = cameraLightMode });
    }

    ///<summary>Sets the light mode for a Netatmo Outdoor camera light.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="cameraLightMode">Outdoor camera light mode.</param>
    public static void SetCameraLight(this IEnumerable<ILightEntityCore> target, object cameraLightMode)
    {
        target.CallService("set_camera_light", new NetatmoSetCameraLightParameters { CameraLightMode = cameraLightMode });
    }

    ///<summary>Sets a person as away. If no person is set the home will be marked as empty. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    public static void SetPersonAway(this ICameraEntityCore target, NetatmoSetPersonAwayParameters data)
    {
        target.CallService("set_person_away", data);
    }

    ///<summary>Sets a person as away. If no person is set the home will be marked as empty. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    public static void SetPersonAway(this IEnumerable<ICameraEntityCore> target, NetatmoSetPersonAwayParameters data)
    {
        target.CallService("set_person_away", data);
    }

    ///<summary>Sets a person as away. If no person is set the home will be marked as empty. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="person">Person&apos;s name. eg: Bob</param>
    public static void SetPersonAway(this ICameraEntityCore target, string? person = null)
    {
        target.CallService("set_person_away", new NetatmoSetPersonAwayParameters { Person = person });
    }

    ///<summary>Sets a person as away. If no person is set the home will be marked as empty. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="person">Person&apos;s name. eg: Bob</param>
    public static void SetPersonAway(this IEnumerable<ICameraEntityCore> target, string? person = null)
    {
        target.CallService("set_person_away", new NetatmoSetPersonAwayParameters { Person = person });
    }

    ///<summary>Sets a list of persons as at home. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    public static void SetPersonsHome(this ICameraEntityCore target, NetatmoSetPersonsHomeParameters data)
    {
        target.CallService("set_persons_home", data);
    }

    ///<summary>Sets a list of persons as at home. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    public static void SetPersonsHome(this IEnumerable<ICameraEntityCore> target, NetatmoSetPersonsHomeParameters data)
    {
        target.CallService("set_persons_home", data);
    }

    ///<summary>Sets a list of persons as at home. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="persons">List of names. eg: [Alice, Bob]</param>
    public static void SetPersonsHome(this ICameraEntityCore target, object persons)
    {
        target.CallService("set_persons_home", new NetatmoSetPersonsHomeParameters { Persons = persons });
    }

    ///<summary>Sets a list of persons as at home. Person&apos;s name must match a name known by the Netatmo Indoor (Welcome) Camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="persons">List of names. eg: [Alice, Bob]</param>
    public static void SetPersonsHome(this IEnumerable<ICameraEntityCore> target, object persons)
    {
        target.CallService("set_persons_home", new NetatmoSetPersonsHomeParameters { Persons = persons });
    }

    ///<summary>Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.</summary>
    public static void SetPresetModeWithEndDatetime(this IClimateEntityCore target, NetatmoSetPresetModeWithEndDatetimeParameters data)
    {
        target.CallService("set_preset_mode_with_end_datetime", data);
    }

    ///<summary>Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.</summary>
    public static void SetPresetModeWithEndDatetime(this IEnumerable<IClimateEntityCore> target, NetatmoSetPresetModeWithEndDatetimeParameters data)
    {
        target.CallService("set_preset_mode_with_end_datetime", data);
    }

    ///<summary>Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Climate preset mode such as Schedule, Away or Frost Guard. eg: away</param>
    ///<param name="endDatetime">Date &amp; time the preset will be active until. eg: &quot;2019-04-20 05:04:20&quot;</param>
    public static void SetPresetModeWithEndDatetime(this IClimateEntityCore target, object presetMode, DateTime endDatetime)
    {
        target.CallService("set_preset_mode_with_end_datetime", new NetatmoSetPresetModeWithEndDatetimeParameters { PresetMode = presetMode, EndDatetime = endDatetime });
    }

    ///<summary>Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Climate preset mode such as Schedule, Away or Frost Guard. eg: away</param>
    ///<param name="endDatetime">Date &amp; time the preset will be active until. eg: &quot;2019-04-20 05:04:20&quot;</param>
    public static void SetPresetModeWithEndDatetime(this IEnumerable<IClimateEntityCore> target, object presetMode, DateTime endDatetime)
    {
        target.CallService("set_preset_mode_with_end_datetime", new NetatmoSetPresetModeWithEndDatetimeParameters { PresetMode = presetMode, EndDatetime = endDatetime });
    }

    ///<summary>Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.</summary>
    public static void SetSchedule(this IClimateEntityCore target, NetatmoSetScheduleParameters data)
    {
        target.CallService("set_schedule", data);
    }

    ///<summary>Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.</summary>
    public static void SetSchedule(this IEnumerable<IClimateEntityCore> target, NetatmoSetScheduleParameters data)
    {
        target.CallService("set_schedule", data);
    }

    ///<summary>Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="scheduleName">Schedule name. eg: Standard</param>
    public static void SetSchedule(this IClimateEntityCore target, string scheduleName)
    {
        target.CallService("set_schedule", new NetatmoSetScheduleParameters { ScheduleName = scheduleName });
    }

    ///<summary>Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="scheduleName">Schedule name. eg: Standard</param>
    public static void SetSchedule(this IEnumerable<IClimateEntityCore> target, string scheduleName)
    {
        target.CallService("set_schedule", new NetatmoSetScheduleParameters { ScheduleName = scheduleName });
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with an end date &amp; time.</summary>
    public static void SetTemperatureWithEndDatetime(this IClimateEntityCore target, NetatmoSetTemperatureWithEndDatetimeParameters data)
    {
        target.CallService("set_temperature_with_end_datetime", data);
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with an end date &amp; time.</summary>
    public static void SetTemperatureWithEndDatetime(this IEnumerable<IClimateEntityCore> target, NetatmoSetTemperatureWithEndDatetimeParameters data)
    {
        target.CallService("set_temperature_with_end_datetime", data);
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with an end date &amp; time.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="targetTemperature">The target temperature for the device. eg: 19.5</param>
    ///<param name="endDatetime">Date &amp; time the target temperature will be active until. eg: &quot;2019-04-20 05:04:20&quot;</param>
    public static void SetTemperatureWithEndDatetime(this IClimateEntityCore target, double targetTemperature, DateTime endDatetime)
    {
        target.CallService("set_temperature_with_end_datetime", new NetatmoSetTemperatureWithEndDatetimeParameters { TargetTemperature = targetTemperature, EndDatetime = endDatetime });
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with an end date &amp; time.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="targetTemperature">The target temperature for the device. eg: 19.5</param>
    ///<param name="endDatetime">Date &amp; time the target temperature will be active until. eg: &quot;2019-04-20 05:04:20&quot;</param>
    public static void SetTemperatureWithEndDatetime(this IEnumerable<IClimateEntityCore> target, double targetTemperature, DateTime endDatetime)
    {
        target.CallService("set_temperature_with_end_datetime", new NetatmoSetTemperatureWithEndDatetimeParameters { TargetTemperature = targetTemperature, EndDatetime = endDatetime });
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with time period.</summary>
    public static void SetTemperatureWithTimePeriod(this IClimateEntityCore target, NetatmoSetTemperatureWithTimePeriodParameters data)
    {
        target.CallService("set_temperature_with_time_period", data);
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with time period.</summary>
    public static void SetTemperatureWithTimePeriod(this IEnumerable<IClimateEntityCore> target, NetatmoSetTemperatureWithTimePeriodParameters data)
    {
        target.CallService("set_temperature_with_time_period", data);
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with time period.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="targetTemperature">The target temperature for the device. eg: 19.5</param>
    ///<param name="timePeriod">The time period which the temperature setting will be active for.</param>
    public static void SetTemperatureWithTimePeriod(this IClimateEntityCore target, double targetTemperature, object timePeriod)
    {
        target.CallService("set_temperature_with_time_period", new NetatmoSetTemperatureWithTimePeriodParameters { TargetTemperature = targetTemperature, TimePeriod = timePeriod });
    }

    ///<summary>Sets the target temperature for a Netatmo climate device with time period.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="targetTemperature">The target temperature for the device. eg: 19.5</param>
    ///<param name="timePeriod">The time period which the temperature setting will be active for.</param>
    public static void SetTemperatureWithTimePeriod(this IEnumerable<IClimateEntityCore> target, double targetTemperature, object timePeriod)
    {
        target.CallService("set_temperature_with_time_period", new NetatmoSetTemperatureWithTimePeriodParameters { TargetTemperature = targetTemperature, TimePeriod = timePeriod });
    }
}

public static class NotifyEntityExtensionMethods
{
    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this NotifyEntity target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The NotifyEntity to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this NotifyEntity target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The IEnumerable&lt;NotifyEntity&gt; to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this TextEntity target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<TextEntity> target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The TextEntity to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this TextEntity target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;TextEntity&gt; to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this IEnumerable<TextEntity> target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("clean_spot", data);
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("clean_spot", data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("locate", data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("locate", data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("return_to_base", data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("return_to_base", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IVacuumEntityCore target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IVacuumEntityCore target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IVacuumEntityCore target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IVacuumEntityCore target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("start", data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IVacuumEntityCore target, object? data = null)
    {
        target.CallService("stop", data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IEnumerable<IVacuumEntityCore> target, object? data = null)
    {
        target.CallService("stop", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}