{
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic action to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic action to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic action to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restarts Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update their data.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to update",
          "description": "List of entities to force update."
        }
      }
    },
    "reload_core_config": {
      "name": "Reload Core configuration",
      "description": "Reloads the Core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "number": {
              "mode": "box",
              "min": -90,
              "max": 90,
              "step": "any"
            }
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "number": {
              "mode": "box",
              "min": -180,
              "max": 180,
              "step": "any"
            }
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        },
        "elevation": {
          "required": false,
          "example": 120,
          "selector": {
            "number": {
              "mode": "box",
              "step": "any"
            }
          },
          "name": "Elevation",
          "description": "Elevation of your location above sea level."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the \u0060custom_templates\u0060 folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "config_entry": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "Reload all",
      "description": "Reloads all YAML configuration that can be reloaded without restarting Home Assistant.",
      "fields": {}
    }
  },
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Deletes a notification from the notifications panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be deleted."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Deletes all notifications from the notifications panel.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear",
      "description": "Deletes all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0060system_log.external\u0060."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": [
                "dark",
                "light"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Apply \u0060entity_id\u0060 and \u0060event_type\u0060 filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "entity_id": {
          "required": false,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to remove",
          "description": "List of entities for which the data is to be removed from the Recorder database."
        },
        "domains": {
          "example": "sun",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the Recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the Recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    },
    "get_statistics": {
      "name": "Get statistics",
      "description": "Retrieves statistics data for entities within a specific time period.",
      "fields": {
        "start_time": {
          "required": true,
          "example": "2025-01-01 00:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The start time for the statistics query."
        },
        "end_time": {
          "required": false,
          "example": "2025-01-02 00:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The end time for the statistics query. If omitted, returns all statistics from start time onward."
        },
        "statistic_ids": {
          "required": true,
          "example": [
            "sensor.energy_consumption",
            "sensor.temperature"
          ],
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Statistic IDs",
          "description": "The entity IDs or statistic IDs to return statistics for."
        },
        "period": {
          "required": true,
          "example": "hour",
          "selector": {
            "select": {
              "options": [
                "5minute",
                "hour",
                "day",
                "week",
                "month"
              ]
            }
          },
          "name": "Period",
          "description": "The time period to group statistics by."
        },
        "types": {
          "required": true,
          "example": [
            "mean",
            "sum"
          ],
          "selector": {
            "select": {
              "options": [
                "change",
                "last_reset",
                "max",
                "mean",
                "min",
                "state",
                "sum"
              ],
              "multiple": true
            }
          },
          "name": "Types",
          "description": "The types of statistics values to return."
        },
        "units": {
          "required": false,
          "example": {
            "energy": "kWh",
            "temperature": "\u00B0C"
          },
          "selector": {
            "object": null
          },
          "name": "Units",
          "description": "Optional unit conversion mapping."
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Starts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to start."
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on",
      "description": "Stops an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to stop."
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on",
      "description": "Restarts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to restart."
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin",
      "description": "Writes data to the add-on\u0027s standard input.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to write to."
        }
      }
    },
    "host_shutdown": {
      "name": "Power off the host system",
      "description": "Powers off the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system",
      "description": "Reboots the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup",
      "description": "Creates a full backup.",
      "fields": {
        "name": {
          "example": "Backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup",
      "description": "Creates a partial backup.",
      "fields": {
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Includes Home Assistant settings in the backup."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of each add-on."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "name": {
          "example": "Partial backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup",
      "description": "Restores from full backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup",
      "description": "Restores from a partial backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Restores Home Assistant."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to restore from the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to restore from the backup. Use the name slug of each add-on."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for a device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "backup": {
    "create_automatic": {
      "name": "Create automatic backup",
      "description": "Creates a new backup with automatic backup settings.",
      "fields": {}
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        },
        "conversation_id": {
          "example": "my_conversation_1",
          "selector": {
            "text": null
          },
          "name": "Conversation ID",
          "description": "ID of the conversation, to be able to continue a previous conversation"
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the intent configuration.",
      "fields": {
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to clear cached intents for. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to reload."
        }
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Enable remote access",
      "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Disable remote access",
      "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
      "fields": {}
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "advanced": true,
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entity states",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use \u0027Entities snapshot\u0027 instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities snapshot",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine \u0027Entities snapshot\u0027 with \u0027Entity states\u0027."
        }
      }
    },
    "delete": {
      "name": "Delete",
      "description": "Deletes a dynamically created scene.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "homeassistant",
            "domain": [
              "scene"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increments the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "timer": {
    "reload": {
      "name": "Reload",
      "description": "Reloads timers from the YAML-configuration.",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer or restarts it with a provided duration.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Custom duration to restart the timer with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Resets a timer\u0027s duration to the last known initial value without firing the timer finished event.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a running timer earlier than scheduled.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer by adding or subtracting a given duration.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add to or subtract from the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using the \u0027Entity ID\u0027 field."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "script": {
    "toggle_all": {
      "name": "Toggle both zones",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "toggle_night": {
      "name": "Toggle night zone",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "toggle_gate": {
      "name": "Toggle Gate",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "toggle_garage_doors": {
      "name": "Toggle Garage Doors",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "open_all_doors": {
      "name": "Open all doors",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "close_all_doors": {
      "name": "Close all doors",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Starts a script if it isn\u0027t running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    }
  },
  "assist_satellite": {
    "announce": {
      "name": "Announce",
      "description": "Lets a satellite announce a message.",
      "fields": {
        "message": {
          "required": false,
          "example": "Time to wake up!",
          "default": "",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The message to announce."
        },
        "media_id": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Media ID",
          "description": "The media ID to announce instead of using text-to-speech."
        },
        "preannounce": {
          "required": false,
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Preannounce",
          "description": "Play a sound before the announcement."
        },
        "preannounce_media_id": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Preannounce media ID",
          "description": "Custom media ID to play before the announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "assist_satellite"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "start_conversation": {
      "name": "Start conversation",
      "description": "Starts a conversation from a satellite.",
      "fields": {
        "start_message": {
          "required": false,
          "example": "You left the lights on in the living room. Turn them off?",
          "default": "",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The message to start with."
        },
        "start_media_id": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Media ID",
          "description": "The media ID to start with instead of using text-to-speech."
        },
        "extra_system_prompt": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Extra system prompt",
          "description": "Provide background information to the AI about the request."
        },
        "preannounce": {
          "required": false,
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Preannounce",
          "description": "Play a sound before the start message or media."
        },
        "preannounce_media_id": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Preannounce media ID",
          "description": "Custom media ID to play before the start message or media."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "assist_satellite"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    }
  },
  "sonoff": {
    "send_command": {
      "name": "Send Command",
      "description": "Sends a command to a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to send command to.",
          "example": "1000123456"
        },
        "cmd": {
          "name": "Command",
          "description": "A single command to send.",
          "example": "switch"
        }
      }
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles climate device, from on to off, or off to on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128,
              256
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets the temperature setpoint.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature",
          "description": "The temperature setpoint."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Upper target temperature",
          "description": "The max temperature setpoint."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Lower target temperature",
          "description": "The min temperature setpoint."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "set_swing_horizontal_mode": {
      "name": "Set horizontal swing mode",
      "description": "Sets horizontal swing operation mode.",
      "fields": {
        "swing_horizontal_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Horizontal swing mode",
          "description": "Horizontal swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              48
            ]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Percentage step by which the speed should be increased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Percentage step by which the speed should be decreased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls the oscillation of a fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turns oscillation on/off."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets a fan\u0027s rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "forward",
                "reverse"
              ],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction of the fan rotation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the speed of a fan.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset fan mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on one or more lights and adjusts their properties, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_temp_kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "brightness_step": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": -225,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "translation_key": "flash",
                  "options": [
                    "long",
                    "short"
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "translation_key": "flash",
                  "options": [
                    "long",
                    "short"
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_temp_kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "translation_key": "flash",
                  "options": [
                    "long",
                    "short"
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Sends the turn off command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the turn on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Sends the toggle command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won\u0027t change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "python_script": {
    "reload": {
      "name": "Reload",
      "description": "Reloads all available Python scripts.",
      "fields": {}
    }
  },
  "heos": {
    "sign_in": {
      "name": "Sign in",
      "description": "Signs in to a HEOS account.",
      "fields": {
        "username": {
          "required": true,
          "example": "example@example.com",
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "The username or email of the HEOS account."
        },
        "password": {
          "required": true,
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "The password of the HEOS account."
        }
      }
    },
    "sign_out": {
      "name": "Sign out",
      "description": "Signs out of the HEOS account.",
      "fields": {}
    },
    "get_queue": {
      "name": "Get queue",
      "description": "Retrieves the queue of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "heos",
            "domain": [
              "media_player"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "remove_from_queue": {
      "name": "Remove from queue",
      "description": "Removes items from the play queue.",
      "fields": {
        "queue_ids": {
          "required": true,
          "selector": {
            "text": {
              "multiple": true,
              "type": "number"
            }
          },
          "name": "Queue IDs",
          "description": "The IDs (indexes) of the items in the queue to remove."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "heos",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "move_queue_item": {
      "name": "Move queue item",
      "description": "Moves one or more items within the play queue.",
      "fields": {
        "queue_ids": {
          "required": true,
          "selector": {
            "text": {
              "multiple": true,
              "type": "number"
            }
          },
          "name": "Queue IDs",
          "description": "The IDs (indexes) of the items in the queue to move."
        },
        "destination_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1000,
              "step": 1
            }
          },
          "name": "Destination position",
          "description": "The position index in the queue to move the items to."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "heos",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "group_volume_set": {
      "name": "Set group volume",
      "description": "Sets the group\u0027s volume while preserving member volume ratios.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "heos",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "group_volume_down": {
      "name": "Turn down group volume",
      "description": "Turns down the group volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "heos",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "group_volume_up": {
      "name": "Turn up group volume",
      "description": "Turns up the group volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "heos",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date \u0026 time",
          "description": "The target date \u0026 time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date \u0026 time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "music_assistant": {
    "search": {
      "name": "Search Music Assistant",
      "description": "Performs a global search on the Music Assistant library and all providers.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "music_assistant"
            }
          },
          "name": "Music Assistant instance",
          "description": "Select the Music Assistant instance to perform the search on."
        },
        "name": {
          "required": true,
          "example": "We Are The Champions",
          "selector": {
            "text": null
          },
          "name": "Search name",
          "description": "The name/title to search for."
        },
        "media_type": {
          "example": "playlist",
          "selector": {
            "select": {
              "multiple": true,
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type(s)",
          "description": "The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted."
        },
        "artist": {
          "example": "Queen",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "When specifying a track or album name in the name field, you can optionally restrict results by this artist name."
        },
        "album": {
          "example": "News of the world",
          "selector": {
            "text": null
          },
          "name": "Album name",
          "description": "When specifying a track name in the name field, you can optionally restrict results by this album name."
        },
        "limit": {
          "advanced": true,
          "example": 25,
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1
            }
          },
          "name": "Limit",
          "description": "Maximum number of items to return (per media type)."
        },
        "library_only": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Only library items",
          "description": "Only include results that are in the library."
        }
      },
      "response": {
        "optional": false
      }
    },
    "get_library": {
      "name": "Get library items",
      "description": "Retrieves items from a Music Assistant library.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "music_assistant"
            }
          },
          "name": "Music Assistant instance",
          "description": "Select the Music Assistant instance to perform the search on."
        },
        "media_type": {
          "required": true,
          "example": "playlist",
          "selector": {
            "select": {
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type",
          "description": "The media type for which to request details for."
        },
        "favorite": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Favorites only",
          "description": "Filter items so only favorites items are returned."
        },
        "search": {
          "example": "We Are The Champions",
          "selector": {
            "text": null
          },
          "name": "Search",
          "description": "Optional search string to search through this library."
        },
        "limit": {
          "advanced": true,
          "example": 25,
          "default": 25,
          "selector": {
            "number": {
              "min": 1,
              "max": 500,
              "step": 1
            }
          },
          "name": "Limit",
          "description": "Maximum number of items to return."
        },
        "offset": {
          "advanced": true,
          "example": 25,
          "default": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 1000000,
              "step": 1
            }
          },
          "name": "Offset",
          "description": "Offset to start the list from."
        },
        "order_by": {
          "example": "random",
          "selector": {
            "select": {
              "translation_key": "order_by",
              "options": [
                "name",
                "name_desc",
                "sort_name",
                "sort_name_desc",
                "timestamp_added",
                "timestamp_added_desc",
                "last_played",
                "last_played_desc",
                "play_count",
                "play_count_desc",
                "year",
                "year_desc",
                "position",
                "position_desc",
                "artist_name",
                "artist_name_desc",
                "random",
                "random_play_count"
              ]
            }
          },
          "name": "Order by",
          "description": "Sort the list by this field."
        },
        "album_type": {
          "example": "single",
          "selector": {
            "select": {
              "multiple": true,
              "translation_key": "album_type",
              "options": [
                "album",
                "single",
                "compilation",
                "ep",
                "unknown"
              ]
            }
          },
          "name": "Album type filter (albums library only)",
          "description": "Filter albums by type."
        },
        "album_artists_only": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Enable album artists filter (only for artist library)",
          "description": "Only return album artists when listing the artists library items."
        }
      },
      "response": {
        "optional": false
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Plays media on a Music Assistant player with more fine-grained control options.",
      "fields": {
        "media_id": {
          "required": true,
          "example": "spotify://playlist/aabbccddeeff",
          "selector": {
            "object": null
          },
          "name": "Media ID(s)",
          "description": "URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items."
        },
        "media_type": {
          "example": "playlist",
          "selector": {
            "select": {
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "folder",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type",
          "description": "The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted."
        },
        "artist": {
          "example": "Queen",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name."
        },
        "album": {
          "example": "News of the world",
          "selector": {
            "text": null
          },
          "name": "Album name",
          "description": "When specifying a track by name in the Media ID field, you can optionally restrict results by this album name."
        },
        "enqueue": {
          "selector": {
            "select": {
              "options": [
                "play",
                "replace",
                "next",
                "replace_next",
                "add"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or added to the queue."
        },
        "radio_mode": {
          "advanced": true,
          "selector": {
            "boolean": null
          },
          "name": "Enable radio mode",
          "description": "Enable radio mode to auto-generate a playlist based on the selection."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant",
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "play_announcement": {
      "name": "Play announcement",
      "description": "Plays an announcement on a Music Assistant player with more fine-grained control options.",
      "fields": {
        "url": {
          "required": true,
          "example": "http://someremotesite.com/doorbell.mp3",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "URL to the notification sound."
        },
        "use_pre_announce": {
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Use pre-announce",
          "description": "Use pre-announcement sound for the announcement. Omit to use the player default."
        },
        "announce_volume": {
          "example": 75,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1
            }
          },
          "name": "Announce volume",
          "description": "Use a forced volume level for the announcement. Omit to use player default."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant",
            "supported_features": [
              512,
              1048576
            ]
          }
        ]
      }
    },
    "transfer_queue": {
      "name": "Transfer queue",
      "description": "Transfers a player\u0027s queue to another player.",
      "fields": {
        "source_player": {
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "music_assistant"
            }
          },
          "name": "Source media player",
          "description": "The source media player which has the queue you want to transfer. When omitted, the first playing player will be used."
        },
        "auto_play": {
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Auto play",
          "description": "Start playing the queue on the target player. Omit to use the default behavior."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant"
          }
        ]
      }
    },
    "get_queue": {
      "name": "Get playerQueue details (advanced)",
      "description": "Retrieves the details of the currently active queue of a Music Assistant player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant",
            "supported_features": [
              512
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter to its initial value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter to a specific value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    },
    "get_schedule": {
      "name": "Get schedule",
      "description": "Retrieves the configured time ranges of one or multiple schedules.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "schedule"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reloads template entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "openai_conversation": {
    "generate_content": {
      "name": "Generate content",
      "description": "Sends a conversational query to ChatGPT including any attached image or PDF files",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "openai_conversation"
            }
          },
          "name": "Config entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "example": "Hello, how can I help you?",
          "name": "Prompt",
          "description": "The prompt to send"
        },
        "filenames": {
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "example": "- /path/to/file1.txt\n- /path/to/file2.txt\n",
          "name": "Files",
          "description": "List of files to upload"
        }
      },
      "response": {
        "optional": false
      }
    },
    "generate_image": {
      "name": "Generate image",
      "description": "Turns a prompt into an image",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "openai_conversation"
            }
          },
          "name": "Config entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Prompt",
          "description": "The text to turn into an image",
          "example": "A photo of a dog"
        },
        "size": {
          "required": false,
          "example": "1024x1024",
          "default": "1024x1024",
          "selector": {
            "select": {
              "options": [
                "1024x1024",
                "1024x1792",
                "1792x1024"
              ]
            }
          },
          "name": "Size",
          "description": "The size of the image to generate"
        },
        "quality": {
          "required": false,
          "example": "standard",
          "default": "standard",
          "selector": {
            "select": {
              "options": [
                "standard",
                "hd"
              ]
            }
          },
          "name": "Quality",
          "description": "The quality of the image that will be generated"
        },
        "style": {
          "required": false,
          "example": "vivid",
          "default": "vivid",
          "selector": {
            "select": {
              "options": [
                "vivid",
                "natural"
              ]
            }
          },
          "name": "Style",
          "description": "The style of the generated image"
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "unifi": {
    "reconnect_client": {
      "name": "Reconnect wireless client",
      "description": "Tries to get wireless client to reconnect to UniFi Network.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifi"
            }
          },
          "name": "Device",
          "description": "The device that should be forced to reconnect to the wireless network."
        }
      }
    },
    "remove_clients": {
      "name": "Remove clients from the UniFi Network",
      "description": "Cleans up clients that have only been associated with the controller for a short period of time.",
      "fields": {}
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Disarms the alarm.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to disarm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Arms the alarm in the home mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Arms the alarm in the away mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Arms the alarm in the night mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Arms the alarm in the vacation mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Arms the alarm while allowing to bypass a custom area.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Triggers the alarm manually.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "cast": {
    "show_lovelace_view": {
      "name": "Show dashboard view",
      "description": "Shows a dashboard view on a Chromecast device.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Media player entity to show the dashboard view on."
        },
        "dashboard_path": {
          "example": "lovelace-cast",
          "selector": {
            "text": null
          },
          "name": "Dashboard path",
          "description": "The URL path of the dashboard to show, defaults to lovelace if not specified."
        },
        "view_path": {
          "required": true,
          "example": "downstairs",
          "selector": {
            "text": null
          },
          "name": "View path",
          "description": "The URL path of the dashboard view to show."
        }
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "example": "The temperature is {{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "template": null
          },
          "name": "Payload",
          "description": "The payload to publish. Publishes an empty message if not provided."
        },
        "evaluate_payload": {
          "advanced": true,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Evaluate payload",
          "description": "If \u0027Payload\u0027 is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the \u0060mqtt_dump.txt\u0060 file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "google_generative_ai_conversation": {
    "generate_content": {
      "name": "Generate content",
      "description": "Generate content from a prompt consisting of text and optionally images",
      "fields": {
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Prompt",
          "description": "The prompt",
          "example": "Describe what you see in these images"
        },
        "image_filename": {
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Image filename",
          "description": "Deprecated. Use filenames instead.",
          "example": "/config/www/image.jpg"
        },
        "filenames": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Attachment filenames",
          "description": "Attachments to add to the prompt (images, PDFs, etc)",
          "example": "/config/www/image.jpg"
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    }
  },
  "weather": {
    "get_forecasts": {
      "name": "Get forecasts",
      "description": "Retrieves the forecast from selected weather services.",
      "fields": {
        "type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "daily",
                "hourly",
                "twice_daily"
              ],
              "translation_key": "forecast_type"
            }
          },
          "name": "Forecast type",
          "description": "The scope of the weather forecast."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "weather"
            ],
            "supported_features": [
              1,
              2,
              4
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              384
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16385
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16384
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4096
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Removes all items from the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in \u0027Targets\u0027."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2048
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              65536
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [
              2097152
            ]
          },
          "required": false,
          "selector": {
            "select": {
              "options": [
                "play",
                "next",
                "add",
                "replace"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [
              1048576
            ]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "browse_media": {
      "name": "Browse media",
      "description": "Browses the available media.",
      "fields": {
        "media_content_type": {
          "required": false,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "media_content_id": {
          "required": false,
          "example": "A:ALBUMARTIST/Beatles",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to browse. Integration dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              131072
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "search_media": {
      "name": "Search media",
      "description": "Searches the available media.",
      "fields": {
        "search_query": {
          "required": true,
          "example": "Beatles",
          "selector": {
            "text": null
          },
          "name": "Search query",
          "description": "The term to search for."
        },
        "media_content_type": {
          "required": false,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "media_content_id": {
          "required": false,
          "example": "A:ALBUMARTIST/Beatles",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to browse. Integration dependent."
        },
        "media_filter_classes": {
          "required": false,
          "example": [
            "album",
            "artist"
          ],
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Media class filter",
          "description": "List of media classes to filter the search results by."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4194304
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "shuffle_set": {
      "name": "Set shuffle",
      "description": "Enables or disables the shuffle mode.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle mode",
          "description": "Whether the media should be played in randomized order or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32768
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Set repeat",
      "description": "Sets the repeat mode.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "off",
                "all",
                "one"
              ],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Whether the media (one or all) should be played in a loop or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              262144
            ]
          }
        ]
      }
    }
  },
  "denonavr": {
    "get_command": {
      "name": "Get command",
      "description": "Sends a generic HTTP get command.",
      "fields": {
        "command": {
          "example": "/goform/formiPhoneAppDirect.xml?RCKSK0410370",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Endpoint of the command, including associated parameters."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "denonavr",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "set_dynamic_eq": {
      "name": "Set dynamic equalizer",
      "description": "Enables or disables DynamicEQ.",
      "fields": {
        "dynamic_eq": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Dynamic equalizer",
          "description": "Whether DynamicEQ should be enabled or disabled."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "denonavr",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "update_audyssey": {
      "name": "Update Audyssey",
      "description": "Updates Audyssey settings.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "denonavr",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    }
  },
  "vacuum": {
    "start": {
      "name": "Start",
      "description": "Starts or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to dock",
      "description": "Tells the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tells the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locates the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Sets the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan speed",
          "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like \u0027medium\u0027. Some use a percentage, between 0 and 100."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the vacuum cleaner.",
      "fields": {
        "command": {
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to execute. The commands are integration-specific."
        },
        "params": {
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "Parameters for the command. The parameters are integration-specific."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "dreame_vacuum": {
    "vacuum_request_map": {
      "name": "Request Map",
      "description": "Request map data",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_select_map": {
      "name": "Select Map",
      "description": "Select current map. Used when having multiple maps/floors.",
      "fields": {
        "map_id": {
          "example": 14,
          "required": true,
          "selector": {
            "number": {
              "mode": "box"
            }
          },
          "name": "Map ID",
          "description": "ID of the map to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_delete_map": {
      "name": "Delete map",
      "description": "Delete a map.",
      "fields": {
        "map_id": {
          "example": 14,
          "required": false,
          "selector": {
            "number": {
              "mode": "box"
            }
          },
          "name": "Map ID",
          "description": "ID of the map to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_save_temporary_map": {
      "name": "Save Temporary Map",
      "description": "Save the temporary map.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_discard_temporary_map": {
      "name": "Discard Temporary Map",
      "description": "Discard the temporary map.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_replace_temporary_map": {
      "name": "Replace Temporary Map",
      "description": "Replace the temporary map with another saved map.",
      "fields": {
        "map_id": {
          "example": 14,
          "required": false,
          "selector": {
            "number": {
              "mode": "box"
            }
          },
          "name": "Map ID",
          "description": "ID of the map to be replaced with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_clean_zone": {
      "name": "Clean Zone",
      "description": "Start the cleaning operation in the selected area.",
      "fields": {
        "zone": {
          "example": "[819,-263,4424,2105] or [[819,-263,4424,2105],[-2001,-3050,-542,515]]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Zone",
          "description": "Coordinates."
        },
        "repeats": {
          "example": "[1,3] or 1",
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          },
          "name": "Repeats",
          "description": "Number of cleaning passes for every selected zone."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_clean_segment": {
      "name": "Clean Segment",
      "description": "Start the cleaning operation in the selected rooms.",
      "fields": {
        "segments": {
          "example": "[3,2] or 3",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Segments",
          "description": "List of rooms to be cleaned. Only room\u0027s Character or an array of room\u0027s character, cleaning times, fan speed and mop mode to override the default values per room."
        },
        "repeats": {
          "example": "[1,2] or 1",
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          },
          "name": "Repeats",
          "description": "Number of cleaning passes for every selected room (unless it is overridden by customized cleaning parameter)."
        },
        "suction_level": {
          "example": "[0,3] or 0",
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 3
            }
          },
          "name": "Suction Level",
          "description": "Fan speed for every selected room (unless it is overridden by customized cleaning parameter)."
        },
        "water_volume": {
          "example": "[1,3] or 1",
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          },
          "name": "Water Volume",
          "description": "Water level for every selected room (unless it is overridden by customized cleaning parameter)."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_clean_spot": {
      "name": "Clean Spot",
      "description": "Start the cleaning operation in the selected points on the map.",
      "fields": {
        "points": {
          "example": "[819,-263] or [[819,-263],[819,-263]]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Points",
          "description": "List of coordinates to be cleaned."
        },
        "repeats": {
          "example": "[1,2] or 1",
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          },
          "name": "Repeats",
          "description": "Number of cleaning passes for every selected zone."
        },
        "suction_level": {
          "example": "[0,3] or 0",
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 3
            }
          },
          "name": "Suction Level",
          "description": "Fan speed for every selected zone."
        },
        "water_volume": {
          "example": "[1,3] or 1",
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          },
          "name": "Water Volume",
          "description": "Water level for every selected zone."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_set_restricted_zone": {
      "name": "Set Restricted Zone",
      "description": "Define virtual walls, restricted zones, and/or no mop zones.",
      "fields": {
        "walls": {
          "example": "[[819,-263,4424,2105],[-2001,-3050,-542,515]]",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Walls",
          "description": "Virtual walls."
        },
        "zones": {
          "example": "[[819,-263,4424,2105],[-2001,-3050,-542,515]]",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Zones",
          "description": "No go zones."
        },
        "no_mops": {
          "example": "[[819,-263,4424,2105],[-2001,-3050,-542,515]]",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "No Mops",
          "description": "No mop zones."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_remote_control_move_step": {
      "name": "Remote Control Move Step",
      "description": "Remotely control move the bot one step.",
      "fields": {
        "rotation": {
          "example": 64,
          "required": true,
          "selector": {
            "number": {
              "min": -128,
              "max": 128,
              "mode": "box"
            }
          },
          "name": "Rotation",
          "description": "Turn in binary degrees between -128 and 128."
        },
        "velocity": {
          "example": 100,
          "required": true,
          "selector": {
            "number": {
              "min": -300,
              "max": 100,
              "mode": "box"
            }
          },
          "name": "Velocity",
          "description": "Move speed, from 100 (forward) to -300 (backward)."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_install_voice_pack": {
      "name": "Install Voice Pack",
      "description": "Install official or custom voice pack.",
      "fields": {
        "lang_id": {
          "example": "DE",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Language ID",
          "description": "Language ID of this pack."
        },
        "url": {
          "example": "http://awsde0.fds.api.xiaomi.com/dreame-product/dreame.vacuum.p2009/voices/package/deyu.tar.gz",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "Url of this pack it should be reachable by the vacuum bot."
        },
        "md5": {
          "example": "d25986c1f608c0897475707e77d856f9",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "MD5",
          "description": "MD5 checksum of the language pack."
        },
        "size": {
          "example": 4067845,
          "required": true,
          "selector": {
            "number": {
              "mode": "box"
            }
          },
          "name": "Size",
          "description": "Size of the language pack in bytes."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_rename_map": {
      "name": "Rename map",
      "description": "Rename a map.",
      "fields": {
        "map_id": {
          "example": "14",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Map ID",
          "description": "ID of the map."
        },
        "map_name": {
          "example": "Ground Floor",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Map Name",
          "description": "New name of the map."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_merge_segments": {
      "name": "Merge Segments",
      "description": "Merge rooms.",
      "fields": {
        "map_id": {
          "example": "14",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Map ID",
          "description": "ID of the map."
        },
        "segments": {
          "example": "[3,2]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Segments",
          "description": "Room IDs."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_split_segments": {
      "name": "Split Segments",
      "description": "Split rooms.",
      "fields": {
        "map_id": {
          "example": "14",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Map ID",
          "description": "ID of the map."
        },
        "segment": {
          "example": "3",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 60,
              "mode": "box"
            }
          },
          "name": "Segment",
          "description": "Room ID."
        },
        "line": {
          "example": "[819,-263,4424,2105]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Line",
          "description": "Split line coordinates."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_rename_segment": {
      "name": "Rename Segment",
      "description": "Rename a segment.",
      "fields": {
        "segment_id": {
          "example": "3",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 60,
              "mode": "box"
            }
          },
          "name": "Segment ID",
          "description": "ID of the segment"
        },
        "segment_name": {
          "example": "Playroom",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Segment Name",
          "description": "New name of the segment"
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_set_cleaning_sequence": {
      "name": "Set Cleaning Sequence",
      "description": "Set room cleaning sequence. (Only on supported devices)",
      "fields": {
        "cleaning_sequence": {
          "example": "[5,3,2,1,4] or []",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Cleanin sequence",
          "description": "Segment ID list of cleaning sequence."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_set_custom_cleaning": {
      "name": "Set Custom Cleaning",
      "description": "Set custom cleaning parameters. (Only on supported devices)",
      "fields": {
        "segment_id": {
          "example": "[1,2,3,4,5]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Segment ID",
          "description": "Room IDs."
        },
        "suction_level": {
          "example": "[0,0,2,3,1]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Suction Level",
          "description": "Suction level for each room."
        },
        "water_volume": {
          "example": "[1,1,2,3,1]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Water Volume",
          "description": "Water volume for each room."
        },
        "repeats": {
          "example": "[2,2,1,3,1]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Repeats",
          "description": "Cleaning times for each room."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_set_dnd": {
      "name": "Set DnD",
      "description": "Enable/disable DnD functionality and/or setting its start and end time.",
      "fields": {
        "dnd_enabled": {
          "example": "true",
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "DnD Enabled",
          "description": "Enable or disable DnD feature."
        },
        "dnd_start": {
          "example": "22:00",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "DnD Start",
          "description": "Start time of DnD feature."
        },
        "dnd_end": {
          "example": "6:30",
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Dnd End",
          "description": "End time of DnD feature."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "vacuum_reset_consumable": {
      "name": "Reset Consumable",
      "description": "Reset a consumable.",
      "fields": {
        "consumable": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "main_brush",
                "side_brush",
                "filter",
                "sensor",
                "mop_pad",
                "silver_ion",
                "detergent"
              ]
            }
          },
          "name": "Consumable",
          "description": "Consumable type."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "select_select_next": {
      "name": "Select Next",
      "description": "Select the next options of an select entity.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dreame_vacuum",
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_select_previous": {
      "name": "Select Previous",
      "description": "Select the previous options of an select entity.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dreame_vacuum",
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_select_first": {
      "name": "Select First",
      "description": "Select the first option of an select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "dreame_vacuum",
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_select_last": {
      "name": "Select Last",
      "description": "Select the last option of an select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "dreame_vacuum",
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "notify": {
    "send_message": {
      "name": "Send a notification message",
      "description": "Sends a notification message.",
      "fields": {
        "message": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Your notification message."
        },
        "title": {
          "required": false,
          "selector": {
            "text": null
          },
          "filter": {
            "supported_features": [
              1
            ]
          },
          "name": "Title",
          "description": "Title for your notification message."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "notify"
            ]
          }
        ]
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality via this field. For more information, refer to the integration documentation."
        }
      }
    },
    "mobile_app_telefon_kuba": {
      "name": "Send a notification via mobile_app_telefon_kuba",
      "description": "Sends a notification message using the mobile_app_telefon_kuba integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_ticwatch_pro_5": {
      "name": "Send a notification via mobile_app_ticwatch_pro_5",
      "description": "Sends a notification message using the mobile_app_ticwatch_pro_5 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_samsung_tablet": {
      "name": "Send a notification via mobile_app_samsung_tablet",
      "description": "Sends a notification message using the mobile_app_samsung_tablet integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_samsung_dorota": {
      "name": "Send a notification via mobile_app_samsung_dorota",
      "description": "Sends a notification message using the mobile_app_samsung_dorota integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Manually update the records of a seen legacy device tracker in the known_devices.yaml file.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in \u0060known_devices.yaml\u0060)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: \u0060home\u0060, \u0060not_home\u0060, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 0,
              "mode": "box",
              "unit_of_measurement": "m"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "home_connect": {
    "set_option_active": {
      "name": "Set active program option",
      "description": "Sets an option for the active program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        },
        "key": {
          "example": "LaundryCare.Dryer.Option.DryingTarget",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Key",
          "description": "Key of the option."
        },
        "value": {
          "example": "LaundryCare.Dryer.EnumType.DryingTarget.IronDry",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "Value of the option."
        }
      }
    },
    "set_option_selected": {
      "name": "Set selected program option",
      "description": "Sets options for the selected program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        },
        "key": {
          "example": "LaundryCare.Dryer.Option.DryingTarget",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Option key",
          "description": "Key of the option."
        },
        "value": {
          "example": "LaundryCare.Dryer.EnumType.DryingTarget.IronDry",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Option value",
          "description": "Value of the option."
        }
      }
    },
    "change_setting": {
      "name": "Change setting",
      "description": "Changes a setting.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        },
        "key": {
          "example": "BSH.Common.Setting.ChildLock",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Key",
          "description": "Key of the setting."
        },
        "value": {
          "example": "true",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "Value of the setting."
        }
      }
    },
    "pause_program": {
      "name": "Pause program",
      "description": "Pauses the current running program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        }
      }
    },
    "resume_program": {
      "name": "Resume program",
      "description": "Resumes a paused program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        }
      }
    },
    "select_program": {
      "name": "Select program",
      "description": "Selects a program without starting it.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        },
        "program": {
          "example": "Dishcare.Dishwasher.Program.Auto2",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Program",
          "description": "Program to select."
        },
        "key": {
          "example": "BSH.Common.Option.StartInRelative",
          "selector": {
            "text": null
          },
          "name": "Option key",
          "description": "Key of the option."
        },
        "value": {
          "example": 1800,
          "selector": {
            "object": null
          },
          "name": "Option value",
          "description": "Value of the option."
        },
        "unit": {
          "example": "seconds",
          "selector": {
            "text": null
          },
          "name": "Option unit",
          "description": "Unit for the option."
        }
      }
    },
    "start_program": {
      "name": "Start program",
      "description": "Selects a program and starts it.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        },
        "program": {
          "example": "Dishcare.Dishwasher.Program.Auto2",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Program",
          "description": "Program to select."
        },
        "key": {
          "example": "BSH.Common.Option.StartInRelative",
          "selector": {
            "text": null
          },
          "name": "Option key",
          "description": "Key of the option."
        },
        "value": {
          "example": 1800,
          "selector": {
            "object": null
          },
          "name": "Option value",
          "description": "Value of the option."
        },
        "unit": {
          "example": "seconds",
          "selector": {
            "text": null
          },
          "name": "Option unit",
          "description": "Unit for the option."
        }
      }
    },
    "set_program_and_options": {
      "name": "Set program and options",
      "description": "Starts or selects a program with options or sets the options for the active or the selected program.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "home_connect"
            }
          },
          "name": "Device ID",
          "description": "ID of the device."
        },
        "affects_to": {
          "example": "active_program",
          "required": true,
          "selector": {
            "select": {
              "translation_key": "affects_to",
              "options": [
                "active_program",
                "selected_program"
              ]
            }
          },
          "name": "Affects to",
          "description": "Selects if the program affected by the action should be the active or the selected program."
        },
        "program": {
          "example": "dishcare_dishwasher_program_auto2",
          "selector": {
            "select": {
              "mode": "dropdown",
              "custom_value": false,
              "translation_key": "programs",
              "options": [
                "consumer_products_cleaning_robot_program_cleaning_clean_all",
                "consumer_products_cleaning_robot_program_cleaning_clean_map",
                "consumer_products_cleaning_robot_program_basic_go_home",
                "consumer_products_coffee_maker_program_beverage_ristretto",
                "consumer_products_coffee_maker_program_beverage_espresso",
                "consumer_products_coffee_maker_program_beverage_espresso_doppio",
                "consumer_products_coffee_maker_program_beverage_coffee",
                "consumer_products_coffee_maker_program_beverage_x_l_coffee",
                "consumer_products_coffee_maker_program_beverage_caffe_grande",
                "consumer_products_coffee_maker_program_beverage_espresso_macchiato",
                "consumer_products_coffee_maker_program_beverage_cappuccino",
                "consumer_products_coffee_maker_program_beverage_latte_macchiato",
                "consumer_products_coffee_maker_program_beverage_caffe_latte",
                "consumer_products_coffee_maker_program_beverage_milk_froth",
                "consumer_products_coffee_maker_program_beverage_warm_milk",
                "consumer_products_coffee_maker_program_coffee_world_kleiner_brauner",
                "consumer_products_coffee_maker_program_coffee_world_grosser_brauner",
                "consumer_products_coffee_maker_program_coffee_world_verlaengerter",
                "consumer_products_coffee_maker_program_coffee_world_verlaengerter_braun",
                "consumer_products_coffee_maker_program_coffee_world_wiener_melange",
                "consumer_products_coffee_maker_program_coffee_world_flat_white",
                "consumer_products_coffee_maker_program_coffee_world_cortado",
                "consumer_products_coffee_maker_program_coffee_world_cafe_cortado",
                "consumer_products_coffee_maker_program_coffee_world_cafe_con_leche",
                "consumer_products_coffee_maker_program_coffee_world_cafe_au_lait",
                "consumer_products_coffee_maker_program_coffee_world_doppio",
                "consumer_products_coffee_maker_program_coffee_world_kaapi",
                "consumer_products_coffee_maker_program_coffee_world_koffie_verkeerd",
                "consumer_products_coffee_maker_program_coffee_world_galao",
                "consumer_products_coffee_maker_program_coffee_world_garoto",
                "consumer_products_coffee_maker_program_coffee_world_americano",
                "consumer_products_coffee_maker_program_coffee_world_red_eye",
                "consumer_products_coffee_maker_program_coffee_world_black_eye",
                "consumer_products_coffee_maker_program_coffee_world_dead_eye",
                "consumer_products_coffee_maker_program_beverage_hot_water",
                "dishcare_dishwasher_program_pre_rinse",
                "dishcare_dishwasher_program_auto_1",
                "dishcare_dishwasher_program_auto_2",
                "dishcare_dishwasher_program_auto_3",
                "dishcare_dishwasher_program_eco_50",
                "dishcare_dishwasher_program_quick_45",
                "dishcare_dishwasher_program_intensiv_70",
                "dishcare_dishwasher_program_normal_65",
                "dishcare_dishwasher_program_glas_40",
                "dishcare_dishwasher_program_glass_care",
                "dishcare_dishwasher_program_night_wash",
                "dishcare_dishwasher_program_quick_65",
                "dishcare_dishwasher_program_normal_45",
                "dishcare_dishwasher_program_intensiv_45",
                "dishcare_dishwasher_program_auto_half_load",
                "dishcare_dishwasher_program_intensiv_power",
                "dishcare_dishwasher_program_magic_daily",
                "dishcare_dishwasher_program_super_60",
                "dishcare_dishwasher_program_kurz_60",
                "dishcare_dishwasher_program_express_sparkle_65",
                "dishcare_dishwasher_program_machine_care",
                "dishcare_dishwasher_program_steam_fresh",
                "dishcare_dishwasher_program_maximum_cleaning",
                "dishcare_dishwasher_program_mixed_load",
                "laundry_care_dryer_program_cotton",
                "laundry_care_dryer_program_synthetic",
                "laundry_care_dryer_program_mix",
                "laundry_care_dryer_program_blankets",
                "laundry_care_dryer_program_business_shirts",
                "laundry_care_dryer_program_down_feathers",
                "laundry_care_dryer_program_hygiene",
                "laundry_care_dryer_program_jeans",
                "laundry_care_dryer_program_outdoor",
                "laundry_care_dryer_program_synthetic_refresh",
                "laundry_care_dryer_program_towels",
                "laundry_care_dryer_program_delicates",
                "laundry_care_dryer_program_super_40",
                "laundry_care_dryer_program_shirts_15",
                "laundry_care_dryer_program_pillow",
                "laundry_care_dryer_program_anti_shrink",
                "laundry_care_dryer_program_my_time_my_drying_time",
                "laundry_care_dryer_program_time_cold",
                "laundry_care_dryer_program_time_warm",
                "laundry_care_dryer_program_in_basket",
                "laundry_care_dryer_program_time_cold_fix_time_cold_20",
                "laundry_care_dryer_program_time_cold_fix_time_cold_30",
                "laundry_care_dryer_program_time_cold_fix_time_cold_60",
                "laundry_care_dryer_program_time_warm_fix_time_warm_30",
                "laundry_care_dryer_program_time_warm_fix_time_warm_40",
                "laundry_care_dryer_program_time_warm_fix_time_warm_60",
                "laundry_care_dryer_program_dessous",
                "cooking_common_program_hood_automatic",
                "cooking_common_program_hood_venting",
                "cooking_common_program_hood_delayed_shut_off",
                "cooking_oven_program_heating_mode_pre_heating",
                "cooking_oven_program_heating_mode_hot_air",
                "cooking_oven_program_heating_mode_hot_air_eco",
                "cooking_oven_program_heating_mode_hot_air_grilling",
                "cooking_oven_program_heating_mode_top_bottom_heating",
                "cooking_oven_program_heating_mode_top_bottom_heating_eco",
                "cooking_oven_program_heating_mode_bottom_heating",
                "cooking_oven_program_heating_mode_pizza_setting",
                "cooking_oven_program_heating_mode_slow_cook",
                "cooking_oven_program_heating_mode_intensive_heat",
                "cooking_oven_program_heating_mode_keep_warm",
                "cooking_oven_program_heating_mode_preheat_ovenware",
                "cooking_oven_program_heating_mode_frozen_heatup_special",
                "cooking_oven_program_heating_mode_desiccation",
                "cooking_oven_program_heating_mode_defrost",
                "cooking_oven_program_heating_mode_proof",
                "cooking_oven_program_heating_mode_hot_air_30_steam",
                "cooking_oven_program_heating_mode_hot_air_60_steam",
                "cooking_oven_program_heating_mode_hot_air_80_steam",
                "cooking_oven_program_heating_mode_hot_air_100_steam",
                "cooking_oven_program_heating_mode_sabbath_programme",
                "cooking_oven_program_microwave_90_watt",
                "cooking_oven_program_microwave_180_watt",
                "cooking_oven_program_microwave_360_watt",
                "cooking_oven_program_microwave_600_watt",
                "cooking_oven_program_microwave_900_watt",
                "cooking_oven_program_microwave_1000_watt",
                "cooking_oven_program_microwave_max",
                "cooking_oven_program_heating_mode_warming_drawer",
                "laundry_care_washer_program_cotton",
                "laundry_care_washer_program_cotton_cotton_eco",
                "laundry_care_washer_program_cotton_eco_4060",
                "laundry_care_washer_program_cotton_colour",
                "laundry_care_washer_program_easy_care",
                "laundry_care_washer_program_mix",
                "laundry_care_washer_program_mix_night_wash",
                "laundry_care_washer_program_delicates_silk",
                "laundry_care_washer_program_wool",
                "laundry_care_washer_program_sensitive",
                "laundry_care_washer_program_auto_30",
                "laundry_care_washer_program_auto_40",
                "laundry_care_washer_program_auto_60",
                "laundry_care_washer_program_chiffon",
                "laundry_care_washer_program_curtains",
                "laundry_care_washer_program_dark_wash",
                "laundry_care_washer_program_dessous",
                "laundry_care_washer_program_monsoon",
                "laundry_care_washer_program_outdoor",
                "laundry_care_washer_program_plush_toy",
                "laundry_care_washer_program_shirts_blouses",
                "laundry_care_washer_program_sport_fitness",
                "laundry_care_washer_program_towels",
                "laundry_care_washer_program_water_proof",
                "laundry_care_washer_program_power_speed_59",
                "laundry_care_washer_program_super_153045_super_15",
                "laundry_care_washer_program_super_153045_super_1530",
                "laundry_care_washer_program_down_duvet_duvet",
                "laundry_care_washer_program_rinse_rinse_spin_drain",
                "laundry_care_washer_program_drum_clean",
                "laundry_care_washer_dryer_program_cotton",
                "laundry_care_washer_dryer_program_cotton_eco_4060",
                "laundry_care_washer_dryer_program_mix",
                "laundry_care_washer_dryer_program_easy_care",
                "laundry_care_washer_dryer_program_wash_and_dry_60",
                "laundry_care_washer_dryer_program_wash_and_dry_90"
              ]
            }
          },
          "name": "Program",
          "description": "Program to select"
        },
        "cleaning_robot_options": {
          "collapsed": true,
          "fields": {
            "consumer_products_cleaning_robot_option_reference_map_id": {
              "example": "consumer_products_cleaning_robot_enum_type_available_maps_map1",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "available_maps",
                  "options": [
                    "consumer_products_cleaning_robot_enum_type_available_maps_temp_map",
                    "consumer_products_cleaning_robot_enum_type_available_maps_map1",
                    "consumer_products_cleaning_robot_enum_type_available_maps_map2",
                    "consumer_products_cleaning_robot_enum_type_available_maps_map3"
                  ]
                }
              }
            },
            "consumer_products_cleaning_robot_option_cleaning_mode": {
              "example": "consumer_products_cleaning_robot_enum_type_cleaning_modes_standard",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "cleaning_mode",
                  "options": [
                    "consumer_products_cleaning_robot_enum_type_cleaning_modes_silent",
                    "consumer_products_cleaning_robot_enum_type_cleaning_modes_standard",
                    "consumer_products_cleaning_robot_enum_type_cleaning_modes_power"
                  ]
                }
              }
            }
          }
        },
        "coffee_maker_options": {
          "collapsed": true,
          "fields": {
            "consumer_products_coffee_maker_option_bean_amount": {
              "example": "consumer_products_coffee_maker_enum_type_bean_amount_normal",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "bean_amount",
                  "options": [
                    "consumer_products_coffee_maker_enum_type_bean_amount_very_mild",
                    "consumer_products_coffee_maker_enum_type_bean_amount_mild",
                    "consumer_products_coffee_maker_enum_type_bean_amount_mild_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_normal",
                    "consumer_products_coffee_maker_enum_type_bean_amount_normal_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_strong",
                    "consumer_products_coffee_maker_enum_type_bean_amount_strong_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_very_strong",
                    "consumer_products_coffee_maker_enum_type_bean_amount_very_strong_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_extra_strong",
                    "consumer_products_coffee_maker_enum_type_bean_amount_double_shot",
                    "consumer_products_coffee_maker_enum_type_bean_amount_double_shot_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_double_shot_plus_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_triple_shot",
                    "consumer_products_coffee_maker_enum_type_bean_amount_triple_shot_plus",
                    "consumer_products_coffee_maker_enum_type_bean_amount_coffee_ground"
                  ]
                }
              }
            },
            "consumer_products_coffee_maker_option_fill_quantity": {
              "example": 60,
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "mode": "box",
                  "unit_of_measurement": "ml"
                }
              }
            },
            "consumer_products_coffee_maker_option_coffee_temperature": {
              "example": "consumer_products_coffee_maker_enum_type_coffee_temperature_88_c",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "coffee_temperature",
                  "options": [
                    "consumer_products_coffee_maker_enum_type_coffee_temperature_88_c",
                    "consumer_products_coffee_maker_enum_type_coffee_temperature_90_c",
                    "consumer_products_coffee_maker_enum_type_coffee_temperature_92_c",
                    "consumer_products_coffee_maker_enum_type_coffee_temperature_94_c",
                    "consumer_products_coffee_maker_enum_type_coffee_temperature_95_c",
                    "consumer_products_coffee_maker_enum_type_coffee_temperature_96_c"
                  ]
                }
              }
            },
            "consumer_products_coffee_maker_option_bean_container": {
              "example": "consumer_products_coffee_maker_enum_type_bean_container_selection_right",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "bean_container",
                  "options": [
                    "consumer_products_coffee_maker_enum_type_bean_container_selection_right",
                    "consumer_products_coffee_maker_enum_type_bean_container_selection_left"
                  ]
                }
              }
            },
            "consumer_products_coffee_maker_option_flow_rate": {
              "example": "consumer_products_coffee_maker_enum_type_flow_rate_normal",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "flow_rate",
                  "options": [
                    "consumer_products_coffee_maker_enum_type_flow_rate_normal",
                    "consumer_products_coffee_maker_enum_type_flow_rate_intense",
                    "consumer_products_coffee_maker_enum_type_flow_rate_intense_plus"
                  ]
                }
              }
            },
            "consumer_products_coffee_maker_option_multiple_beverages": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "consumer_products_coffee_maker_option_coffee_milk_ratio": {
              "example": "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_50_percent",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "coffee_milk_ratio",
                  "options": [
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_10_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_20_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_25_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_30_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_40_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_50_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_55_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_60_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_65_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_67_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_70_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_75_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_80_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_85_percent",
                    "consumer_products_coffee_maker_enum_type_coffee_milk_ratio_90_percent"
                  ]
                }
              }
            },
            "consumer_products_coffee_maker_option_hot_water_temperature": {
              "example": "consumer_products_coffee_maker_enum_type_hot_water_temperature_50_c",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "hot_water_temperature",
                  "options": [
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_white_tea",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_green_tea",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_black_tea",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_50_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_55_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_60_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_65_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_70_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_75_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_80_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_85_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_90_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_95_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_97_c",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_122_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_131_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_140_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_149_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_158_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_167_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_176_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_185_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_194_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_203_f",
                    "consumer_products_coffee_maker_enum_type_hot_water_temperature_max"
                  ]
                }
              }
            }
          }
        },
        "dish_washer_options": {
          "collapsed": true,
          "fields": {
            "b_s_h_common_option_start_in_relative": {
              "example": 3600,
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "mode": "box",
                  "unit_of_measurement": "s"
                }
              }
            },
            "dishcare_dishwasher_option_intensiv_zone": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_brilliance_dry": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_vario_speed_plus": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_silence_on_demand": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_half_load": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_extra_dry": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_hygiene_plus": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_eco_dry": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "dishcare_dishwasher_option_zeolite_dry": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            }
          }
        },
        "dryer_options": {
          "collapsed": true,
          "fields": {
            "laundry_care_dryer_option_drying_target": {
              "example": "laundry_care_dryer_enum_type_drying_target_iron_dry",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "drying_target",
                  "options": [
                    "laundry_care_dryer_enum_type_drying_target_iron_dry",
                    "laundry_care_dryer_enum_type_drying_target_gentle_dry",
                    "laundry_care_dryer_enum_type_drying_target_cupboard_dry",
                    "laundry_care_dryer_enum_type_drying_target_cupboard_dry_plus",
                    "laundry_care_dryer_enum_type_drying_target_extra_dry"
                  ]
                }
              }
            }
          }
        },
        "hood_options": {
          "collapsed": true,
          "fields": {
            "cooking_hood_option_venting_level": {
              "example": "cooking_hood_enum_type_stage_fan_stage01",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "venting_level",
                  "options": [
                    "cooking_hood_enum_type_stage_fan_off",
                    "cooking_hood_enum_type_stage_fan_stage_01",
                    "cooking_hood_enum_type_stage_fan_stage_02",
                    "cooking_hood_enum_type_stage_fan_stage_03",
                    "cooking_hood_enum_type_stage_fan_stage_04",
                    "cooking_hood_enum_type_stage_fan_stage_05"
                  ]
                }
              }
            },
            "cooking_hood_option_intensive_level": {
              "example": "cooking_hood_enum_type_intensive_stage_intensive_stage1",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "intensive_level",
                  "options": [
                    "cooking_hood_enum_type_intensive_stage_intensive_stage_off",
                    "cooking_hood_enum_type_intensive_stage_intensive_stage1",
                    "cooking_hood_enum_type_intensive_stage_intensive_stage2"
                  ]
                }
              }
            }
          }
        },
        "oven_options": {
          "collapsed": true,
          "fields": {
            "cooking_oven_option_setpoint_temperature": {
              "example": 180,
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "mode": "box",
                  "unit_of_measurement": "\u00B0C/\u00B0F"
                }
              }
            },
            "b_s_h_common_option_duration": {
              "example": 900,
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "mode": "box",
                  "unit_of_measurement": "s"
                }
              }
            },
            "cooking_oven_option_fast_pre_heat": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            }
          }
        },
        "warming_drawer_options": {
          "collapsed": true,
          "fields": {
            "cooking_oven_option_warming_level": {
              "example": "cooking_oven_enum_type_warming_level_medium",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "warming_level",
                  "options": [
                    "cooking_oven_enum_type_warming_level_low",
                    "cooking_oven_enum_type_warming_level_medium",
                    "cooking_oven_enum_type_warming_level_high"
                  ]
                }
              }
            }
          }
        },
        "washer_options": {
          "collapsed": true,
          "fields": {
            "laundry_care_washer_option_temperature": {
              "example": "laundry_care_washer_enum_type_temperature_g_c_40",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "washer_temperature",
                  "options": [
                    "laundry_care_washer_enum_type_temperature_cold",
                    "laundry_care_washer_enum_type_temperature_g_c_20",
                    "laundry_care_washer_enum_type_temperature_g_c_30",
                    "laundry_care_washer_enum_type_temperature_g_c_40",
                    "laundry_care_washer_enum_type_temperature_g_c_50",
                    "laundry_care_washer_enum_type_temperature_g_c_60",
                    "laundry_care_washer_enum_type_temperature_g_c_70",
                    "laundry_care_washer_enum_type_temperature_g_c_80",
                    "laundry_care_washer_enum_type_temperature_g_c_90",
                    "laundry_care_washer_enum_type_temperature_ul_cold",
                    "laundry_care_washer_enum_type_temperature_ul_warm",
                    "laundry_care_washer_enum_type_temperature_ul_hot",
                    "laundry_care_washer_enum_type_temperature_ul_extra_hot"
                  ]
                }
              }
            },
            "laundry_care_washer_option_spin_speed": {
              "example": "laundry_care_washer_enum_type_spin_speed_r_p_m800",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "spin_speed",
                  "options": [
                    "laundry_care_washer_enum_type_spin_speed_off",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_400",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_600",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_700",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_800",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_900",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_1000",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_1200",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_1400",
                    "laundry_care_washer_enum_type_spin_speed_r_p_m_1600",
                    "laundry_care_washer_enum_type_spin_speed_ul_off",
                    "laundry_care_washer_enum_type_spin_speed_ul_low",
                    "laundry_care_washer_enum_type_spin_speed_ul_medium",
                    "laundry_care_washer_enum_type_spin_speed_ul_high"
                  ]
                }
              }
            },
            "b_s_h_common_option_finish_in_relative": {
              "example": 3600,
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "mode": "box",
                  "unit_of_measurement": "s"
                }
              }
            },
            "laundry_care_washer_option_i_dos1_active": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "laundry_care_washer_option_i_dos2_active": {
              "example": false,
              "required": false,
              "selector": {
                "boolean": null
              }
            },
            "laundry_care_washer_option_vario_perfect": {
              "example": "laundry_care_common_enum_type_vario_perfect_eco_perfect",
              "required": false,
              "selector": {
                "select": {
                  "mode": "dropdown",
                  "translation_key": "vario_perfect",
                  "options": [
                    "laundry_care_common_enum_type_vario_perfect_off",
                    "laundry_care_common_enum_type_vario_perfect_eco_perfect",
                    "laundry_care_common_enum_type_vario_perfect_speed_perfect"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the humidifier on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the humidifier off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the humidifier on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Sets the humidifier operation mode.",
      "fields": {
        "mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Mode",
          "description": "Operation mode. For example, \u0022normal\u0022, \u0022eco\u0022, or \u0022away\u0022. For a list of possible values, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Sets the target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Enter your text."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "text"
            ]
          }
        ]
      }
    }
  },
  "water_heater": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns water heater on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns water heater off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turns away mode on/off.",
      "fields": {
        "away_mode": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Away mode",
          "description": "New value of away mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Sets the target temperature.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Temperature",
          "description": "New target temperature for the water heater."
        },
        "operation_mode": {
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Sets the operation mode.",
      "fields": {
        "operation_mode": {
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  },
  "time": {
    "set_value": {
      "name": "Set Time",
      "description": "Sets the time.",
      "fields": {
        "time": {
          "required": true,
          "example": "22:15",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The time to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "time"
            ]
          }
        ]
      }
    }
  },
  "netatmo": {
    "set_persons_home": {
      "name": "Set persons at home",
      "description": "Sets a list of persons as at home. Person\u0027s name must match a name known by the Netatmo Indoor (Welcome) Camera.",
      "fields": {
        "persons": {
          "example": "[Alice, Bob]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Persons",
          "description": "List of names."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_person_away": {
      "name": "Set person away",
      "description": "Sets a person as away. If no person is set the home will be marked as empty. Person\u0027s name must match a name known by the Netatmo Indoor (Welcome) Camera.",
      "fields": {
        "person": {
          "example": "Bob",
          "selector": {
            "text": null
          },
          "name": "Person",
          "description": "Person\u0027s name."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_camera_light": {
      "name": "Set camera light mode",
      "description": "Sets the light mode for a Netatmo Outdoor camera light.",
      "fields": {
        "camera_light_mode": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "on",
                "off",
                "auto"
              ]
            }
          },
          "name": "Camera light mode",
          "description": "Outdoor camera light mode."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_schedule": {
      "name": "Set heating schedule",
      "description": "Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.",
      "fields": {
        "schedule_name": {
          "example": "Standard",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Schedule",
          "description": "Schedule name."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode_with_end_datetime": {
      "name": "Set preset mode with end date \u0026 time",
      "description": "Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "select": {
              "options": [
                "away",
                "frost_guard"
              ]
            }
          },
          "name": "Preset mode",
          "description": "Climate preset mode such as Schedule, Away or Frost Guard."
        },
        "end_datetime": {
          "required": true,
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "datetime": null
          },
          "name": "End date \u0026 time",
          "description": "Date \u0026 time the preset will be active until."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_temperature_with_end_datetime": {
      "name": "Set temperature with end date \u0026 time",
      "description": "Sets the target temperature for a Netatmo climate device with an end date \u0026 time.",
      "fields": {
        "target_temperature": {
          "required": true,
          "example": "19.5",
          "selector": {
            "number": {
              "min": 7,
              "max": 30,
              "step": 0.5
            }
          },
          "name": "Target temperature",
          "description": "The target temperature for the device."
        },
        "end_datetime": {
          "required": true,
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "datetime": null
          },
          "name": "End date \u0026 time",
          "description": "Date \u0026 time the target temperature will be active until."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_temperature_with_time_period": {
      "name": "Set temperature with time period",
      "description": "Sets the target temperature for a Netatmo climate device with time period.",
      "fields": {
        "target_temperature": {
          "required": true,
          "example": "19.5",
          "selector": {
            "number": {
              "min": 7,
              "max": 30,
              "step": 0.5
            }
          },
          "name": "Target temperature",
          "description": "The target temperature for the device."
        },
        "time_period": {
          "required": true,
          "default": {
            "hours": 3,
            "minutes": 0,
            "seconds": 0,
            "days": 0
          },
          "selector": {
            "duration": null
          },
          "name": "Time period",
          "description": "The time period which the temperature setting will be active for."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "clear_temperature_setting": {
      "name": "Clear temperature setting",
      "description": "Clears any temperature setting for a Netatmo climate device reverting it to the current preset or schedule.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "register_webhook": {
      "name": "Register webhook",
      "description": "Registers the webhook to the Netatmo backend.",
      "fields": {}
    },
    "unregister_webhook": {
      "name": "Unregister webhook",
      "description": "Unregisters the webhook from the Netatmo backend.",
      "fields": {}
    }
  },
  "dahua": {
    "set_video_profile_mode": {
      "name": "Set Dahua Video Profile Mode To Day or Night",
      "description": "Sets the video profile mode to day or night",
      "fields": {
        "mode": {
          "name": "Mode",
          "description": "The profile: Day, Night",
          "example": "Day",
          "selector": {
            "select": {
              "options": [
                "Day",
                "Night"
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_focus_zoom": {
      "name": "Set the Dahua Focus and Zoom",
      "description": "Sets the camera\u0027s focus and zoom",
      "fields": {
        "focus": {
          "name": "focus",
          "description": "Decimal Value for Focus",
          "example": "0.758333",
          "required": true,
          "default": "0.758333",
          "selector": {
            "text": null
          }
        },
        "zoom": {
          "name": "zoom",
          "description": "Decimal value for zoom",
          "example": "0.898502",
          "required": true,
          "default": "0.898502",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_privacy_masking": {
      "name": "Set the Dahua Privacy Masking",
      "description": "Enables or disabled the cameras privacy masking",
      "fields": {
        "index": {
          "name": "Index",
          "description": "The mask index. 0 is the first mask",
          "example": 0,
          "required": true,
          "default": 0,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        },
        "enabled": {
          "name": "Enabled",
          "description": "If true enables the mask, otherwise disables it",
          "example": true,
          "required": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "enable_channel_title": {
      "name": "Enable Channel Title Overlay",
      "description": "Enables or disable the channel title video overaly",
      "fields": {
        "enabled": {
          "name": "Enabled",
          "description": "If the overlay is enabled or not",
          "example": true,
          "required": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "enable_time_overlay": {
      "name": "Enable Channel Time Overlay",
      "description": "Enables or disable the channel time video overaly",
      "fields": {
        "enabled": {
          "name": "Enabled",
          "description": "If the overlay is enabled or not",
          "example": true,
          "required": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "enable_text_overlay": {
      "name": "Enable Channel Text Overlay",
      "description": "Enables or disable the channel text video overaly",
      "fields": {
        "group": {
          "name": "Group",
          "description": "Multiple text overlay groups can exist. The default 1 should be used in most cases",
          "example": 1,
          "required": true,
          "default": 1,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        },
        "enabled": {
          "name": "Enabled",
          "description": "If the overlay is enabled or not",
          "example": true,
          "required": true,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "enable_custom_overlay": {
      "name": "Enable Channel Custom Text Overlay",
      "description": "Enables or disable the channel custom text video overaly",
      "fields": {
        "group": {
          "name": "Group",
          "description": "Multiple custom text groups can exist. The default 0 should be used in most cases",
          "example": 0,
          "required": true,
          "default": 0,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        },
        "enabled": {
          "name": "Enabled",
          "description": "If the overlay is enabled or not",
          "example": true,
          "required": true,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "enable_all_ivs_rules": {
      "name": "Enable or Disable All IVS rules",
      "description": "Enables of disables all IVS rules based on the supplied \u0027enabled\u0027 param",
      "fields": {
        "enabled": {
          "name": "Enabled",
          "description": "If true all IVS rules are enabled. If false, all are disabled",
          "example": true,
          "required": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "enable_ivs_rule": {
      "name": "Enable or Disable IVS rule",
      "description": "Enables of disable a single IVS rule based on the supplied \u0027enabled\u0027 param",
      "fields": {
        "index": {
          "name": "Index",
          "description": "The rule index. 0 is a hidden rule, so usually the first rule is rule 1",
          "example": 1,
          "required": true,
          "default": 1,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        },
        "enabled": {
          "name": "Enabled",
          "description": "If true enables the IVS rule, otherwise disables it",
          "example": true,
          "required": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "vto_open_door": {
      "name": "Open a door via a VTO",
      "description": "Open a door via a VTO (Doorbell) for supported devices",
      "fields": {
        "door_id": {
          "name": "Door ID",
          "description": "The door ID. Default is 1",
          "example": 1,
          "required": true,
          "default": 1,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "vto_cancel_call": {
      "name": "Cancel VTO call",
      "description": "Cancels a VTO call",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_channel_title": {
      "name": "Sets Channel Title",
      "description": "Sets a title on the video",
      "fields": {
        "text1": {
          "name": "Text 1",
          "description": "The first title",
          "example": "Front Porch",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        },
        "text2": {
          "name": "Text 2",
          "description": "The second title",
          "example": "House",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_text_overlay": {
      "name": "Set text overlay",
      "description": "Sets a text overlay on the video",
      "fields": {
        "group": {
          "name": "Group",
          "description": "Multiple custom text groups can exist. The default 1 should be used in most cases",
          "example": 1,
          "required": true,
          "default": 1,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        },
        "text1": {
          "name": "Text 1",
          "description": "Text overlay 1",
          "example": "Text 1",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        },
        "text2": {
          "name": "Text 2",
          "description": "Text overlay 2",
          "example": "Text 2",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        },
        "text3": {
          "name": "Text 3",
          "description": "Text overlay 3",
          "example": "Text 3",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        },
        "text4": {
          "name": "Text 4",
          "description": "Text overlay 4",
          "example": "Text 4",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_custom_overlay": {
      "name": "Set Custom Text Overlay",
      "description": "Sets a custom text overlay on the video",
      "fields": {
        "group": {
          "name": "Group",
          "description": "Multiple custom text groups can exist. The default 0 should be used in most cases",
          "example": 0,
          "required": true,
          "default": 0,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "max": 100
            }
          }
        },
        "text1": {
          "name": "Text 1",
          "description": "Custom overlay 1",
          "example": "Text 1",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        },
        "text2": {
          "name": "Text 2",
          "description": "Custom overlay 2",
          "example": "Text 2",
          "required": false,
          "default": "",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_video_in_day_night_mode": {
      "name": "Set the Day or Night Color Mode",
      "description": "Set the camera\u0027s Day/Night Mode. For example, Color, BlackWhite, or Auto",
      "fields": {
        "config_type": {
          "name": "Config Type",
          "description": "The config type: general, day, night",
          "example": "general",
          "default": "general",
          "selector": {
            "select": {
              "options": [
                "general",
                "day",
                "night"
              ]
            }
          }
        },
        "mode": {
          "name": "Mode",
          "description": "The mode: Auto, Color, BlackWhite. Note Auto is also known as Brightness by Dahua",
          "example": "Auto",
          "default": "Auto",
          "selector": {
            "select": {
              "options": [
                "Auto",
                "Color",
                "BlackWhite"
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "reboot": {
      "name": "Reboots the device",
      "description": "Reboots the device",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_record_mode": {
      "name": "Set Record Mode on Dahua Camera",
      "description": "Sets the record mode (on/off or auto). On is always on recording. Off is always off. Auto based on motion settings, etc.",
      "fields": {
        "mode": {
          "name": "Mode",
          "description": "The mode: Auto, On, Off",
          "example": "Auto",
          "default": "Auto",
          "selector": {
            "select": {
              "options": [
                "Auto",
                "On",
                "Off"
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "set_infrared_mode": {
      "name": "Set Infrared Mode on Dahua Camera",
      "description": "Set the infrared light settings on a Dahua camera",
      "fields": {
        "mode": {
          "name": "Mode",
          "description": "The infrared mode: Auto, On, Off",
          "example": "Auto",
          "default": "Auto",
          "selector": {
            "select": {
              "options": [
                "Auto",
                "On",
                "Off"
              ]
            }
          }
        },
        "brightness": {
          "name": "Brightness",
          "description": "The infrared brightness, from 0 to 100 inclusive. 100 is the brightest",
          "example": 100,
          "default": 100,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 1,
              "mode": "slider"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "dahua",
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "zha": {
    "permit": {
      "name": "Permit",
      "description": "Allows nodes to join the Zigbee network.",
      "fields": {
        "duration": {
          "default": 60,
          "selector": {
            "number": {
              "min": 0,
              "max": 254,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Time to permit joins."
        },
        "ieee": {
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address of the node permitting new joins."
        },
        "source_ieee": {
          "example": "00:0a:bf:00:01:10:23:35",
          "selector": {
            "text": null
          },
          "name": "Source IEEE",
          "description": "IEEE address of the joining device (must be combined with the \u0027Install code\u0027 field)."
        },
        "install_code": {
          "example": "1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF",
          "selector": {
            "text": null
          },
          "name": "Install code",
          "description": "Install code of the joining device (must be combined with the \u0027Source IEEE\u0027 field)."
        },
        "qr_code": {
          "example": "Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051",
          "selector": {
            "text": null
          },
          "name": "QR code",
          "description": "Provides both the IEEE address and the install code of the joining device (different between vendors)."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a node from the Zigbee network.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address of the node to remove."
        }
      }
    },
    "set_zigbee_cluster_attribute": {
      "name": "Set Zigbee cluster attribute",
      "description": "Sets an attribute value for the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "endpoint_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535,
              "mode": "box"
            }
          },
          "name": "Endpoint ID",
          "description": "Endpoint ID for the cluster."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "attribute": {
          "required": true,
          "example": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Attribute",
          "description": "ID of the attribute to set."
        },
        "value": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Value to write to the attribute."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code. Use a value of \u0022-1\u0022 to force no code to be set."
        }
      }
    },
    "issue_zigbee_cluster_command": {
      "name": "Issue Zigbee cluster command",
      "description": "Issues a command on the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "endpoint_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Endpoint ID",
          "description": "Endpoint ID for the cluster."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "command": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Command",
          "description": "ID of the command to execute."
        },
        "command_type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "client",
                "server"
              ]
            }
          },
          "name": "Command Type",
          "description": "Type of the command to execute."
        },
        "args": {
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Arguments to pass to the command."
        },
        "params": {
          "selector": {
            "object": null
          },
          "name": "Params",
          "description": "Parameters to pass to the command."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code. Use a value of \u0022-1\u0022 to force no code to be set."
        }
      }
    },
    "issue_zigbee_group_command": {
      "name": "Issue Zigbee group command",
      "description": "Issues a command on the specified cluster on the specified group.",
      "fields": {
        "group": {
          "required": true,
          "example": 546,
          "selector": {
            "text": null
          },
          "name": "Group",
          "description": "Hexadecimal address of the group."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to send command to."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": [
                "in",
                "out"
              ]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "command": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Command",
          "description": "ID of the command to execute."
        },
        "args": {
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Arguments to pass to the command."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code. Use a value of \u0022-1\u0022 to force no code to be set."
        }
      }
    },
    "warning_device_squawk": {
      "name": "Warning device squawk",
      "description": "This action uses the WD capabilities to emit a quick audible/visible pulse called a \u0022squawk\u0022. The squawk command has no effect if the WD is currently active (warning in progress).",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "mode": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Mode",
          "description": "The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD \u201Csquawks\u201D) is implementation specific."
        },
        "strobe": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Strobe",
          "description": "The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit."
        },
        "level": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Level",
          "description": "The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values."
        }
      }
    },
    "warning_device_warn": {
      "name": "Warning device starts alert",
      "description": "This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "mode": {
          "default": 3,
          "selector": {
            "number": {
              "min": 0,
              "max": 6,
              "mode": "box"
            }
          },
          "name": "Mode",
          "description": "The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards."
        },
        "strobe": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Strobe",
          "description": "The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. \u00220\u0022 means no strobe, \u00221\u0022 means strobe. If the strobe field is \u201C1\u201D and the Warning Mode is \u201C0\u201D (\u201CStop\u201D), then only the strobe is activated."
        },
        "level": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Level",
          "description": "The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 0,
              "max": 65535,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are \u00220\u0022 this field is ignored."
        },
        "duty_cycle": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 10
            }
          },
          "name": "Duty cycle",
          "description": "Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies \u201C40,\u201D, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second."
        },
        "intensity": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Intensity",
          "description": "Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec."
        }
      }
    },
    "set_lock_user_code": {
      "name": "Set lock user code",
      "description": "Sets a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to set the code in."
        },
        "user_code": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "enable_lock_user_code": {
      "name": "Enable lock user",
      "description": "Enables a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to enable."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "disable_lock_user_code": {
      "name": "Disable lock user",
      "description": "Disables a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to disable."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    },
    "clear_lock_user_code": {
      "name": "Clear lock user",
      "description": "Clears a user code from a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to clear code from."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "integration": "zha"
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the siren on.",
      "fields": {
        "tone": {
          "example": "fire",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Tone",
          "description": "The tone to emit. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration."
        },
        "volume_level": {
          "example": 0.5,
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          },
          "name": "Volume",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
        },
        "duration": {
          "example": 15,
          "filter": {
            "supported_features": [
              16
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Number of seconds the sound is played. Must be supported by the integration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the siren on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "valve": {
    "open_valve": {
      "name": "Open",
      "description": "Opens a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_valve": {
      "name": "Close",
      "description": "Closes a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_valve_position": {
      "name": "Set position",
      "description": "Moves a valve to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_valve": {
      "name": "Stop",
      "description": "Stops the valve movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a valve open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  }
}